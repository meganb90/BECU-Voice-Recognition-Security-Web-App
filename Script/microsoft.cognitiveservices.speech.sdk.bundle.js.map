{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./bundleApp.js","webpack:///microsoft.cognitiveservices.speech.sdk.ts","webpack:///src/common.browser/Exports.ts","webpack:///src/common.browser/ConsoleLoggingListener.ts","webpack:///src/common/Exports.ts","webpack:///src/common/AudioSourceEvents.ts","webpack:///src/common/PlatformEvent.ts","webpack:///src/common/Guid.ts","webpack:///./node_modules/uuid/index.js","webpack:///./node_modules/uuid/v1.js","webpack:///./node_modules/uuid/lib/rng-browser.js","webpack:///./node_modules/uuid/lib/bytesToUuid.js","webpack:///./node_modules/uuid/v4.js","webpack:///src/common/ConnectionEvents.ts","webpack:///src/common/ConnectionMessage.ts","webpack:///src/common/Error.ts","webpack:///src/common/ConnectionOpenResponse.ts","webpack:///src/common/DialogEvents.ts","webpack:///src/common/Events.ts","webpack:///src/common/EventSource.ts","webpack:///src/common/IAudioSource.ts","webpack:///src/common/IConnection.ts","webpack:///src/common/IDetachable.ts","webpack:///src/common/IDictionary.ts","webpack:///src/common/IDisposable.ts","webpack:///src/common/IEventSource.ts","webpack:///src/common/ITimer.ts","webpack:///src/common/IWebsocketMessageFormatter.ts","webpack:///src/common/List.ts","webpack:///src/common/Promise.ts","webpack:///src/common/Queue.ts","webpack:///src/common/RawWebsocketMessage.ts","webpack:///src/common/RiffPcmEncoder.ts","webpack:///src/common/Stream.ts","webpack:///src/common.speech/TranslationStatus.ts","webpack:///src/common/ChunkedArrayBufferStream.ts","webpack:///src/common/IAudioDestination.ts","webpack:///src/common/Timeout.ts","webpack:///src/common/OCSPEvents.ts","webpack:///src/common/BackgroundError.ts","webpack:///src/common.browser/IRecorder.ts","webpack:///src/common.browser/MicAudioSource.ts","webpack:///src/common.speech/Exports.ts","webpack:///src/common.speech/CognitiveSubscriptionKeyAuthentication.ts","webpack:///src/common.speech/HeaderNames.ts","webpack:///src/common.speech/IAuthentication.ts","webpack:///src/common.speech/CognitiveTokenAuthentication.ts","webpack:///src/common.speech/IConnectionFactory.ts","webpack:///src/common.speech/ISynthesisConnectionFactory.ts","webpack:///src/common.speech/IntentConnectionFactory.ts","webpack:///src/sdk/Exports.ts","webpack:///src/sdk/Audio/AudioConfig.ts","webpack:///src/sdk/Contracts.ts","webpack:///src/sdk/Audio/AudioFileWriter.ts","webpack:///fs (ignored)","webpack:///src/sdk/Audio/AudioInputStream.ts","webpack:///./node_modules/buffer/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///src/sdk/Audio/AudioStreamFormat.ts","webpack:///src/sdk/Audio/AudioOutputStream.ts","webpack:///src/sdk/Audio/AudioOutputFormat.ts","webpack:///src/sdk/SpeechSynthesisOutputFormat.ts","webpack:///src/sdk/CancellationReason.ts","webpack:///src/sdk/Audio/PullAudioInputStreamCallback.ts","webpack:///src/sdk/Audio/PushAudioOutputStreamCallback.ts","webpack:///src/sdk/KeywordRecognitionModel.ts","webpack:///src/sdk/SessionEventArgs.ts","webpack:///src/sdk/RecognitionEventArgs.ts","webpack:///src/sdk/OutputFormat.ts","webpack:///src/sdk/IntentRecognitionEventArgs.ts","webpack:///src/sdk/RecognitionResult.ts","webpack:///src/sdk/SpeechRecognitionResult.ts","webpack:///src/sdk/IntentRecognitionResult.ts","webpack:///src/sdk/LanguageUnderstandingModel.ts","webpack:///src/sdk/SpeechRecognitionEventArgs.ts","webpack:///src/sdk/SpeechRecognitionCanceledEventArgs.ts","webpack:///src/sdk/CancellationEventArgsBase.ts","webpack:///src/sdk/TranslationRecognitionEventArgs.ts","webpack:///src/sdk/TranslationSynthesisEventArgs.ts","webpack:///src/sdk/TranslationRecognitionResult.ts","webpack:///src/sdk/TranslationSynthesisResult.ts","webpack:///src/sdk/ResultReason.ts","webpack:///src/sdk/SpeechConfig.ts","webpack:///src/sdk/SpeechTranslationConfig.ts","webpack:///src/sdk/PropertyCollection.ts","webpack:///src/sdk/PropertyId.ts","webpack:///src/sdk/Recognizer.ts","webpack:///src/sdk/SpeechRecognizer.ts","webpack:///src/sdk/IntentRecognizer.ts","webpack:///src/sdk/VoiceProfileType.ts","webpack:///src/sdk/TranslationRecognizer.ts","webpack:///src/sdk/Translations.ts","webpack:///src/sdk/NoMatchReason.ts","webpack:///src/sdk/NoMatchDetails.ts","webpack:///src/sdk/TranslationRecognitionCanceledEventArgs.ts","webpack:///src/sdk/IntentRecognitionCanceledEventArgs.ts","webpack:///src/sdk/CancellationDetailsBase.ts","webpack:///src/sdk/CancellationDetails.ts","webpack:///src/sdk/CancellationErrorCodes.ts","webpack:///src/sdk/ConnectionEventArgs.ts","webpack:///src/sdk/ServiceEventArgs.ts","webpack:///src/sdk/Connection.ts","webpack:///src/sdk/ConnectionMessage.ts","webpack:///src/sdk/PhraseListGrammar.ts","webpack:///src/sdk/DialogServiceConfig.ts","webpack:///src/sdk/BotFrameworkConfig.ts","webpack:///src/sdk/CustomCommandsConfig.ts","webpack:///src/sdk/DialogServiceConnector.ts","webpack:///src/common.speech/DialogConnectorFactory.ts","webpack:///src/common.speech/ConnectionFactoryBase.ts","webpack:///src/common.speech/QueryParameterNames.ts","webpack:///src/sdk/ActivityReceivedEventArgs.ts","webpack:///src/sdk/TurnStatusReceivedEventArgs.ts","webpack:///src/common.speech/ServiceMessages/TurnStatusPayload.ts","webpack:///src/sdk/ServicePropertyChannel.ts","webpack:///src/sdk/ProfanityOption.ts","webpack:///src/sdk/Audio/BaseAudioPlayer.ts","webpack:///src/sdk/ConnectionMessageEventArgs.ts","webpack:///src/sdk/VoiceProfile.ts","webpack:///src/sdk/VoiceProfileEnrollmentResult.ts","webpack:///src/sdk/VoiceProfileResult.ts","webpack:///src/sdk/VoiceProfileAuthorizationPhraseResult.ts","webpack:///src/sdk/VoiceProfileClient.ts","webpack:///src/sdk/SpeakerRecognizer.ts","webpack:///src/sdk/SpeakerIdentificationModel.ts","webpack:///src/sdk/SpeakerVerificationModel.ts","webpack:///src/sdk/AutoDetectSourceLanguageConfig.ts","webpack:///src/sdk/AutoDetectSourceLanguageResult.ts","webpack:///src/sdk/SourceLanguageConfig.ts","webpack:///src/sdk/SpeakerRecognitionResult.ts","webpack:///src/sdk/Transcription/Exports.ts","webpack:///src/sdk/Transcription/Conversation.ts","webpack:///src/sdk/Transcription/ConversationCommon.ts","webpack:///src/sdk/Transcription/ConversationExpirationEventArgs.ts","webpack:///src/sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","webpack:///src/sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","webpack:///src/sdk/Transcription/ConversationTranslationEventArgs.ts","webpack:///src/sdk/Transcription/ConversationTranslationResult.ts","webpack:///src/sdk/Transcription/ConversationTranslator.ts","webpack:///src/sdk/Transcription/ConversationTranscriber.ts","webpack:///src/sdk/Transcription/IParticipant.ts","webpack:///src/sdk/Transcription/ParticipantChangedReason.ts","webpack:///src/sdk/SpeechSynthesizer.ts","webpack:///src/sdk/SpeechSynthesisResult.ts","webpack:///src/sdk/SpeechSynthesisEventArgs.ts","webpack:///src/sdk/SpeechSynthesisWordBoundaryEventArgs.ts","webpack:///src/sdk/SpeechSynthesisBookmarkEventArgs.ts","webpack:///src/sdk/SpeechSynthesisVisemeEventArgs.ts","webpack:///src/sdk/Audio/SpeakerAudioDestination.ts","webpack:///src/sdk/ConversationTranscriptionCanceledEventArgs.ts","webpack:///src/sdk/PronunciationAssessmentGradingSystem.ts","webpack:///src/sdk/PronunciationAssessmentGranularity.ts","webpack:///src/sdk/PronunciationAssessmentConfig.ts","webpack:///src/sdk/PronunciationAssessmentResult.ts","webpack:///src/common.speech/RecognitionEvents.ts","webpack:///src/common.speech/ServiceRecognizerBase.ts","webpack:///src/common.speech/SpeechConnectionMessage.Internal.ts","webpack:///src/common.speech/RecognizerConfig.ts","webpack:///src/common.speech/SpeechServiceInterfaces.ts","webpack:///src/common.speech/WebsocketMessageFormatter.ts","webpack:///src/common.speech/SpeechConnectionFactory.ts","webpack:///src/common.speech/TranscriberConnectionFactory.ts","webpack:///src/common.speech/TranslationConnectionFactory.ts","webpack:///src/common.speech/SpeechSynthesisConnectionFactory.ts","webpack:///src/common.speech/EnumTranslation.ts","webpack:///src/common.speech/ServiceMessages/Enums.ts","webpack:///src/common.speech/ServiceMessages/TranslationSynthesisEnd.ts","webpack:///src/common.speech/ServiceMessages/TranslationHypothesis.ts","webpack:///src/common.speech/ServiceMessages/TranslationPhrase.ts","webpack:///src/common.speech/TranslationServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/SpeechDetected.ts","webpack:///src/common.speech/ServiceMessages/SpeechHypothesis.ts","webpack:///src/common.speech/ServiceMessages/SpeechKeyword.ts","webpack:///src/common.speech/SpeechServiceRecognizer.ts","webpack:///src/common.speech/TranscriptionServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/DetailedSpeechPhrase.ts","webpack:///src/common.speech/ServiceMessages/SimpleSpeechPhrase.ts","webpack:///src/common.speech/AddedLmIntent.ts","webpack:///src/common.speech/IntentServiceRecognizer.ts","webpack:///src/common.speech/ServiceMessages/IntentResponse.ts","webpack:///src/common.speech/RequestSession.ts","webpack:///src/common.speech/ServiceTelemetryListener.Internal.ts","webpack:///src/common.speech/SpeechContext.ts","webpack:///src/common.speech/DynamicGrammarBuilder.ts","webpack:///src/common.speech/DynamicGrammarInterfaces.ts","webpack:///src/common.speech/DialogServiceAdapter.ts","webpack:///src/common.speech/DialogServiceTurnStateManager.ts","webpack:///src/common.speech/DialogServiceTurnState.ts","webpack:///src/common.speech/ServiceMessages/ActivityResponsePayload.ts","webpack:///src/common.speech/AgentConfig.ts","webpack:///src/common.speech/Transcription/Exports.ts","webpack:///src/common.speech/Transcription/ConversationManager.ts","webpack:///src/common.speech/Transcription/ConversationConnectionConfig.ts","webpack:///src/common.browser/RestConfigBase.ts","webpack:///src/common.speech/Transcription/ConversationUtils.ts","webpack:///xmlhttprequest-ts (ignored)?3973","webpack:///src/common.speech/Transcription/ConversationTranslatorRecognizer.ts","webpack:///src/common.speech/Transcription/ConversationConnectionFactory.ts","webpack:///src/common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","webpack:///src/common.speech/Transcription/ConversationConnectionMessage.ts","webpack:///src/common.speech/Transcription/ConversationServiceAdapter.ts","webpack:///src/common.speech/Transcription/ConversationRequestSession.ts","webpack:///src/common.speech/Transcription/ConversationTranslatorEventArgs.ts","webpack:///src/common.speech/Transcription/ConversationTranslatorInterfaces.ts","webpack:///src/common.speech/Transcription/ServiceMessages/Exports.ts","webpack:///src/common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","webpack:///src/common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","webpack:///src/common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","webpack:///src/common.speech/Transcription/TranscriberRecognizer.ts","webpack:///src/common.speech/ServiceMessages/SynthesisAudioMetadata.ts","webpack:///src/common.speech/SynthesisTurn.ts","webpack:///src/common.speech/SynthesisAdapterBase.ts","webpack:///src/common.speech/SynthesisEvents.ts","webpack:///src/common.speech/SynthesizerConfig.ts","webpack:///src/common.speech/SynthesisContext.ts","webpack:///src/common.speech/SpeakerRecognitionConfig.ts","webpack:///src/common.speech/SpeakerIdMessageAdapter.ts","webpack:///src/common.browser/FileAudioSource.ts","webpack:///src/common.browser/PCMRecorder.ts","webpack:///src/common.browser/WebsocketConnection.ts","webpack:///src/common.browser/WebsocketMessageAdapter.ts","webpack:///ws (ignored)","webpack:///src/common.browser/CertChecks.ts","webpack:///./node_modules/process/browser.js","webpack:///tls (ignored)","webpack:///./node_modules/url-parse/index.js","webpack:///./node_modules/requires-port/index.js","webpack:///./node_modules/querystringify/index.js","webpack:///../../external/ocsp/ocsp (ignored)","webpack:///agent-base (ignored)","webpack:///async-disk-cache (ignored)","webpack:///https-proxy-agent (ignored)","webpack:///net (ignored)","webpack:///src/common.browser/ReplayableAudioNode.ts","webpack:///src/common.browser/ProxyInfo.ts","webpack:///src/common.browser/RestMessageAdapter.ts","webpack:///xmlhttprequest-ts (ignored)"],"names":[],"mappings":"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IAAM,gBAAgB,GAAiB;IACnC,OAAO,UAAU,EAAE,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;AACxE,CAAC,CAAC;AAEmB,4CAAgB;;;;;;;;ACbrC,SAAS,mBAAO,CAAC,CAAM;AACvB,SAAS,mBAAO,CAAC,EAAM;;AAEvB;AACA;AACA;;AAEA;;;;;;;ACPA,UAAU,mBAAO,CAAC,EAAW;AAC7B,kBAAkB,mBAAO,CAAC,EAAmB;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,OAAO;AACxB;AACA;;AAEA;AACA;;AAEA;;;;;;;AC5GA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACzBA,UAAU,mBAAO,CAAC,EAAW;AAC7B,kBAAkB,mBAAO,CAAC,EAAmB;;AAE7C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;A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AAa,mBAAO,CAAC,EAAW;AAChC,cAAc,mBAAO,CAAC,EAAS;AAC/B,cAAc,mBAAO,CAAC,EAAS;;AAE/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC,SAAS;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,wBAAwB,QAAQ;AAChC;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,mBAAmB,cAAc;AACjuDAAuD,OAAO;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,YAAY;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC5vDA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;ACnBY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA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,gBAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAyCL,qBAAC;CAAA;AAxVY,wCAAc;;;;;;;;;ACpC3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;ACvLtC,e;;;;;;;ACAA,8CAAa;;AAEb,eAAe,mBAAO,CAAC,GAAe;AACtC,SAAS,mBAAO,CAAC,GAAgB;AACjC;AACA,+CAA+C,GAAG;AAClD;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yDAAyD;AACzD,GAAG;AACH,sCAAsC;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,gBAAgB;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,cAAc;AACzB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,yBAAyB;AACjC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,iBAAiB;AAC5B;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,kBAAkB;AACnC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC5ca;;AAEb;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AAC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","file":"microsoft.cognitiveservices.speech.sdk.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nwindow.SpeechSDK = require('./distrib/lib/microsoft.cognitiveservices.speech.sdk.js');\n\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { ConsoleLoggingListener } from \"./src/common.browser/Exports\";\nimport { Events } from \"./src/common/Exports\";\n\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\nEvents.instance.attachListener(new ConsoleLoggingListener());\n\n// Speech SDK API\nexport * from \"./src/sdk/Exports\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport * from \"./ConsoleLoggingListener\";\nexport * from \"./IRecorder\";\nexport * from \"./MicAudioSource\";\nexport * from \"./FileAudioSource\";\nexport * from \"./PCMRecorder\";\nexport * from \"./WebsocketConnection\";\nexport * from \"./WebsocketMessageAdapter\";\nexport * from \"./ReplayableAudioNode\";\nexport * from \"./ProxyInfo\";\nexport * from \"./RestMessageAdapter\";\nexport * from \"./RestConfigBase\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\n\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\n    private privLogLevelFilter: EventType;\n\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\n        this.privLogLevelFilter = logLevelFilter;\n    }\n\n    public onEvent = (event: PlatformEvent): void => {\n        if (event.eventType >= this.privLogLevelFilter) {\n            const log = this.toString(event);\n\n            switch (event.eventType) {\n                case EventType.Debug:\n                    // tslint:disable-next-line:no-console\n                    console.debug(log);\n                    break;\n                case EventType.Info:\n                    // tslint:disable-next-line:no-console\n                    console.info(log);\n                    break;\n                case EventType.Warning:\n                    // tslint:disable-next-line:no-console\n                    console.warn(log);\n                    break;\n                case EventType.Error:\n                    // tslint:disable-next-line:no-console\n                    console.error(log);\n                    break;\n                default:\n                    // tslint:disable-next-line:no-console\n                    console.log(log);\n                    break;\n            }\n        }\n    }\n\n    private toString = (event: any): string => {\n        const logFragments = [\n            `${event.EventTime}`,\n            `${event.Name}`,\n        ];\n\n        for (const prop in event) {\n            if (prop && event.hasOwnProperty(prop) &&\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\n                prop !== \"eventId\" && prop !== \"name\" &&\n                prop !== \"constructor\") {\n                const value = event[prop];\n                let valueToLog = \"<NULL>\";\n                if (value !== undefined && value !== null) {\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\n                        valueToLog = value.toString();\n                    } else {\n                        valueToLog = JSON.stringify(value);\n                    }\n                }\n\n                logFragments.push(`${prop}: ${valueToLog}`);\n            }\n\n        }\n\n        return logFragments.join(\" | \");\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport * from \"./AudioSourceEvents\";\nexport * from \"./ConnectionEvents\";\nexport * from \"./ConnectionMessage\";\nexport * from \"./ConnectionOpenResponse\";\nexport * from \"./DialogEvents\";\nexport * from \"./Error\";\nexport * from \"./Events\";\nexport * from \"./EventSource\";\nexport * from \"./Guid\";\nexport * from \"./IAudioSource\";\nexport * from \"./IConnection\";\nexport * from \"./IDetachable\";\nexport * from \"./IDictionary\";\nexport * from \"./IDisposable\";\nexport * from \"./IEventSource\";\nexport * from \"./IErrorMessages\";\nexport * from \"./ITimer\";\nexport * from \"./IWebsocketMessageFormatter\";\nexport * from \"./List\";\nexport * from \"./PlatformEvent\";\nexport * from \"./Promise\";\nexport * from \"./Queue\";\nexport * from \"./RawWebsocketMessage\";\nexport * from \"./RiffPcmEncoder\";\nexport * from \"./Stream\";\nexport { TranslationStatus } from \"../common.speech/TranslationStatus\";\nexport * from \"./ChunkedArrayBufferStream\";\nexport * from \"./IAudioDestination\";\nexport * from \"./Timeout\";\nexport * from \"./OCSPEvents\";\nexport * from \"./BackgroundError\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class AudioSourceEvent extends PlatformEvent {\n    private privAudioSourceId: string;\n\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.privAudioSourceId = audioSourceId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n}\n\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\n    }\n}\n\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceReadyEvent\", audioSourceId);\n    }\n}\n\nexport class AudioSourceOffEvent extends AudioSourceEvent {\n    constructor(audioSourceId: string) {\n        super(\"AudioSourceOffEvent\", audioSourceId);\n    }\n}\n\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\n    private privError: string;\n\n    constructor(audioSourceId: string, error: string) {\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\n        this.privError = error;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\n    private privAudioNodeId: string;\n\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\n        super(eventName, audioSourceId);\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\n    }\n}\n\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\n    constructor(audioSourceId: string, audioNodeId: string) {\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\n    }\n}\n\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\n    private privError: string;\n\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\n        this.privError = error;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { createNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum EventType {\n    Debug,\n    Info,\n    Warning,\n    Error,\n}\n\nexport class PlatformEvent {\n    private privName: string;\n    private privEventId: string;\n    private privEventTime: string;\n    private privEventType: EventType;\n    private privMetadata: IStringDictionary<string>;\n\n    constructor(eventName: string, eventType: EventType) {\n        this.privName = eventName;\n        this.privEventId = createNoDashGuid();\n        this.privEventTime = new Date().toISOString();\n        this.privEventType = eventType;\n        this.privMetadata = { };\n    }\n\n    public get name(): string {\n        return this.privName;\n    }\n\n    public get eventId(): string {\n        return this.privEventId;\n    }\n\n    public get eventTime(): string {\n        return this.privEventTime;\n    }\n\n    public get eventType(): EventType {\n        return this.privEventType;\n    }\n\n    public get metadata(): IStringDictionary<string> {\n        return this.privMetadata;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { v4 as uuid } from \"uuid\";\n\nconst createGuid: () => string = (): string => {\n    return uuid();\n};\n\nconst createNoDashGuid: () => string = (): string => {\n    return createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\n};\n\nexport { createGuid, createNoDashGuid };\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class ServiceEvent extends PlatformEvent {\n    private privJsonResult: string;\n\n    constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\n      super(eventName, eventType);\n      this.privJsonResult = jsonstring;\n    }\n\n    public get jsonString(): string {\n        return this.privJsonResult;\n    }\n}\n\nexport class ConnectionEvent extends PlatformEvent {\n    private privConnectionId: string;\n\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n        this.privConnectionId = connectionId;\n    }\n\n    public get connectionId(): string {\n        return this.privConnectionId;\n    }\n}\n\nexport class ConnectionStartEvent extends ConnectionEvent {\n    private privUri: string;\n    private privHeaders: IStringDictionary<string>;\n\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\n        super(\"ConnectionStartEvent\", connectionId);\n        this.privUri = uri;\n        this.privHeaders = headers;\n    }\n\n    public get uri(): string {\n        return this.privUri;\n    }\n\n    public get headers(): IStringDictionary<string> {\n        return this.privHeaders;\n    }\n}\n\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\n        super(\"ConnectionEstablishedEvent\", connectionId);\n    }\n}\n\nexport class ConnectionClosedEvent extends ConnectionEvent {\n    private privReason: string;\n    private privStatusCode: number;\n\n    constructor(connectionId: string, statusCode: number, reason: string) {\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\n        this.privReason = reason;\n        this.privStatusCode = statusCode;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\nexport class ConnectionErrorEvent extends ConnectionEvent {\n    private readonly privMessage: string;\n    private readonly privType: string;\n\n    constructor(connectionId: string, message: string, type: string) {\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\n        this.privMessage = message;\n        this.privType = type;\n    }\n\n    public get message(): string {\n        return this.privMessage;\n    }\n\n    public get type(): string {\n        return this.privType;\n    }\n}\n\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\n    private privStatusCode: number;\n    private privReason: string;\n\n    constructor(connectionId: string, statuscode: number, reason: string) {\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\n        this.privStatusCode = statuscode;\n        this.privReason = reason;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n}\n\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\n    private privNetworkReceivedTime: string;\n    private privMessage: ConnectionMessage;\n\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkReceivedTime(): string {\n        return this.privNetworkReceivedTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\n    private privNetworkSentTime: string;\n    private privMessage: ConnectionMessage;\n\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\n        super(\"ConnectionMessageSentEvent\", connectionId);\n        this.privNetworkSentTime = networkSentTimeISO;\n        this.privMessage = message;\n    }\n\n    public get networkSentTime(): string {\n        return this.privNetworkSentTime;\n    }\n\n    public get message(): ConnectionMessage {\n        return this.privMessage;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum MessageType {\n    Text,\n    Binary,\n}\n\nexport class ConnectionMessage {\n\n    private privMessageType: MessageType;\n    private privHeaders: IStringDictionary<string>;\n    private privBody: any = null;\n    private privSize: number;\n\n    private privId: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        this.privMessageType = messageType;\n        this.privBody = body;\n        this.privHeaders = headers ? headers : {};\n        this.privId = id ? id : createNoDashGuid();\n        switch (this.messageType) {\n            case MessageType.Binary:\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\n                break;\n            case MessageType.Text:\n                this.privSize = this.textBody.length;\n        }\n    }\n\n    public get messageType(): MessageType {\n        return this.privMessageType;\n    }\n\n    public get headers(): IStringDictionary<string> {\n        return this.privHeaders;\n    }\n\n    public get body(): any {\n        return this.privBody;\n    }\n\n    public get textBody(): string {\n        if (this.privMessageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.privBody as string;\n    }\n\n    public get binaryBody(): ArrayBuffer {\n        if (this.privMessageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.privBody;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\n/**\n * The error that is thrown when an argument passed in is null.\n *\n * @export\n * @class ArgumentNullError\n * @extends {Error}\n */\nexport class ArgumentNullError extends Error {\n\n    /**\n     * Creates an instance of ArgumentNullError.\n     *\n     * @param {string} argumentName - Name of the argument that is null\n     *\n     * @memberOf ArgumentNullError\n     */\n    public constructor(argumentName: string) {\n        super(argumentName);\n        this.name = \"ArgumentNull\";\n        this.message = argumentName;\n    }\n}\n\n/**\n * The error that is thrown when an invalid operation is performed in the code.\n *\n * @export\n * @class InvalidOperationError\n * @extends {Error}\n */\nexport class InvalidOperationError extends Error {\n\n    /**\n     * Creates an instance of InvalidOperationError.\n     *\n     * @param {string} error - The error\n     *\n     * @memberOf InvalidOperationError\n     */\n    public constructor(error: string) {\n        super(error);\n        this.name = \"InvalidOperation\";\n        this.message = error;\n    }\n}\n\n/**\n * The error that is thrown when an object is disposed.\n *\n * @export\n * @class ObjectDisposedError\n * @extends {Error}\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ObjectDisposedError extends Error {\n\n    /**\n     * Creates an instance of ObjectDisposedError.\n     *\n     * @param {string} objectName - The object that is disposed\n     * @param {string} error - The error\n     *\n     * @memberOf ObjectDisposedError\n     */\n    public constructor(objectName: string, error?: string) {\n        super(error);\n        this.name = objectName + \"ObjectDisposed\";\n        this.message = error;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class ConnectionOpenResponse {\n    private privStatusCode: number;\n    private privReason: string;\n\n    constructor(statusCode: number, reason: string) {\n        this.privStatusCode = statusCode;\n        this.privReason = reason;\n    }\n\n    public get statusCode(): number {\n        return this.privStatusCode;\n    }\n\n    public get reason(): string {\n        return this.privReason;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { AgentConfig } from \"../common.speech/Exports\";\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class DialogEvent extends PlatformEvent {\n\n    constructor(eventName: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n    }\n}\n\nexport class SendingAgentContextMessageEvent extends DialogEvent {\n    private privAgentConfig: AgentConfig;\n\n    constructor(agentConfig: AgentConfig) {\n        super(\"SendingAgentContextMessageEvent\");\n        this.privAgentConfig = agentConfig;\n    }\n\n    public get agentConfig(): AgentConfig {\n        return this.privAgentConfig;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"./Error\";\nimport { EventSource } from \"./EventSource\";\nimport { IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class Events {\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\n\n    public static setEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\n        if (!eventSource) {\n            throw new ArgumentNullError(\"eventSource\");\n        }\n\n        Events.privInstance = eventSource;\n    }\n\n    public static get instance(): IEventSource<PlatformEvent> {\n        return Events.privInstance;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IEventListener, IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\n    private privMetadata: IStringDictionary<string>;\n    private privIsDisposed: boolean = false;\n\n    constructor(metadata?: IStringDictionary<string>) {\n        this.privMetadata = metadata;\n    }\n\n    public onEvent = (event: TEvent): void => {\n        if (this.isDisposed()) {\n            throw (new ObjectDisposedError(\"EventSource\"));\n        }\n\n        if (this.metadata) {\n            for (const paramName in this.metadata) {\n                if (paramName) {\n                    if (event.metadata) {\n                        if (!event.metadata[paramName]) {\n                            event.metadata[paramName] = this.metadata[paramName];\n                        }\n                    }\n                }\n            }\n        }\n\n        for (const eventId in this.privEventListeners) {\n            if (eventId && this.privEventListeners[eventId]) {\n                this.privEventListeners[eventId](event);\n            }\n        }\n    }\n\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\n        const id = createNoDashGuid();\n        this.privEventListeners[id] = onEventCallback;\n        return {\n            detach: () => {\n                delete this.privEventListeners[id];\n                return Promise.resolve();\n            },\n        };\n    }\n\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\n        return this.attach(listener.onEvent);\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privIsDisposed;\n    }\n\n    public dispose = (): void => {\n        this.privEventListeners = null;\n        this.privIsDisposed = true;\n    }\n\n    public get metadata(): IStringDictionary<string> {\n        return this.privMetadata;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ISpeechConfigAudioDevice } from \"../common.speech/Exports\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport { AudioSourceEvent } from \"./AudioSourceEvents\";\nimport { EventSource } from \"./EventSource\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStreamChunk } from \"./Stream\";\n\nexport interface IAudioSource {\n    id(): string;\n    turnOn(): Promise<void>;\n    attach(audioNodeId: string): Promise<IAudioStreamNode>;\n    detach(audioNodeId: string): void;\n    turnOff(): Promise<void>;\n    events: EventSource<AudioSourceEvent>;\n    format: Promise<AudioStreamFormatImpl>;\n    deviceInfo: Promise<ISpeechConfigAudioDevice>;\n    blob: Promise<Blob | Buffer>;\n    setProperty?(name: string, value: string): void;\n    getProperty?(name: string, def?: string): string;\n}\n\nexport interface IAudioStreamNode extends IDetachable {\n    id(): string;\n    read(): Promise<IStreamChunk<ArrayBuffer>>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionEvent } from \"./ConnectionEvents\";\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\nimport { EventSource } from \"./EventSource\";\n\nexport enum ConnectionState {\n    None,\n    Connected,\n    Connecting,\n    Disconnected,\n}\n\nexport interface IConnection {\n    id: string;\n    state(): ConnectionState;\n    open(): Promise<ConnectionOpenResponse>;\n    send(message: ConnectionMessage): Promise<void>;\n    read(): Promise<ConnectionMessage>;\n    events: EventSource<ConnectionEvent>;\n    dispose(disposing?: string): Promise<void>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface IDetachable {\n    detach(): Promise<void>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface IStringDictionary<TValue> {\n    [propName: string]: TValue;\n}\n\nexport interface INumberDictionary<TValue> extends Object {\n    [propName: number]: TValue;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * @export\n * @interface IDisposable\n */\nexport interface IDisposable {\n\n    /**\n     * @returns {boolean}\n     *\n     * @memberOf IDisposable\n     */\n    isDisposed(): boolean;\n\n    /**\n     * Performs cleanup operations on this instance\n     *\n     * @param {string} [reason] - optional reason for disposing the instance.\n     * This will be used to throw errors when a operations are performed on the disposed object.\n     *\n     * @memberOf IDisposable\n     */\n    dispose(reason?: string): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport interface IEventListener<TEvent extends PlatformEvent> {\n    onEvent(e: TEvent): void;\n}\n\nexport interface IEventSource<TEvent extends PlatformEvent> extends IDisposable {\n    metadata: IStringDictionary<string>;\n\n    onEvent(e: TEvent): void;\n\n    attach(onEventCallback: (event: TEvent) => void): IDetachable;\n\n    attachListener(listener: IEventListener<TEvent>): IDetachable;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface ITimer {\n    /**\n     * start timer\n     *\n     * @param {number} delay\n     * @param {(...args: any[]) => any} successCallback\n     * @returns {*}\n     *\n     * @memberOf ITimer\n     */\n    start(): void;\n\n    /**\n     * stops timer\n     *\n     * @param {*} timerId\n     *\n     * @memberOf ITimer\n     */\n    stop(): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionMessage } from \"./ConnectionMessage\";\nimport { RawWebsocketMessage } from \"./RawWebsocketMessage\";\n\nexport interface IWebsocketMessageFormatter {\n    toConnectionMessage(message: RawWebsocketMessage): Promise<ConnectionMessage>;\n    fromConnectionMessage(message: ConnectionMessage): Promise<RawWebsocketMessage>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    get(itemIndex: number): TItem;\n    first(): TItem;\n    last(): TItem;\n\n    add(item: TItem): void;\n    insertAt(index: number, item: TItem): void;\n\n    removeFirst(): TItem;\n    removeLast(): TItem;\n    removeAt(index: number): TItem;\n    remove(index: number, count: number): TItem[];\n    clear(): void;\n\n    length(): number;\n\n    onAdded(addedCallback: () => void): IDetachable;\n    onRemoved(removedCallback: () => void): IDetachable;\n    onDisposed(disposedCallback: () => void): IDetachable;\n\n    join(seperator?: string): string;\n\n    toArray(): TItem[];\n\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\n    all(callback: (item: TItem) => boolean): boolean;\n    forEach(callback: (item: TItem, index: number) => void): void;\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    clone(): List<TItem>;\n    concat(list: List<TItem>): List<TItem>;\n    concatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private privList: TItem[];\n    private privSubscriptionIdCounter: number = 0;\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\n    private privDisposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.privList = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.privList.push(item);\n            }\n        }\n    }\n\n    public get = (itemIndex: number): TItem => {\n        this.throwIfDisposed();\n        return this.privList[itemIndex];\n    }\n\n    public first = (): TItem => {\n        return this.get(0);\n    }\n\n    public last = (): TItem => {\n        return this.get(this.length() - 1);\n    }\n\n    public add = (item: TItem): void => {\n        this.throwIfDisposed();\n        this.insertAt(this.privList.length, item);\n    }\n\n    public insertAt = (index: number, item: TItem): void => {\n        this.throwIfDisposed();\n        if (index === 0) {\n            this.privList.unshift(item);\n        } else if (index === this.privList.length) {\n            this.privList.push(item);\n        } else {\n            this.privList.splice(index, 0, item);\n        }\n        this.triggerSubscriptions(this.privAddSubscriptions);\n    }\n\n    public removeFirst = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(0);\n    }\n\n    public removeLast = (): TItem => {\n        this.throwIfDisposed();\n        return this.removeAt(this.length() - 1);\n    }\n\n    public removeAt = (index: number): TItem => {\n        this.throwIfDisposed();\n        return this.remove(index, 1)[0];\n    }\n\n    public remove = (index: number, count: number): TItem[] => {\n        this.throwIfDisposed();\n        const removedElements = this.privList.splice(index, count);\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\n        return removedElements;\n    }\n\n    public clear = (): void => {\n        this.throwIfDisposed();\n        this.remove(0, this.length());\n    }\n\n    public length = (): number => {\n        this.throwIfDisposed();\n        return this.privList.length;\n    }\n\n    public onAdded = (addedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            detach: () => {\n                delete this.privAddSubscriptions[subscriptionId];\n                return Promise.resolve();\n            },\n        };\n    }\n\n    public onRemoved = (removedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            detach: () => {\n                delete this.privRemoveSubscriptions[subscriptionId];\n                return Promise.resolve();\n            },\n        };\n    }\n\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\n        this.throwIfDisposed();\n        const subscriptionId = this.privSubscriptionIdCounter++;\n\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            detach: () => {\n                delete this.privDisposedSubscriptions[subscriptionId];\n                return Promise.resolve();\n            },\n        };\n    }\n\n    public join = (seperator?: string): string => {\n        this.throwIfDisposed();\n        return this.privList.join(seperator);\n    }\n\n    public toArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.privList.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.throwIfDisposed();\n        if (callback) {\n            return this.where(callback).length() > 0;\n        } else {\n            return this.length() > 0;\n        }\n    }\n\n    public all = (callback: (item: TItem) => boolean): boolean => {\n        this.throwIfDisposed();\n        return this.where(callback).length() === this.length();\n    }\n\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\n        this.throwIfDisposed();\n        for (let i = 0; i < this.length(); i++) {\n            callback(this.privList[i], i);\n        }\n    }\n\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.throwIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.privList.length; i++) {\n            selectList.push(callback(this.privList[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.throwIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.privList.length; i++) {\n            if (callback(this.privList[i], i)) {\n                filteredList.add(this.privList[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        const clonedArray = this.toArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.throwIfDisposed();\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public clone = (): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.toArray());\n    }\n\n    public concat = (list: List<TItem>): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(list.toArray()));\n    }\n\n    public concatArray = (array: TItem[]): List<TItem> => {\n        this.throwIfDisposed();\n        return new List<TItem>(this.privList.concat(array));\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privList == null;\n    }\n\n    public dispose = (reason?: string): void => {\n        if (!this.isDisposed()) {\n            this.privDisposeReason = reason;\n            this.privList = null;\n            this.privAddSubscriptions = null;\n            this.privRemoveSubscriptions = null;\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\n        }\n    }\n\n    private throwIfDisposed = (): void => {\n        if (this.isDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\n        }\n    }\n\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { ArgumentNullError } from \"./Error\";\n\nexport enum PromiseState {\n    None,\n    Resolved,\n    Rejected,\n}\n\nexport interface IDeferred<T> {\n    readonly promise: Promise<T>;\n\n    resolve(result: T): IDeferred<T>;\n\n    reject(error: string): IDeferred<T>;\n}\n\nexport class PromiseResult<T> {\n    protected privIsCompleted: boolean;\n    protected privIsError: boolean;\n    protected privError: string;\n    protected privResult: T;\n\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\n        promiseResultEventSource.on((result: T) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = false;\n                this.privResult = result;\n            }\n        }, (error: string) => {\n            if (!this.privIsCompleted) {\n                this.privIsCompleted = true;\n                this.privIsError = true;\n                this.privError = error;\n            }\n        });\n    }\n\n    public get isCompleted(): boolean {\n        return this.privIsCompleted;\n    }\n\n    public get isError(): boolean {\n        return this.privIsError;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n\n    public get result(): T {\n        return this.privResult;\n    }\n\n    public throwIfError = (): void => {\n        if (this.isError) {\n            throw this.error;\n        }\n    }\n}\n\nexport class PromiseResultEventSource<T>  {\n\n    private privOnSetResult: (result: T) => void;\n    private privOnSetError: (error: string) => void;\n\n    public setResult = (result: T): void => {\n        this.privOnSetResult(result);\n    }\n\n    public setError = (error: string): void => {\n        this.privOnSetError(error);\n    }\n\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\n        this.privOnSetResult = onSetResult;\n        this.privOnSetError = onSetError;\n    }\n}\n\nexport class Deferred<T> implements IDeferred<T> {\n    private privPromise: Promise<T>;\n    private privResolve: (value?: T | PromiseLike<T>) => void;\n    private privReject: (reason?: any) => void;\n\n    public constructor() {\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\n            this.privResolve = resolve;\n            this.privReject = reject;\n        });\n    }\n\n    public get promise(): Promise<T> {\n        return this.privPromise;\n    }\n\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\n        this.privResolve(result);\n        return this;\n    }\n\n    public reject = (error: string): Deferred<T> => {\n        this.privReject(error);\n        return this;\n    }\n}\n\nexport class Sink<T> {\n    private privState: PromiseState = PromiseState.None;\n    private privPromiseResult: PromiseResult<T> = null;\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\n\n    private privSuccessHandlers: ((result: T) => void)[] = [];\n    private privErrorHandlers: ((e: string) => void)[] = [];\n\n    public constructor() {\n        this.privPromiseResultEvents = new PromiseResultEventSource();\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\n    }\n\n    public get state(): PromiseState {\n        return this.privState;\n    }\n\n    public get result(): PromiseResult<T> {\n        return this.privPromiseResult;\n    }\n\n    public resolve = (result: T): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot resolve a completed promise'\");\n        }\n\n        this.privState = PromiseState.Resolved;\n        this.privPromiseResultEvents.setResult(result);\n\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\n        }\n\n        this.detachHandlers();\n    }\n\n    public reject = (error: string): void => {\n        if (this.privState !== PromiseState.None) {\n            throw new Error(\"'Cannot reject a completed promise'\");\n        }\n\n        this.privState = PromiseState.Rejected;\n        this.privPromiseResultEvents.setError(error);\n\n        for (const errorHandler of this.privErrorHandlers) {\n            this.executeErrorCallback(error, errorHandler);\n        }\n\n        this.detachHandlers();\n    }\n\n    public on = (\n        successCallback: (result: T) => void,\n        errorCallback: (error: string) => void): void => {\n\n        if (successCallback == null) {\n            successCallback = (r: T) => { return; };\n        }\n\n        if (this.privState === PromiseState.None) {\n            this.privSuccessHandlers.push(successCallback);\n            this.privErrorHandlers.push(errorCallback);\n        } else {\n            if (this.privState === PromiseState.Resolved) {\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\n            } else if (this.privState === PromiseState.Rejected) {\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\n            }\n\n            this.detachHandlers();\n        }\n    }\n\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\n        try {\n            successCallback(result);\n        } catch (e) {\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\n        }\n    }\n\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\n        if (errorCallback) {\n            try {\n                errorCallback(error);\n            } catch (e) {\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\n            }\n        } else {\n            throw new Error(`'Unhandled error: ${error}'`);\n        }\n    }\n\n    private detachHandlers = (): void => {\n        this.privErrorHandlers = [];\n        this.privSuccessHandlers = [];\n    }\n}\n\nexport function marshalPromiseToCallbacks<T>(\n    promise: Promise<T>,\n    cb?: (value: T) => void,\n    err?: (error: string) => void): void {\n    promise.then((val: T): void => {\n        try {\n            if (!!cb) {\n                cb(val);\n            }\n        } catch (error) {\n            if (!!err) {\n                try {\n                    if (error instanceof Error) {\n                        const typedError: Error = error as Error;\n                        err(typedError.name + \": \" + typedError.message);\n                    } else {\n                        err(error);\n                    }\n                    /* tslint:disable:no-empty */\n                } catch (error) { }\n            }\n        }\n    }, (error: any): void => {\n        if (!!err) {\n            try {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n                /* tslint:disable:no-empty */\n            } catch (error) { }\n        }\n    });\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IDisposable } from \"./IDisposable\";\nimport { List } from \"./List\";\nimport {\n    Deferred,\n} from \"./Promise\";\nexport interface IQueue<TItem> extends IDisposable {\n    enqueue(item: TItem): void;\n    enqueueFromPromise(promise: Promise<TItem>): void;\n    dequeue(): Promise<TItem>;\n    peek(): Promise<TItem>;\n    length(): number;\n}\n\nenum SubscriberType {\n    Dequeue,\n    Peek,\n}\n\nexport class Queue<TItem> implements IQueue<TItem> {\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\n    private privList: List<TItem>;\n    private privDetachables: IDetachable[];\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\n    private privIsDrainInProgress: boolean = false;\n    private privIsDisposing: boolean = false;\n    private privDisposeReason: string = null;\n\n    public constructor(list?: List<TItem>) {\n        this.privList = list ? list : new List<TItem>();\n        this.privDetachables = [];\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\n        this.privDetachables.push(this.privList.onAdded(this.drain));\n    }\n\n    public enqueue = (item: TItem): void => {\n        this.throwIfDispose();\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void, reject: (reason: any) => void) => { resolve(item); }));\n    }\n\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\n        this.throwIfDispose();\n        promise.then((val: TItem): void => {\n            this.privList.add(val);\n             /* tslint:disable:no-empty */\n        }, (error: string): void => { });\n    }\n\n    public dequeue = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        if (this.privSubscribers) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise;\n    }\n\n    public peek = (): Promise<TItem> => {\n        this.throwIfDispose();\n        const deferredSubscriber = new Deferred<TItem>();\n\n        const subs = this.privSubscribers;\n        if (subs) {\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\n            this.drain();\n        }\n\n        return deferredSubscriber.promise;\n    }\n\n    public length = (): number => {\n        this.throwIfDispose();\n        return this.privList.length();\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privSubscribers == null;\n    }\n\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\n        if (!this.isDisposed() && !this.privIsDisposing) {\n            this.privDisposeReason = reason;\n            this.privIsDisposing = true;\n\n            const subs = this.privSubscribers;\n            if (subs) {\n                while (subs.length() > 0) {\n                    const subscriber = subs.removeFirst();\n                    // TODO: this needs work (Resolve(null) instead?).\n                    subscriber.deferral.resolve(undefined);\n                    // subscriber.deferral.reject(\"Disposed\");\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n            }\n\n            for (const detachable of this.privDetachables) {\n                await detachable.detach();\n            }\n\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\n                const promiseArray: Promise<TItem>[] = [];\n\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>) => {\n                    promiseArray.push(wrapper);\n                });\n                return Promise.all(promiseArray).finally(() => {\n                    this.privSubscribers = null;\n                    this.privList.forEach((item: TItem, index: number): void => {\n                        pendingItemProcessor(item);\n                    });\n                    this.privList = null;\n                    return;\n                }).then<void>();\n            } else {\n                this.privSubscribers = null;\n                this.privList = null;\n            }\n        }\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        await this.drainAndDispose(null, reason);\n    }\n\n    private drain = (): void => {\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\n            this.privIsDrainInProgress = true;\n\n            const subs = this.privSubscribers;\n            const lists = this.privList;\n            if (subs && lists) {\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\n                    const subscriber = subs.removeFirst();\n                    if (subscriber.type === SubscriberType.Peek) {\n                        subscriber.deferral.resolve(lists.first());\n                    } else {\n                        const dequeuedItem = lists.removeFirst();\n                        subscriber.deferral.resolve(dequeuedItem);\n                    }\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privSubscribers === subs) {\n                    this.privSubscribers = subs;\n                }\n\n                // note: this block assumes cooperative multitasking, i.e.,\n                // between the if-statement and the assignment there are no\n                // thread switches.\n                // Reason is that between the initial const = this.; and this\n                // point there is the derral.resolve() operation that might have\n                // caused recursive calls to the Queue, especially, calling\n                // Dispose() on the queue alredy (which would reset the var\n                // here to null!).\n                // That should generally hold true for javascript...\n                if (this.privList === lists) {\n                    this.privList = lists;\n                }\n            }\n\n            this.privIsDrainInProgress = false;\n        }\n    }\n\n    private throwIfDispose = (): void => {\n        if (this.isDisposed()) {\n            if (this.privDisposeReason) {\n                throw new InvalidOperationError(this.privDisposeReason);\n            }\n\n            throw new ObjectDisposedError(\"Queue\");\n        } else if (this.privIsDisposing) {\n            throw new InvalidOperationError(\"Queue disposing\");\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { MessageType } from \"./ConnectionMessage\";\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\n\nexport class RawWebsocketMessage {\n    private privMessageType: MessageType;\n    private privPayload: any = null;\n    private privId: string;\n\n    public constructor(messageType: MessageType, payload: any, id?: string) {\n        if (!payload) {\n            throw new ArgumentNullError(\"payload\");\n        }\n\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        this.privMessageType = messageType;\n        this.privPayload = payload;\n        this.privId = id ? id : createNoDashGuid();\n    }\n\n    public get messageType(): MessageType {\n        return this.privMessageType;\n    }\n\n    public get payload(): any {\n        return this.privPayload;\n    }\n\n    public get textContent(): string {\n        if (this.privMessageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.privPayload as string;\n    }\n\n    public get binaryContent(): ArrayBuffer {\n        if (this.privMessageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.privPayload;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class RiffPcmEncoder {\n\n    private privActualSampleRate: number;\n    private privDesiredSampleRate: number;\n\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\n        this.privActualSampleRate = actualSampleRate;\n        this.privDesiredSampleRate = desiredSampleRate;\n    }\n\n    public encode = (\n        actualAudioFrame: Float32Array): ArrayBuffer => {\n\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\n\n        if (!audioFrame) {\n            return null;\n        }\n\n        const audioLength = audioFrame.length * 2;\n\n        const buffer = new ArrayBuffer(audioLength);\n        const view = new DataView(buffer);\n        this.floatTo16BitPCM(view, 0, audioFrame);\n\n        return buffer;\n    }\n\n    private setString = (view: DataView, offset: number, str: string): void => {\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\n        for (let i = 0; i < input.length; i++ , offset += 2) {\n            const s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n        }\n    }\n\n    private downSampleAudioFrame = (\n        srcFrame: Float32Array,\n        srcRate: number,\n        dstRate: number): Float32Array => {\n\n        if (dstRate === srcRate || dstRate > srcRate) {\n            return srcFrame;\n        }\n\n        const ratio = srcRate / dstRate;\n        const dstLength = Math.round(srcFrame.length / ratio);\n        const dstFrame = new Float32Array(dstLength);\n        let srcOffset = 0;\n        let dstOffset = 0;\n        while (dstOffset < dstLength) {\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\n            let accum = 0;\n            let count = 0;\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\n                accum += srcFrame[srcOffset++];\n                count++;\n            }\n            dstFrame[dstOffset++] = accum / count;\n        }\n\n        return dstFrame;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"./Error\";\nimport { createNoDashGuid } from \"./Guid\";\nimport { Queue } from \"./Queue\";\n\nexport interface IStreamChunk<TBuffer> {\n    isEnd: boolean;\n    buffer: TBuffer;\n    timeReceived: number;\n}\n\nexport class Stream<TBuffer> {\n    private privId: string;\n    private privIsWriteEnded: boolean = false;\n    private privIsReadEnded: boolean = false;\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\n\n    public constructor(streamId?: string) {\n        this.privId = streamId ? streamId : createNoDashGuid();\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\n    }\n\n    public get isClosed(): boolean {\n        return this.privIsWriteEnded;\n    }\n\n    public get isReadEnded(): boolean {\n        return this.privIsReadEnded;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public close(): void {\n        if (!this.privIsWriteEnded) {\n            this.writeStreamChunk({\n                buffer: null,\n                isEnd: true,\n                timeReceived: Date.now(),\n            });\n            this.privIsWriteEnded = true;\n        }\n    }\n\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\n        this.throwIfClosed();\n        if (!this.privReaderQueue.isDisposed()) {\n            try {\n                this.privReaderQueue.enqueue(streamChunk);\n            } catch (e) {\n                // Do nothing\n            }\n        }\n    }\n\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\n        if (this.privIsReadEnded) {\n            throw new InvalidOperationError(\"Stream read has already finished\");\n        }\n\n        return this.privReaderQueue\n            .dequeue()\n            .then(async (streamChunk: IStreamChunk<TBuffer>) => {\n                if (streamChunk === undefined || streamChunk.isEnd) {\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\n                }\n\n                return streamChunk;\n            });\n    }\n    public readEnded = (): void => {\n        if (!this.privIsReadEnded) {\n            this.privIsReadEnded = true;\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\n        }\n    }\n\n    private throwIfClosed = (): void => {\n        if (this.privIsWriteEnded) {\n            throw new InvalidOperationError(\"Stream closed\");\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines translation status.\n * @class TranslationStatus\n */\nexport enum TranslationStatus {\n    /**\n     * @member TranslationStatus.Success\n     */\n    Success = 0,\n\n    /**\n     * @member TranslationStatus.Error\n     */\n    Error,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IStreamChunk, Stream } from \"./Exports\";\n\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\n    private privTargetChunkSize: number;\n    private privNextBufferToWrite: ArrayBuffer;\n    private privNextBufferStartTime: number;\n    private privNextBufferReadyBytes: number;\n\n    constructor(targetChunkSize: number, streamId?: string) {\n        super(streamId);\n        this.privTargetChunkSize = targetChunkSize;\n        this.privNextBufferReadyBytes = 0;\n    }\n\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\n        // No pending write, and the buffer is the right size so write it.\n        if (chunk.isEnd ||\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\n            super.writeStreamChunk(chunk);\n            return;\n        }\n\n        let bytesCopiedFromBuffer: number = 0;\n\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\n            // Fill the next buffer.\n            if (undefined === this.privNextBufferToWrite) {\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\n                this.privNextBufferStartTime = chunk.timeReceived;\n            }\n\n            // Find out how many bytes we can copy into the read buffer.\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\n\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\n            this.privNextBufferReadyBytes += bytesToCopy;\n            bytesCopiedFromBuffer += bytesToCopy;\n\n            // Are we ready to write?\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\n                super.writeStreamChunk({\n                    buffer: this.privNextBufferToWrite,\n                    isEnd: false,\n                    timeReceived: this.privNextBufferStartTime,\n                });\n                this.privNextBufferReadyBytes = 0;\n                this.privNextBufferToWrite = undefined;\n            }\n        }\n    }\n\n    public close(): void {\n        // Send whatever is pending, then close the base class.\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\n            super.writeStreamChunk({\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\n                isEnd: false,\n                timeReceived: this.privNextBufferStartTime,\n            });\n        }\n\n        super.close();\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormat } from \"../sdk/Exports\";\n\nexport interface IAudioDestination {\n    id(): string;\n    write(buffer: ArrayBuffer): void;\n    format: AudioStreamFormat;\n    close(cb?: () => void, err?: (error: string) => void): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\n\ninterface IClearResponse {\n    error: null;\n    id: number;\n}\n\ninterface IErrorNotification {\n    error: {\n        message: string;\n    };\n    id: null;\n    result: null;\n}\n\ninterface IErrorResponse {\n    error: {\n        message: string;\n    };\n    id: number;\n    result: null;\n}\n\ninterface ICallNotification {\n    id: null;\n    method: \"call\";\n    params: {\n        timerId: number;\n    };\n}\n\ninterface ISetNotification {\n    id: null;\n    method: \"set\";\n    params: {\n        delay: number;\n        now: number;\n        timerId: number;\n    };\n}\n\ninterface IClearRequest {\n    id: number;\n    method: \"clear\";\n    params: {\n        timerId: number;\n    };\n}\n\ninterface IWorkerEvent extends Event {\n    data: TWorkerMessage;\n}\n\ninterface IWorkerTimers {\n    clearTimeout: (timerId: number) => void;\n    setTimeout: (func: () => any, delay: number) => number;\n}\n\ndeclare type Func = () => any;\n\nexport class Timeout {\n\n    private static workerTimers: null | IWorkerTimers = null;\n\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId) => Timeout.timers().clearTimeout(timerId);\n\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func, delay) => Timeout.timers().setTimeout(func, delay);\n\n    public static load = (url: string) => {\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, () => { }]]); // tslint:disable-line no-empty\n        const unhandledRequests: Map<number, number> = new Map();\n\n        const worker = new Worker(url);\n\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent) => {\n            if (Timeout.isCallNotification(data)) {\n                const {\n                    params: { timerId }\n                } = data;\n\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\n\n                if (typeof idOrFunc === \"number\") {\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\n\n                    if (\n                        unhandledTimerId === undefined ||\n                        unhandledTimerId !== timerId\n                    ) {\n                        throw new Error(\"The timer is in an undefined state.\");\n                    }\n                } else if (typeof idOrFunc !== \"undefined\") {\n                    idOrFunc();\n\n                    // A timeout can be safely deleted because it is only called once.\n                    scheduledTimeoutFunctions.delete(timerId);\n                } else {\n                    throw new Error(\"The timer is in an undefined state.\");\n                }\n            } else if (Timeout.isClearResponse(data)) {\n                const { id } = data;\n\n                const unhandledTimerId = unhandledRequests.get(id);\n\n                if (unhandledTimerId === undefined) {\n                    throw new Error(\"The timer is in an undefined state.\");\n                }\n\n                unhandledRequests.delete(id);\n\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\n            } else {\n                const {\n                    error: { message }\n                } = data;\n\n                throw new Error(message);\n            }\n        });\n\n        const clearTimeout = (timerId: number) => {\n            const id = Math.random();\n\n            unhandledRequests.set(id, timerId);\n            scheduledTimeoutFunctions.set(timerId, id);\n\n            worker.postMessage({\n                id,\n                method: \"clear\",\n                params: { timerId }\n            } as IClearRequest);\n        };\n\n        const setTimeout = (func: () => void, delay: number) => {\n            const timerId = Math.random();\n\n            scheduledTimeoutFunctions.set(timerId, func);\n\n            worker.postMessage({\n                id: null,\n                method: \"set\",\n                params: {\n                    delay,\n                    now: performance.now(),\n                    timerId\n                }\n            } as ISetNotification);\n\n            return timerId;\n        };\n\n        return {\n            clearTimeout,\n            setTimeout\n        };\n    }\n\n    private static loadWorkerTimers = () => {\n        const worker = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`; // tslint:disable-line:max-line-length\n        return () => {\n            if (Timeout.workerTimers !== null) {\n                return Timeout.workerTimers;\n            }\n\n            const blob = new Blob([worker], { type: \"application/javascript; charset=utf-8\" });\n            const url = URL.createObjectURL(blob);\n\n            Timeout.workerTimers = Timeout.load(url);\n\n            // Edge doesn't like the URL to be revoked directly.\n            Timeout.workerTimers.setTimeout(() => URL.revokeObjectURL(url), 0);\n\n            return Timeout.workerTimers as IWorkerTimers;\n        };\n    }\n\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\n\n    private static isCallNotification = (message: TWorkerMessage): message is ICallNotification => {\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\n    }\n\n    private static isClearResponse = (message: TWorkerMessage): message is IClearResponse => {\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\n\nexport class OCSPEvent extends PlatformEvent {\n    private privSignature: string;\n\n    constructor(eventName: string, eventType: EventType, signature: string) {\n        super(eventName, eventType);\n\n        this.privSignature = signature;\n    }\n}\n\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPCacheMissEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPCacheUpdatehCompleteEvent extends OCSPEvent {\n    constructor(signature: string) {\n        super(\"OCSPCacheUpdatehCompleteEvent\", EventType.Debug, signature);\n    }\n}\n\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\n    constructor() {\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\n    }\n}\n\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\n    constructor(serialNumber: string) {\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\n    }\n}\n\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\n    private privExpireTime: number;\n\n    constructor(serialNumber: string, expireTime: number) {\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\n        this.privExpireTime = expireTime;\n    }\n}\n\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\n    private privExpireTime: number;\n    private privStartTime: number;\n\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\n        this.privExpireTime = expireTime;\n        this.privStartTime = startTime;\n    }\n}\n\nexport class OCSPCacheHitEvent extends OCSPEvent {\n    private privExpireTime: number;\n    private privStartTime: number;\n    private privExpireTimeString: string;\n    private privStartTimeString: string;\n\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\n        this.privExpireTime = expireTime;\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\n        this.privStartTime = startTime;\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\n    }\n}\n\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\n    private privError: string;\n\n    constructor(serialNumber: string, error: string) {\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\n        this.privError = error;\n    }\n}\n\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\n    private privError: string;\n\n    constructor(serialNumber: string, error: string) {\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\n        this.privError = error;\n    }\n}\n\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\n    constructor(serialNumber: string) {\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\n    }\n}\n\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\n    private privError: string;\n\n    constructor(serialNumber: string, error: string) {\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\n        this.privError = error;\n    }\n}\n","\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    EventType,\n    PlatformEvent\n} from \"./Exports\";\n\nexport class BackgroundEvent extends PlatformEvent {\n    private privError: string;\n\n    constructor(error: string) {\n        super(\"BackgroundEvent\", EventType.Error);\n        this.privError = error;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Stream } from \"../common/Exports\";\n\nexport interface IRecorder {\n    record(context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void;\n    releaseMediaResources(context: AudioContext): void;\n    setWorkletUrl(url: string): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    connectivity,\n    ISpeechConfigAudioDevice,\n    type\n} from \"../common.speech/Exports\";\nimport {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ChunkedArrayBufferStream,\n    createNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStringDictionary,\n    Stream,\n} from \"../common/Exports\";\nimport {\n    AudioStreamFormat,\n    AudioStreamFormatImpl,\n} from \"../sdk/Audio/AudioStreamFormat\";\nimport { IRecorder } from \"./IRecorder\";\n\n// Extending the default definition with browser specific definitions for backward compatibility\ninterface INavigator extends Navigator {\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\n}\n\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\n\nexport class MicAudioSource implements IAudioSource {\n\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\n\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private privId: string;\n\n    private privEvents: EventSource<AudioSourceEvent>;\n\n    private privInitializeDeferral: Deferred<void>;\n\n    private privMediaStream: MediaStream;\n\n    private privContext: AudioContext;\n\n    private privMicrophoneLabel: string;\n\n    private privOutputChunkSize: number;\n\n    public constructor(\n        private readonly privRecorder: IRecorder,\n        private readonly deviceId?: string,\n        audioSourceId?: string,\n        mediaStream?: MediaStream\n        ) {\n\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privMediaStream = mediaStream || null;\n    }\n\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\n    }\n\n    public get blob(): Promise<Blob> {\n        return Promise.reject(\"Not implemented for Mic input\");\n    }\n\n    public turnOn = (): Promise<void> => {\n        if (this.privInitializeDeferral) {\n            return this.privInitializeDeferral.promise;\n        }\n\n        this.privInitializeDeferral = new Deferred<void>();\n\n        try {\n            this.createAudioContext();\n        } catch (error) {\n            if (error instanceof Error) {\n                const typedError: Error = error as Error;\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\n            } else {\n                this.privInitializeDeferral.reject(error);\n            }\n            return this.privInitializeDeferral.promise;\n        }\n\n        const nav = window.navigator as INavigator;\n\n        let getUserMedia = (\n            nav.getUserMedia ||\n            nav.webkitGetUserMedia ||\n            nav.mozGetUserMedia ||\n            nav.msGetUserMedia\n        );\n\n        if (!!nav.mediaDevices) {\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\n                nav.mediaDevices\n                    .getUserMedia(constraints)\n                    .then(successCallback)\n                    .catch(errorCallback);\n            };\n        }\n\n        if (!getUserMedia) {\n            const errorMsg = \"Browser does not support getUserMedia.\";\n            this.privInitializeDeferral.reject(errorMsg);\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\n        } else {\n            const next = () => {\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n                if (this.privMediaStream && this.privMediaStream.active) {\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\n                    this.privInitializeDeferral.resolve();\n                } else {\n                    getUserMedia(\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\n                        (mediaStream: MediaStream) => {\n                            this.privMediaStream = mediaStream;\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\n                            this.privInitializeDeferral.resolve();\n                        }, (error: MediaStreamError) => {\n                            const errorMsg = `Error occurred during microphone initialization: ${error}`;\n                            this.privInitializeDeferral.reject(errorMsg);\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\n                        });\n                }\n            };\n\n            if (this.privContext.state === \"suspended\") {\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\n                // https://github.com/WebAudio/web-audio-api/issues/790\n                this.privContext.resume()\n                    .then(next)\n                    .catch((reason: any) => {\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\n                    });\n            } else {\n                next();\n            }\n        }\n\n        return this.privInitializeDeferral.promise;\n    }\n\n    public id = (): string => {\n        return this.privId;\n    }\n\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\n            (stream: Stream<ArrayBuffer>) => {\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n                return {\n                    detach: async () => {\n                        stream.readEnded();\n                        delete this.privStreams[audioNodeId];\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                        return this.turnOff();\n                    },\n                    id: () => {\n                        return audioNodeId;\n                    },\n                    read: () => {\n                        return stream.read();\n                    },\n                };\n            });\n    }\n\n    public detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.privStreams[audioNodeId]) {\n            this.privStreams[audioNodeId].close();\n            delete this.privStreams[audioNodeId];\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n        }\n    }\n\n    public async turnOff(): Promise<void> {\n        for (const streamId in this.privStreams) {\n            if (streamId) {\n                const stream = this.privStreams[streamId];\n                if (stream) {\n                    stream.close();\n                }\n            }\n        }\n\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n        if (this.privInitializeDeferral) {\n            // Correctly handle when browser forces mic off before turnOn() completes\n            await this.privInitializeDeferral;\n            this.privInitializeDeferral = null;\n        }\n\n        await this.destroyAudioContext();\n\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return this.getMicrophoneLabel().then((label: string) => {\n            return {\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\n                connectivity: connectivity.Unknown,\n                manufacturer: \"Speech SDK\",\n                model: label,\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\n                type: type.Microphones,\n            };\n        });\n    }\n\n    public setProperty(name: string, value: string): void {\n        if (name === AudioWorkletSourceURLPropertyName) {\n            this.privRecorder.setWorkletUrl(value);\n        } else {\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\n        }\n    }\n\n    private getMicrophoneLabel(): Promise<string> {\n        const defaultMicrophoneName: string = \"microphone\";\n\n        // If we did this already, return the value.\n        if (this.privMicrophoneLabel !== undefined) {\n            return Promise.resolve(this.privMicrophoneLabel);\n        }\n\n        // If the stream isn't currently running, we can't query devices because security.\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\n            return Promise.resolve(defaultMicrophoneName);\n        }\n\n        // Setup a default\n        this.privMicrophoneLabel = defaultMicrophoneName;\n\n        // Get the id of the device running the audio track.\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\n\n        // If the browser doesn't support getting the device ID, set a default and return.\n        if (undefined === microphoneDeviceId) {\n            return Promise.resolve(this.privMicrophoneLabel);\n        }\n\n        const deferred: Deferred<string> = new Deferred<string>();\n\n        // Enumerate the media devices.\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\n            for (const device of devices) {\n                if (device.deviceId === microphoneDeviceId) {\n                    // Found the device\n                    this.privMicrophoneLabel = device.label;\n                    break;\n                }\n            }\n            deferred.resolve(this.privMicrophoneLabel);\n        }, () => deferred.resolve(this.privMicrophoneLabel));\n\n        return deferred.promise;\n    }\n\n    private listen = async (audioNodeId: string): Promise<Stream<ArrayBuffer>> => {\n        await this.turnOn();\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\n        this.privStreams[audioNodeId] = stream;\n        try {\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\n        } catch (error) {\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\n            throw error;\n        }\n        const result: Stream<ArrayBuffer> = stream;\n        return result;\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private createAudioContext = (): void => {\n        if (!!this.privContext) {\n            return;\n        }\n\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\n    }\n\n    private async destroyAudioContext(): Promise<void> {\n        if (!this.privContext) {\n            return;\n        }\n\n        this.privRecorder.releaseMediaResources(this.privContext);\n\n        // This pattern brought to you by a bug in the TypeScript compiler where it\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\n        // https://github.com/Microsoft/TypeScript/issues/11498\n        let hasClose: boolean = false;\n        if (\"close\" in this.privContext) {\n            hasClose = true;\n        }\n\n        if (hasClose) {\n            await this.privContext.close();\n            this.privContext = null;\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\n            // Suspend actually takes a callback, but analogous to the\n            // resume method, it'll be only fired if suspend is called\n            // in a direct response to a user action. The later is not always\n            // the case, as TurnOff is also called, when we receive an\n            // end-of-speech message from the service. So, doing a best effort\n            // fire-and-forget here.\n            await this.privContext.suspend();\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// Make sure not to export internal modules.\n//\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\nexport * from \"./CognitiveTokenAuthentication\";\nexport * from \"./IAuthentication\";\nexport * from \"./IConnectionFactory\";\nexport * from \"./ISynthesisConnectionFactory\";\nexport * from \"./IntentConnectionFactory\";\nexport * from \"./RecognitionEvents\";\nexport * from \"./ServiceRecognizerBase\";\nexport * from \"./RecognizerConfig\";\nexport * from \"./SpeechServiceInterfaces\";\nexport * from \"./WebsocketMessageFormatter\";\nexport * from \"./SpeechConnectionFactory\";\nexport * from \"./TranscriberConnectionFactory\";\nexport * from \"./TranslationConnectionFactory\";\nexport * from \"./SpeechSynthesisConnectionFactory\";\nexport * from \"./EnumTranslation\";\nexport * from \"./ServiceMessages/Enums\";\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\nexport * from \"./ServiceMessages/TranslationHypothesis\";\nexport * from \"./ServiceMessages/TranslationPhrase\";\nexport * from \"./TranslationServiceRecognizer\";\nexport * from \"./ServiceMessages/SpeechDetected\";\nexport * from \"./ServiceMessages/SpeechHypothesis\";\nexport * from \"./ServiceMessages/SpeechKeyword\";\nexport * from \"./SpeechServiceRecognizer\";\nexport * from \"./TranscriptionServiceRecognizer\";\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\nexport * from \"./AddedLmIntent\";\nexport * from \"./IntentServiceRecognizer\";\nexport * from \"./ServiceMessages/IntentResponse\";\nexport * from \"./RequestSession\";\nexport * from \"./SpeechContext\";\nexport * from \"./DynamicGrammarBuilder\";\nexport * from \"./DynamicGrammarInterfaces\";\nexport * from \"./DialogServiceAdapter\";\nexport * from \"./AgentConfig\";\nexport * from \"./Transcription/Exports\";\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\nexport * from \"./SynthesisTurn\";\nexport * from \"./SynthesisAdapterBase\";\nexport * from \"./SynthesizerConfig\";\nexport * from \"./SynthesisContext\";\nexport * from \"./SpeakerRecognitionConfig\";\nexport * from \"./SpeakerIdMessageAdapter\";\n\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n} from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    AuthInfo,\n    IAuthentication\n} from \"./IAuthentication\";\n\n/**\n * @class\n */\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\n    private privAuthInfo: AuthInfo;\n\n    /**\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\n     * @constructor\n     * @param {string} subscriptionKey - The subscription key\n     */\n    constructor(subscriptionKey: string) {\n        if (!subscriptionKey) {\n            throw new ArgumentNullError(\"subscriptionKey\");\n        }\n\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return Promise.resolve(this.privAuthInfo);\n    }\n\n    /**\n     * Fetches the subscription key.\n     * @member\n     * @function\n     * @public\n     * @param {string} authFetchEventId - The id to fetch.\n     */\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return Promise.resolve(this.privAuthInfo);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class HeaderNames {\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\n    public static ConnectionId: string = \"X-ConnectionId\";\n    public static ContentType: string = \"Content-Type\";\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\n    public static Path: string = \"Path\";\n    public static RequestId: string = \"X-RequestId\";\n    public static RequestStreamId: string = \"X-StreamId\";\n    public static RequestTimestamp: string = \"X-Timestamp\";\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface IAuthentication {\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\n}\n\nexport class AuthInfo {\n    private privHeaderName: string;\n    private privToken: string;\n\n    public constructor(headerName: string, token: string) {\n        this.privHeaderName = headerName;\n        this.privToken = token;\n    }\n\n    public get headerName(): string {\n        return this.privHeaderName;\n    }\n\n    public get token(): string {\n        return this.privToken;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError } from \"../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.privFetchCallback = fetchCallback;\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return this.privFetchCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IConnection } from \"../common/Exports\";\nimport { AuthInfo } from \"./IAuthentication\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\n\nexport interface IConnectionFactory {\n    create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IConnection } from \"../common/Exports\";\nimport { AuthInfo } from \"./IAuthentication\";\nimport { SynthesizerConfig } from \"./SynthesizerConfig\";\n\nexport interface ISynthesisConnectionFactory {\n    create(\n        config: SynthesizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognizerConfig,\n    WebsocketMessageFormatter,\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\n\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            format: \"simple\",\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n        };\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\n        switch (intentRegion) {\n            case \"West US\":\n            case \"US West\":\n            case \"westus\":\n                return \"uswest\";\n            case \"West US 2\":\n            case \"US West 2\":\n            case \"westus2\":\n                return \"uswest2\";\n            case \"South Central US\":\n            case \"US South Central\":\n            case \"southcentralus\":\n                return \"ussouthcentral\";\n            case \"West Central US\":\n            case \"US West Central\":\n            case \"westcentralus\":\n                return \"uswestcentral\";\n            case \"East US\":\n            case \"US East\":\n            case \"eastus\":\n                return \"useast\";\n            case \"East US 2\":\n            case \"US East 2\":\n            case \"eastus2\":\n                return \"useast2\";\n            case \"West Europe\":\n            case \"Europe West\":\n            case \"westeurope\":\n                return \"europewest\";\n            case \"North Europe\":\n            case \"Europe North\":\n            case \"northeurope\":\n                return \"europenorth\";\n            case \"Brazil South\":\n            case \"South Brazil\":\n            case \"southbrazil\":\n                return \"brazilsouth\";\n            case \"Australia East\":\n            case \"East Australia\":\n            case \"eastaustralia\":\n                return \"australiaeast\";\n            case \"Southeast Asia\":\n            case \"Asia Southeast\":\n            case \"southeastasia\":\n                return \"asiasoutheast\";\n            case \"East Asia\":\n            case \"Asia East\":\n            case \"eastasia\":\n                return \"asiaeast\";\n            default:\n                return intentRegion;\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport { AudioConfig } from \"./Audio/AudioConfig\";\nexport { AudioStreamFormat } from \"./Audio/AudioStreamFormat\";\nexport { AudioInputStream, PullAudioInputStream, PushAudioInputStream } from \"./Audio/AudioInputStream\";\nexport { AudioOutputStream, PullAudioOutputStream, PushAudioOutputStream} from \"./Audio/AudioOutputStream\";\nexport { CancellationReason } from \"./CancellationReason\";\nexport { PullAudioInputStreamCallback } from \"./Audio/PullAudioInputStreamCallback\";\nexport { PushAudioOutputStreamCallback } from \"./Audio/PushAudioOutputStreamCallback\";\nexport { KeywordRecognitionModel } from \"./KeywordRecognitionModel\";\nexport { SessionEventArgs } from \"./SessionEventArgs\";\nexport { RecognitionEventArgs } from \"./RecognitionEventArgs\";\nexport { OutputFormat } from \"./OutputFormat\";\nexport { IntentRecognitionEventArgs } from \"./IntentRecognitionEventArgs\";\nexport { RecognitionResult } from \"./RecognitionResult\";\nexport { SpeechRecognitionResult } from \"./SpeechRecognitionResult\";\nexport { IntentRecognitionResult } from \"./IntentRecognitionResult\";\nexport { LanguageUnderstandingModel } from \"./LanguageUnderstandingModel\";\nexport { SpeechRecognitionEventArgs, ConversationTranscriptionEventArgs } from \"./SpeechRecognitionEventArgs\";\nexport { SpeechRecognitionCanceledEventArgs } from \"./SpeechRecognitionCanceledEventArgs\";\nexport { TranslationRecognitionEventArgs } from \"./TranslationRecognitionEventArgs\";\nexport { TranslationSynthesisEventArgs } from \"./TranslationSynthesisEventArgs\";\nexport { TranslationRecognitionResult } from \"./TranslationRecognitionResult\";\nexport { TranslationSynthesisResult } from \"./TranslationSynthesisResult\";\nexport { ResultReason } from \"./ResultReason\";\nexport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\nexport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\nexport { PropertyCollection } from \"./PropertyCollection\";\nexport { PropertyId } from \"./PropertyId\";\nexport { Recognizer } from \"./Recognizer\";\nexport { SpeechRecognizer } from \"./SpeechRecognizer\";\nexport { IntentRecognizer } from \"./IntentRecognizer\";\nexport { VoiceProfileType } from \"./VoiceProfileType\";\nexport { TranslationRecognizer } from \"./TranslationRecognizer\";\nexport { Translations } from \"./Translations\";\nexport { NoMatchReason } from \"./NoMatchReason\";\nexport { NoMatchDetails } from \"./NoMatchDetails\";\nexport { TranslationRecognitionCanceledEventArgs } from \"./TranslationRecognitionCanceledEventArgs\";\nexport { IntentRecognitionCanceledEventArgs } from \"./IntentRecognitionCanceledEventArgs\";\nexport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\nexport { CancellationDetails } from \"./CancellationDetails\";\nexport { CancellationErrorCode } from \"./CancellationErrorCodes\";\nexport { ConnectionEventArgs } from \"./ConnectionEventArgs\";\nexport { ServiceEventArgs } from \"./ServiceEventArgs\";\nexport { Connection } from \"./Connection\";\nexport { PhraseListGrammar } from \"./PhraseListGrammar\";\nexport { DialogServiceConfig } from \"./DialogServiceConfig\";\nexport { BotFrameworkConfig } from \"./BotFrameworkConfig\";\nexport { CustomCommandsConfig } from \"./CustomCommandsConfig\";\nexport { DialogServiceConnector } from \"./DialogServiceConnector\";\nexport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\nexport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\nexport { ServicePropertyChannel } from \"./ServicePropertyChannel\";\nexport { ProfanityOption } from \"./ProfanityOption\";\nexport { BaseAudioPlayer } from \"./Audio/BaseAudioPlayer\";\nexport { ConnectionMessageEventArgs } from \"./ConnectionMessageEventArgs\";\nexport { ConnectionMessage } from \"./ConnectionMessage\";\nexport { VoiceProfile } from \"./VoiceProfile\";\nexport { VoiceProfileEnrollmentResult, VoiceProfileEnrollmentCancellationDetails } from \"./VoiceProfileEnrollmentResult\";\nexport { VoiceProfileResult, VoiceProfileCancellationDetails } from \"./VoiceProfileResult\";\nexport { VoiceProfileAuthorizationPhraseResult } from \"./VoiceProfileAuthorizationPhraseResult\";\nexport { VoiceProfileClient } from \"./VoiceProfileClient\";\nexport { SpeakerRecognizer } from \"./SpeakerRecognizer\";\nexport { SpeakerIdentificationModel } from \"./SpeakerIdentificationModel\";\nexport { SpeakerVerificationModel } from \"./SpeakerVerificationModel\";\nexport { AutoDetectSourceLanguageConfig } from \"./AutoDetectSourceLanguageConfig\";\nexport { AutoDetectSourceLanguageResult } from \"./AutoDetectSourceLanguageResult\";\nexport { SourceLanguageConfig } from \"./SourceLanguageConfig\";\nexport { SpeakerRecognitionResult, SpeakerRecognitionResultType, SpeakerRecognitionCancellationDetails } from \"./SpeakerRecognitionResult\";\nexport { Conversation,\n    ConversationExpirationEventArgs,\n    ConversationInfo,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationEventArgs,\n    ConversationTranslationResult,\n    ConversationTranslator,\n    ConversationTranscriber,\n    IParticipant,\n    Participant,\n    ParticipantChangedReason,\n    User,\n    VoiceSignature\n    } from \"./Transcription/Exports\";\nexport { SpeechSynthesisOutputFormat } from \"./SpeechSynthesisOutputFormat\";\nexport { SpeechSynthesizer } from \"./SpeechSynthesizer\";\nexport { SpeechSynthesisResult } from \"./SpeechSynthesisResult\";\nexport { SpeechSynthesisEventArgs } from \"./SpeechSynthesisEventArgs\";\nexport { SpeechSynthesisWordBoundaryEventArgs } from \"./SpeechSynthesisWordBoundaryEventArgs\";\nexport { SpeechSynthesisBookmarkEventArgs } from \"./SpeechSynthesisBookmarkEventArgs\";\nexport { SpeechSynthesisVisemeEventArgs } from \"./SpeechSynthesisVisemeEventArgs\";\nexport { IPlayer } from \"./Audio/IPlayer\";\nexport { SpeakerAudioDestination } from \"./Audio/SpeakerAudioDestination\";\nexport { CancellationEventArgs } from \"./CancellationEventArgs\";\nexport { ConversationTranscriptionCanceledEventArgs } from \"./ConversationTranscriptionCanceledEventArgs\";\nexport { PronunciationAssessmentGradingSystem } from \"./PronunciationAssessmentGradingSystem\";\nexport { PronunciationAssessmentGranularity } from \"./PronunciationAssessmentGranularity\";\nexport { PronunciationAssessmentConfig } from \"./PronunciationAssessmentConfig\";\nexport { PronunciationAssessmentResult } from \"./PronunciationAssessmentResult\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { PathLike } from \"fs\";\nimport {\n    FileAudioSource,\n    MicAudioSource,\n    PcmRecorder,\n} from \"../../common.browser/Exports\";\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\nimport {\n    AudioSourceEvent,\n    Deferred,\n    EventSource,\n    IAudioDestination,\n    IAudioSource,\n    IAudioStreamNode\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioInputStream,\n    AudioOutputStream,\n    AudioStreamFormat,\n    IPlayer,\n    PropertyCollection,\n    PropertyId,\n    PullAudioInputStreamCallback,\n    PullAudioOutputStream,\n    PushAudioOutputStream,\n    PushAudioOutputStreamCallback,\n    SpeakerAudioDestination\n} from \"../Exports\";\nimport { AudioFileWriter } from \"./AudioFileWriter\";\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\n/**\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\n * @class AudioConfig\n * Updated in version 1.11.0\n */\nexport abstract class AudioConfig {\n    /**\n     * Creates an AudioConfig object representing the default microphone on the system.\n     * @member AudioConfig.fromDefaultMicrophoneInput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromDefaultMicrophoneInput(): AudioConfig {\n        const pcmRecorder = new PcmRecorder();\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\n    }\n\n    /**\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\n     * @member AudioConfig.fromMicrophoneInput\n     * @function\n     * @public\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\n     *        Default microphone is used the value is omitted.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\n        const pcmRecorder = new PcmRecorder();\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified file.\n     * @member AudioConfig.fromWavFileInput\n     * @function\n     * @public\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\n        return new AudioConfigImpl(new FileAudioSource(file, name));\n    }\n\n    /**\n     * Creates an AudioConfig object representing the specified stream.\n     * @member AudioConfig.fromStreamInput\n     * @function\n     * @public\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\n     *        stream. Currently, only WAV / PCM is supported.\n     * @returns {AudioConfig} The audio input configuration being created.\n     */\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\n        | MediaStream): AudioConfig {\n        if (audioStream instanceof PullAudioInputStreamCallback) {\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\n        }\n\n        if (audioStream instanceof AudioInputStream) {\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\n        }\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\n            const pcmRecorder = new PcmRecorder();\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Creates an AudioConfig object representing the default speaker.\n     * @member AudioConfig.fromDefaultSpeakerOutput\n     * @function\n     * @public\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromDefaultSpeakerOutput(): AudioConfig {\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\n    }\n\n    /**\n     * Creates an AudioConfig object representing the custom IPlayer object.\n     * You can use the IPlayer object to control pause, resume, etc.\n     * @member AudioConfig.fromSpeakerOutput\n     * @function\n     * @public\n     * @param {IPlayer} player - the IPlayer object for playback.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.12.0\n     */\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\n        if (player === undefined) {\n            return AudioConfig.fromDefaultSpeakerOutput();\n        }\n        if (player instanceof SpeakerAudioDestination) {\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Creates an AudioConfig object representing a specified output audio file\n     * @member AudioConfig.fromAudioFileOutput\n     * @function\n     * @public\n     * @param {PathLike} filename - the filename of the output audio file\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\n    }\n\n    /**\n     * Creates an AudioConfig object representing a specified audio output stream\n     * @member AudioConfig.fromStreamOutput\n     * @function\n     * @public\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\n     *        stream.\n     * @returns {AudioConfig} The audio output configuration being created.\n     * Added in version 1.11.0\n     */\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\n        }\n\n        if (audioStream instanceof PushAudioOutputStream) {\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\n        }\n\n        if (audioStream instanceof PullAudioOutputStream) {\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\n        }\n\n        throw new Error(\"Not Supported Type\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n    /**\n     * Sets an arbitrary property.\n     * @member SpeechConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member SpeechConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string, def?: string): string;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class AudioConfigImpl\n */\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\n    private privSource: IAudioSource;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {IAudioSource} source - An audio source.\n     */\n    public constructor(source: IAudioSource) {\n        super();\n        this.privSource = source;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return this.privSource.format;\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        this.privSource.turnOff().then(() => {\n            if (!!cb) {\n                cb();\n            }\n        }, (error: string) => {\n            if (!!err) {\n                err(error);\n            }\n        });\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.id\n     * @function\n     * @public\n     */\n    public id(): string {\n        return this.privSource.id();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.blob\n     * @function\n     * @public\n     */\n    public get blob(): Promise<Blob | Buffer> {\n        return this.privSource.blob;\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOn\n     * @function\n     * @public\n     * @returns {Promise<void>} A promise.\n     */\n    public turnOn(): Promise<void> {\n        return this.privSource.turnOn();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.attach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     * @returns {Promise<IAudioStreamNode>} A promise.\n     */\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        return this.privSource.attach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.detach\n     * @function\n     * @public\n     * @param {string} audioNodeId - The audio node id.\n     */\n    public detach(audioNodeId: string): void {\n        return this.privSource.detach(audioNodeId);\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.turnOff\n     * @function\n     * @public\n     * @returns {Promise<void>} A promise.\n     */\n    public turnOff(): Promise<void> {\n        return this.privSource.turnOff();\n    }\n\n    /**\n     * @member AudioConfigImpl.prototype.events\n     * @function\n     * @public\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\n     */\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privSource.events;\n    }\n\n    public setProperty(name: string, value: string): void {\n        Contracts.throwIfNull(value, \"value\");\n\n        if (undefined !== this.privSource.setProperty) {\n            this.privSource.setProperty(name, value);\n        } else {\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\n        }\n\n    }\n\n    public getProperty(name: string, def?: string): string {\n        if (undefined !== this.privSource.getProperty) {\n            return this.privSource.getProperty(name, def);\n        } else {\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\n        }\n\n        return def;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return this.privSource.deviceInfo;\n    }\n}\n\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\n    private privDestination: IAudioDestination;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {IAudioDestination} destination - An audio destination.\n     */\n    public constructor(destination: IAudioDestination) {\n        super();\n        this.privDestination = destination;\n    }\n\n    public set format(format: AudioStreamFormat) {\n        this.privDestination.format = format;\n    }\n\n    public write(buffer: ArrayBuffer): void {\n        this.privDestination.write(buffer);\n    }\n\n    public close(): void {\n        this.privDestination.close();\n    }\n\n    public id(): string {\n        return this.privDestination.id();\n    }\n\n    public setProperty(name: string, value: string): void {\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\n    }\n\n    public getProperty(name: string, def?: string): string {\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * @class Contracts\n * @private\n */\nexport class Contracts {\n    public static throwIfNullOrUndefined(param: any, name: string): void {\n        if (param === undefined || param === null) {\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\n        }\n    }\n\n    public static throwIfNull(param: any, name: string): void {\n        if (param === null) {\n            throw new Error(\"throwIfNull:\" + name);\n        }\n    }\n\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\n        Contracts.throwIfNullOrUndefined(param, name);\n\n        if ((\"\" + param).trim().length < 1) {\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\n        }\n    }\n\n    public static throwIfDisposed(isDisposed: boolean): void {\n        if (isDisposed) {\n            throw new Error(\"the object is already disposed\");\n        }\n    }\n\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\n        Contracts.throwIfNullOrUndefined(array, name);\n\n        if (array.length === 0) {\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\n        }\n\n        for (const item of array) {\n            Contracts.throwIfNullOrWhitespace(item, name);\n        }\n    }\n\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\n        Contracts.throwIfNullOrWhitespace(param, name);\n\n        // TODO check for file existence.\n    }\n\n    public static throwIfNotUndefined(param: any, name: string): void {\n        if (param !== undefined) {\n            throw new Error(\"throwIfNotUndefined:\" + name);\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport { IAudioDestination } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport { AudioStreamFormat } from \"../Exports\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n\nexport class AudioFileWriter implements IAudioDestination {\n    private privAudioFormat: AudioOutputFormatImpl;\n    private privFd: number;\n    private privId: string;\n    private privWriteStream: fs.WriteStream;\n\n    public constructor(filename: fs.PathLike) {\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\n        this.privFd = fs.openSync(filename, \"w\");\n    }\n\n    public set format(format: AudioStreamFormat) {\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\n        this.privAudioFormat = format as AudioOutputFormatImpl;\n        let headerOffset: number = 0;\n        if (this.privAudioFormat.hasHeader) {\n            headerOffset = this.privAudioFormat.header.byteLength;\n        }\n        if (this.privFd !== undefined) {\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\n        }\n    }\n\n    public write(buffer: ArrayBuffer): void {\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\n        if (this.privWriteStream !== undefined) {\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\n        }\n    }\n\n    public close(): void {\n        if (this.privFd !== undefined) {\n            this.privWriteStream.on(\"finish\", () => {\n                if (this.privAudioFormat.hasHeader) {\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\n                    fs.writeSync(this.privFd,\n                        new Int8Array(this.privAudioFormat.header),\n                        0,\n                        this.privAudioFormat.header.byteLength,\n                        0);\n                }\n                fs.closeSync(this.privFd);\n                this.privFd = undefined;\n            });\n            this.privWriteStream.end();\n        }\n    }\n\n    public id = (): string => {\n        return this.privId;\n    }\n}\n","/* (ignored) */","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport {\n    connectivity,\n    ISpeechConfigAudioDevice,\n    type,\n} from \"../../common.speech/Exports\";\nimport {\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    ChunkedArrayBufferStream,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStreamChunk,\n    Stream,\n} from \"../../common/Exports\";\nimport { createNoDashGuid } from \"../../common/Guid\";\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @class AudioInputStream\n */\nexport abstract class AudioInputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member AudioInputStream.createPushStream\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The audio input stream being created.\n     */\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\n        return PushAudioInputStream.create(format);\n    }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\n     * and close() methods.\n     * @member AudioInputStream.createPullStream\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\n     *        PullAudioInputStreamCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The audio input stream being created.\n     */\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return PullAudioInputStream.create(callback, format);\n        // throw new Error(\"Oops\");\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @class PushAudioInputStream\n */\nexport abstract class PushAudioInputStream extends AudioInputStream {\n\n    /**\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\n     * @member PushAudioInputStream.create\n     * @function\n     * @public\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PushAudioInputStream} The push audio input stream being created.\n     */\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\n        return new PushAudioInputStreamImpl(format);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStream.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public abstract write(dataBuffer: ArrayBuffer): void;\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio input stream used for custom audio input configurations.\n * @private\n * @class PushAudioInputStreamImpl\n */\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\n\n    private privFormat: AudioStreamFormatImpl;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privStream: Stream<ArrayBuffer>;\n\n    /**\n     * Creates and initalizes an instance with the given values.\n     * @constructor\n     * @param {AudioStreamFormat} format - The audio stream format.\n     */\n    public constructor(format?: AudioStreamFormat) {\n        super();\n        if (format === undefined) {\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\n        } else {\n            this.privFormat = format as AudioStreamFormatImpl;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(this.privFormat);\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PushAudioInputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        this.privStream.writeStreamChunk({\n            buffer: dataBuffer,\n            isEnd: false,\n            timeReceived: Date.now()\n        });\n    }\n\n    /**\n     * Closes the stream.\n     * @member PushAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public get blob(): Promise<Blob | Buffer> {\n        return this.attach(\"id\").then<Blob | Buffer>((audioNode: IAudioStreamNode) => {\n            const data: ArrayBuffer[] = [];\n            let bufferData = Buffer.from(\"\");\n            const readCycle = (): Promise<Blob | Buffer> => {\n                return audioNode.read().then<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                        if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\n                            return Promise.resolve(new Blob(data));\n                        } else {\n                            return Promise.resolve(Buffer.from(bufferData));\n                        }\n                    } else {\n                        if (typeof (Blob) !== \"undefined\") {\n                            data.push(audioStreamChunk.buffer);\n                        } else {\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\n                        }\n                        return readCycle();\n                    }\n                });\n            };\n            return readCycle();\n        });\n    }\n\n    public turnOn(): Promise<void> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return;\n    }\n\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        await this.turnOn();\n        const stream = this.privStream;\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n        return {\n            detach: async () => {\n                stream.readEnded();\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                return this.turnOff();\n            },\n            id: () => {\n                return audioNodeId;\n            },\n            read: () => {\n                return stream.read();\n            },\n        };\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<void> {\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return Promise.resolve({\n            bitspersample: this.privFormat.bitsPerSample,\n            channelcount: this.privFormat.channels,\n            connectivity: connectivity.Unknown,\n            manufacturer: \"Speech SDK\",\n            model: \"PushStream\",\n            samplerate: this.privFormat.samplesPerSec,\n            type: type.Stream,\n        });\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\n        for (let i = 0; i < buf.length; ++i) {\n            buf[i] = view[i];\n        }\n        return buf;\n    }\n}\n\n/*\n * Represents audio input stream used for custom audio input configurations.\n * @class PullAudioInputStream\n */\nexport abstract class PullAudioInputStream extends AudioInputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() { super(); }\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @member PullAudioInputStream.create\n     * @function\n     * @public\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     * @returns {PullAudioInputStream} The push audio input stream being created.\n     */\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PullAudioInputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio input stream used for custom audio input configurations.\n * @private\n * @class PullAudioInputStreamImpl\n */\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\n\n    private privCallback: PullAudioInputStreamCallback;\n    private privFormat: AudioStreamFormatImpl;\n    private privId: string;\n    private privEvents: EventSource<AudioSourceEvent>;\n    private privIsClosed: boolean;\n    private privBufferSize: number;\n\n    /**\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\n     * @constructor\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\n     *        derived from PullAudioInputStreamCustomCallback\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\n     */\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\n        super();\n        if (undefined === format) {\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\n        } else {\n            this.privFormat = format;\n        }\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n        this.privIsClosed = false;\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return Promise.resolve(this.privFormat);\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioInputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privIsClosed = true;\n        this.privCallback.close();\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public get blob(): Promise<Blob | Buffer> {\n        return Promise.reject(\"Not implemented\");\n    }\n\n    public turnOn(): Promise<void> {\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return;\n    }\n\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        await this.turnOn();\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n        return {\n            detach: () => {\n                this.privCallback.close();\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                return this.turnOff();\n            },\n            id: () => {\n                return audioNodeId;\n            },\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\n                let totalBytes: number = 0;\n                let transmitBuff: ArrayBuffer;\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n                while (totalBytes < this.privBufferSize) {\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\n                    // data back.\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\n                    const pulledBytes: number = this.privCallback.read(readBuff);\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\n                    // preferred size allocated.\n                    if (undefined === transmitBuff) {\n                        transmitBuff = readBuff;\n                    } else {\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\n                        const intView: Int8Array = new Int8Array(transmitBuff);\n                        intView.set(new Int8Array(readBuff), totalBytes);\n                    }\n                    // If there are no bytes to read, just break out and be done.\n                    if (0 === pulledBytes) {\n                        break;\n                    }\n                    totalBytes += pulledBytes;\n                }\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\n                    buffer: transmitBuff.slice(0, totalBytes),\n                    isEnd: this.privIsClosed || totalBytes === 0,\n                    timeReceived: Date.now(),\n                });\n            },\n        };\n    }\n\n    public detach(audioNodeId: string): void {\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n    }\n\n    public turnOff(): Promise<void> {\n        return;\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return Promise.resolve({\n            bitspersample: this.privFormat.bitsPerSample,\n            channelcount: this.privFormat.channels,\n            connectivity: connectivity.Unknown,\n            manufacturer: \"Speech SDK\",\n            model: \"PullStream\",\n            samplerate: this.privFormat.samplesPerSec,\n            type: type.Stream,\n        });\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport enum AudioFormatTag {\n    PCM = 1,\n    MuLaw,\n    Siren,\n    MP3,\n    SILKSkype,\n    OGG_OPUS,\n    WEBM_OPUS,\n    ALaw,\n}\n\n/**\n * Represents audio stream format used for custom audio input configurations.\n * @class AudioStreamFormat\n */\nexport abstract class AudioStreamFormat {\n    /**\n     * Creates an audio stream format object representing the default audio stream\n     * format (16KHz 16bit mono PCM).\n     * @member AudioStreamFormat.getDefaultInputFormat\n     * @function\n     * @public\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n    public static getDefaultInputFormat(): AudioStreamFormat {\n        return AudioStreamFormatImpl.getDefaultInputFormat();\n    }\n\n    /**\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\n     * @member AudioStreamFormat.getWaveFormatPCM\n     * @function\n     * @public\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\n     *        uses one channel and stereo data uses two channels.\n     * @returns {AudioStreamFormat} The audio stream format being created.\n     */\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioStreamFormat.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * @private\n * @class AudioStreamFormatImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\n    protected privHeader: ArrayBuffer;\n\n    /**\n     * Creates an instance with the given values.\n     * @constructor\n     * @param {number} samplesPerSec - Samples per second.\n     * @param {number} bitsPerSample - Bits per sample.\n     * @param {number} channels - Number of channels.\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\n     */\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\n        super();\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\n        switch (format) {\n            case AudioFormatTag.PCM:\n                this.formatTag = 1;\n                break;\n            case AudioFormatTag.ALaw:\n                this.formatTag = 6;\n                break;\n            case AudioFormatTag.MuLaw:\n                this.formatTag = 7;\n                break;\n            default:\n        }\n        this.bitsPerSample = bitsPerSample;\n        this.samplesPerSec = samplesPerSec;\n        this.channels = channels;\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\n\n        this.privHeader = new ArrayBuffer(44);\n\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n        const view = new DataView(this.privHeader);\n\n        /* RIFF identifier */\n        this.setString(view, 0, \"RIFF\");\n        /* file length */\n        view.setUint32(4, 0, true);\n        /* RIFF type & Format */\n        this.setString(view, 8, \"WAVEfmt \");\n        /* format chunk length */\n        view.setUint32(16, 16, true);\n        /* audio format */\n        view.setUint16(20, this.formatTag, true);\n        /* channel count */\n        view.setUint16(22, this.channels, true);\n        /* sample rate */\n        view.setUint32(24, this.samplesPerSec, true);\n        /* byte rate (sample rate * block align) */\n        view.setUint32(28, this.avgBytesPerSec, true);\n        /* block align (channel count * bytes per sample) */\n        view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\n        /* bits per sample */\n        view.setUint16(34, this.bitsPerSample, true);\n        /* data chunk identifier */\n        this.setString(view, 36, \"data\");\n        /* data chunk length */\n        view.setUint32(40, 0, true);\n    }\n\n    /**\n     * Retrieves the default input format.\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\n     * @function\n     * @public\n     * @returns {AudioStreamFormatImpl} The default input format.\n     */\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\n        return new AudioStreamFormatImpl();\n    }\n\n    /**\n     * Creates an audio context appropriate to current browser\n     * @member AudioStreamFormatImpl.getAudioContext\n     * @function\n     * @public\n     * @returns {AudioContext} An audio context instance\n     */\n    public static getAudioContext(sampleRate?: number): AudioContext {\n        // Workaround for Speech SDK bug in Safari.\n        const AudioContext = (window as any).AudioContext // our preferred impl\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\n            || false; // could not find.\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n        if (!!AudioContext) {\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\n                return new AudioContext({ sampleRate });\n            } else {\n                return new AudioContext();\n            }\n        } else {\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\n        }\n    }\n\n    /**\n     * Closes the configuration object.\n     * @member AudioStreamFormatImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void { return; }\n\n    /**\n     * The format of the audio, valid values: 1 (PCM)\n     * @member AudioStreamFormatImpl.prototype.formatTag\n     * @function\n     * @public\n     */\n    public formatTag: number;\n\n    /**\n     * The number of channels, valid values: 1 (Mono).\n     * @member AudioStreamFormatImpl.prototype.channels\n     * @function\n     * @public\n     */\n    public channels: number;\n\n    /**\n     * The sample rate, valid values: 16000.\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\n     * @function\n     * @public\n     */\n    public samplesPerSec: number;\n\n    /**\n     * The bits per sample, valid values: 16\n     * @member AudioStreamFormatImpl.prototype.b\n     * @function\n     * @public\n     */\n    public bitsPerSample: number;\n\n    /**\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\n     * @function\n     * @public\n     */\n    public avgBytesPerSec: number;\n\n    /**\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\n     * @member AudioStreamFormatImpl.prototype.blockAlign\n     * @function\n     * @public\n     */\n    public blockAlign: number;\n\n    public get header(): ArrayBuffer {\n        return this.privHeader;\n    }\n\n    protected setString = (view: DataView, offset: number, str: string): void => {\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(offset + i, str.charCodeAt(i));\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport {\n    createNoDashGuid,\n    Deferred,\n    IAudioDestination,\n    IStreamChunk,\n    Stream,\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioStreamFormat,\n    PushAudioOutputStreamCallback\n} from \"../Exports\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\n\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @class AudioOutputStream\n */\nexport abstract class AudioOutputStream {\n\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Sets the format of the AudioOutputStream\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\n     * @member AudioOutputStream.prototype.format\n     */\n    public abstract set format(format: AudioStreamFormat);\n\n    /**\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\n     * @member AudioOutputStream.createPullStream\n     * @function\n     * @public\n     * @returns {PullAudioOutputStream} The audio output stream being created.\n     */\n    public static createPullStream(): PullAudioOutputStream {\n        return PullAudioOutputStream.create();\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member AudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @class PullAudioOutputStream\n */\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\n\n    /**\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\n     * @member PullAudioOutputStream.create\n     * @function\n     * @public\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\n     */\n    public static create(): PullAudioOutputStream {\n        return new PullAudioOutputStreamImpl();\n    }\n\n    /**\n     * Reads audio data from the internal buffer.\n     * @member PullAudioOutputStream.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n     * @returns {Promise<number>} Audio buffer length has been read.\n     */\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\n\n    /**\n     * Closes the stream.\n     * @member PullAudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * Represents memory backed push audio output stream used for custom audio output configurations.\n * @private\n * @class PullAudioOutputStreamImpl\n */\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\n    private privFormat: AudioOutputFormatImpl;\n    private privId: string;\n    private privStream: Stream<ArrayBuffer>;\n    private privLastChunkView: Int8Array;\n\n    /**\n     * Creates and initializes an instance with the given values.\n     * @constructor\n     */\n    public constructor() {\n        super();\n        this.privId = createNoDashGuid();\n        this.privStream = new Stream<ArrayBuffer>();\n    }\n\n    /**\n     * Sets the format information to the stream. For internal use only.\n     * @param {AudioStreamFormat} format - the format to be set.\n     */\n    public set format(format: AudioStreamFormat) {\n        if (format === undefined || format === null) {\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\n        }\n        this.privFormat = format as AudioOutputFormatImpl;\n    }\n\n    /**\n     * Format information for the audio\n     */\n    public get format(): AudioStreamFormat {\n        return this.privFormat;\n    }\n\n    /**\n     * Checks if the stream is closed\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\n     * @property\n     * @public\n     */\n    public get isClosed(): boolean {\n        return this.privStream.isClosed;\n    }\n\n    /**\n     * Gets the id of the stream\n     * @member PullAudioOutputStreamImpl.prototype.id\n     * @property\n     * @public\n     */\n    public id(): string {\n        return this.privId;\n    }\n\n    /**\n     * Reads audio data from the internal buffer.\n     * @member PullAudioOutputStreamImpl.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\n     * @returns {Promise<number>} - Audio buffer length has been read.\n     */\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\n        const intView: Int8Array = new Int8Array(dataBuffer);\n        let totalBytes: number = 0;\n\n        if (this.privLastChunkView !== undefined) {\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\n                return Promise.resolve(dataBuffer.byteLength);\n            }\n            intView.set(this.privLastChunkView);\n            totalBytes = this.privLastChunkView.length;\n            this.privLastChunkView = undefined;\n        }\n\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\n            if (chunk !== undefined && !chunk.isEnd) {\n                let tmpBuffer: ArrayBuffer;\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\n                } else {\n                    tmpBuffer = chunk.buffer;\n                }\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\n                totalBytes += tmpBuffer.byteLength;\n            } else {\n                await this.privStream.readEnded();\n            }\n        }\n        return totalBytes;\n    }\n\n    /**\n     * Writes the audio data specified by making an internal copy of the data.\n     * @member PullAudioOutputStreamImpl.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\n     */\n    public write(dataBuffer: ArrayBuffer): void {\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\n        this.privStream.writeStreamChunk({\n            buffer: dataBuffer,\n            isEnd: false,\n            timeReceived: Date.now()\n        });\n    }\n\n    /**\n     * Closes the stream.\n     * @member PullAudioOutputStreamImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        this.privStream.close();\n    }\n}\n\n/*\n * Represents audio output stream used for custom audio output configurations.\n * @class PushAudioOutputStream\n */\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\n    /**\n     * Creates and initializes and instance.\n     * @constructor\n     */\n    protected constructor() { super(); }\n\n    /**\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n     * write() and close() methods.\n     * @member PushAudioOutputStream.create\n     * @function\n     * @public\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n     *        derived from PushAudioOutputStreamCallback\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\n     */\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\n        return new PushAudioOutputStreamImpl(callback);\n    }\n\n    /**\n     * Explicitly frees any external resource attached to the object\n     * @member PushAudioOutputStream.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n\n}\n\n/**\n * Represents audio output stream used for custom audio output configurations.\n * @private\n * @class PushAudioOutputStreamImpl\n */\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\n    private readonly privId: string;\n    private privCallback: PushAudioOutputStreamCallback;\n\n    /**\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\n     * read() and close() methods.\n     * @constructor\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\n     *        derived from PushAudioOutputStreamCallback\n     */\n    public constructor(callback: PushAudioOutputStreamCallback) {\n        super();\n        this.privId = createNoDashGuid();\n        this.privCallback = callback;\n    }\n\n    // tslint:disable-next-line:no-empty\n    public set format(format: AudioStreamFormat) { }\n\n    public write(buffer: ArrayBuffer): void {\n        if (!!this.privCallback.write) {\n            this.privCallback.write(buffer);\n        }\n    }\n\n    public close(): void {\n        if (!!this.privCallback.close) {\n            this.privCallback.close();\n        }\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { INumberDictionary } from \"../../common/Exports\";\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\n/**\n * @private\n * @class AudioOutputFormatImpl\n * Updated in version 1.17.0\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\n    };\n    private priAudioFormatString: string;\n    /**\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\n     */\n    private readonly priRequestAudioFormatString: string;\n    private readonly priHasHeader: boolean;\n\n    /**\n     * Creates an instance with the given values.\n     * @constructor\n     * @param formatTag\n     * @param {number} channels - Number of channels.\n     * @param {number} samplesPerSec - Samples per second.\n     * @param {number} avgBytesPerSec - Average bytes per second.\n     * @param {number} blockAlign - Block alignment.\n     * @param {number} bitsPerSample - Bits per sample.\n     * @param {string} audioFormatString - Audio format string\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\n     * @param {boolean} hasHeader - If the format has header or not.\n     */\n    public constructor(formatTag: AudioFormatTag,\n                       channels: number,\n                       samplesPerSec: number,\n                       avgBytesPerSec: number,\n                       blockAlign: number,\n                       bitsPerSample: number,\n                       audioFormatString: string,\n                       requestAudioFormatString: string,\n                       hasHeader: boolean) {\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\n        this.formatTag = formatTag;\n        this.avgBytesPerSec = avgBytesPerSec;\n        this.blockAlign = blockAlign;\n        this.priAudioFormatString = audioFormatString;\n        this.priRequestAudioFormatString = requestAudioFormatString;\n        this.priHasHeader = hasHeader;\n    }\n\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\n        if (speechSynthesisOutputFormat === undefined) {\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\n        }\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\n    }\n\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\n        switch (speechSynthesisOutputFormatString) {\n            case \"raw-8khz-8bit-mono-mulaw\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MuLaw,\n                    1,\n                    8000,\n                    8000,\n                    1,\n                    8,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"riff-16khz-16kbps-mono-siren\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.Siren,\n                    1,\n                    16000,\n                    2000,\n                    40,\n                    0,\n                    speechSynthesisOutputFormatString,\n                    \"audio-16khz-16kbps-mono-siren\",\n                    true);\n            case \"audio-16khz-16kbps-mono-siren\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.Siren,\n                    1,\n                    16000,\n                    2000,\n                    40,\n                    0,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-16khz-32kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    16000,\n                    32 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-16khz-128kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    16000,\n                    128 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-16khz-64kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    16000,\n                    64 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-24khz-48kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    24000,\n                    48 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-24khz-96kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    24000,\n                    96 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-24khz-160kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    24000,\n                    160 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"raw-16khz-16bit-mono-truesilk\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.SILKSkype,\n                    1,\n                    16000,\n                    32000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n\n            case \"riff-8khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    8000,\n                    16000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-8khz-16bit-mono-pcm\",\n                    true);\n            case \"riff-24khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    24000,\n                    48000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-24khz-16bit-mono-pcm\",\n                    true);\n            case \"riff-8khz-8bit-mono-mulaw\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MuLaw,\n                    1,\n                    8000,\n                    8000,\n                    1,\n                    8,\n                    speechSynthesisOutputFormatString,\n                    \"raw-8khz-8bit-mono-mulaw\",\n                    true);\n            case \"raw-16khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    16000,\n                    32000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-16khz-16bit-mono-pcm\",\n                    false);\n            case \"raw-24khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    24000,\n                    48000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-24khz-16bit-mono-pcm\",\n                    false);\n            case \"raw-8khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    8000,\n                    16000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-8khz-16bit-mono-pcm\",\n                    false);\n            case \"ogg-16khz-16bit-mono-opus\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.OGG_OPUS,\n                    1,\n                    16000,\n                    8192,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"ogg-24khz-16bit-mono-opus\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.OGG_OPUS,\n                    1,\n                    24000,\n                    8192,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"raw-48khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    48000,\n                    96000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-48khz-16bit-mono-pcm\",\n                    false);\n            case \"riff-48khz-16bit-mono-pcm\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    48000,\n                    96000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    \"raw-48khz-16bit-mono-pcm\",\n                    true);\n            case \"audio-48khz-96kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    48000,\n                    96 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"audio-48khz-192kbitrate-mono-mp3\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.MP3,\n                    1,\n                    48000,\n                    192 << 7,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"ogg-48khz-16bit-mono-opus\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.OGG_OPUS,\n                    1,\n                    48000,\n                    12000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"webm-16khz-16bit-mono-opus\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.WEBM_OPUS,\n                    1,\n                    16000,\n                    8000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"webm-24khz-16bit-mono-opus\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.WEBM_OPUS,\n                    1,\n                    24000,\n                    8000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"raw-24khz-16bit-mono-truesilk\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.SILKSkype,\n                    1,\n                    24000,\n                    48000,\n                    2,\n                    16,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"raw-8khz-8bit-mono-alaw\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.ALaw,\n                    1,\n                    8000,\n                    8000,\n                    1,\n                    8,\n                    speechSynthesisOutputFormatString,\n                    speechSynthesisOutputFormatString,\n                    false);\n            case \"riff-8khz-8bit-mono-alaw\":\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.ALaw,\n                    1,\n                    8000,\n                    8000,\n                    1,\n                    8,\n                    speechSynthesisOutputFormatString,\n                    \"raw-8khz-8bit-mono-alaw\",\n                    true);\n            case \"riff-16khz-16bit-mono-pcm\":\n            default:\n                return new AudioOutputFormatImpl(\n                    AudioFormatTag.PCM,\n                    1,\n                    16000,\n                    32000,\n                    2,\n                    16,\n                    \"riff-16khz-16bit-mono-pcm\",\n                    \"raw-16khz-16bit-mono-pcm\",\n                    true);\n        }\n    }\n\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\n    }\n\n    /**\n     * The format tag of the audio\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\n     * @function\n     * @public\n     */\n    public formatTag: AudioFormatTag;\n\n    /**\n     * Specifies if this audio output format has a header\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\n     * @function\n     * @public\n     */\n    public get hasHeader(): boolean {\n        return this.priHasHeader;\n    }\n\n    /**\n     * Specifies the header of this format\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\n     * @function\n     * @public\n     */\n    public get header(): ArrayBuffer {\n        if (this.hasHeader) {\n            return this.privHeader;\n        }\n        return undefined;\n    }\n\n    /**\n     * Updates the header based on the audio length\n     * @member AudioOutputFormatImpl.updateHeader\n     * @function\n     * @public\n     * @param {number} audioLength - the audio length\n     */\n    public updateHeader(audioLength: number): void {\n        if (this.priHasHeader) {\n            const view = new DataView(this.privHeader);\n            view.setUint32(40, audioLength, true);\n        }\n    }\n\n    /**\n     * Specifies the audio format string to be sent to the service\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\n     * @function\n     * @public\n     */\n    public get requestAudioFormatString(): string {\n        return this.priRequestAudioFormatString;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Define speech synthesis audio output formats.\n * @enum SpeechSynthesisOutputFormat\n * Updated in version 1.17.0\n */\nexport enum SpeechSynthesisOutputFormat {\n    /**\n     * raw-8khz-8bit-mono-mulaw\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\n     */\n    Raw8Khz8BitMonoMULaw,\n\n    /**\n     * riff-16khz-16kbps-mono-siren\n     * @note Unsupported by the service. Do not use this value.\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\n     */\n    Riff16Khz16KbpsMonoSiren ,\n\n    /**\n     * audio-16khz-16kbps-mono-siren\n     * @note Unsupported by the service. Do not use this value.\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\n     */\n    Audio16Khz16KbpsMonoSiren,\n\n    /**\n     * audio-16khz-32kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\n     */\n    Audio16Khz32KBitRateMonoMp3,\n\n    /**\n     * audio-16khz-128kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\n     */\n    Audio16Khz128KBitRateMonoMp3,\n\n    /**\n     * audio-16khz-64kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\n     */\n    Audio16Khz64KBitRateMonoMp3,\n\n    /**\n     * audio-24khz-48kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\n     */\n    Audio24Khz48KBitRateMonoMp3,\n\n    /**\n     * audio-24khz-96kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\n     */\n    Audio24Khz96KBitRateMonoMp3,\n\n    /**\n     * audio-24khz-160kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\n     */\n    Audio24Khz160KBitRateMonoMp3,\n\n    /**\n     * raw-16khz-16bit-mono-truesilk\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\n     */\n    Raw16Khz16BitMonoTrueSilk,\n\n    /**\n     * riff-16khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\n     */\n    Riff16Khz16BitMonoPcm,\n\n    /**\n     * riff-8khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\n     */\n    Riff8Khz16BitMonoPcm,\n\n    /**\n     * riff-24khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\n     */\n    Riff24Khz16BitMonoPcm,\n\n    /**\n     * riff-8khz-8bit-mono-mulaw\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\n     */\n    Riff8Khz8BitMonoMULaw,\n\n    /**\n     * raw-16khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\n     */\n    Raw16Khz16BitMonoPcm,\n\n    /**\n     * raw-24khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\n     */\n    Raw24Khz16BitMonoPcm,\n\n    /**\n     * raw-8khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\n     */\n    Raw8Khz16BitMonoPcm,\n\n    /**\n     * ogg-16khz-16bit-mono-opus\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\n     */\n    Ogg16Khz16BitMonoOpus,\n\n    /**\n     * ogg-24khz-16bit-mono-opus\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\n     */\n    Ogg24Khz16BitMonoOpus,\n\n    /**\n     * raw-48khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\n     */\n    Raw48Khz16BitMonoPcm,\n\n    /**\n     * riff-48khz-16bit-mono-pcm\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\n     */\n\n    Riff48Khz16BitMonoPcm,\n    /**\n     * audio-48khz-96kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\n     */\n    Audio48Khz96KBitRateMonoMp3,\n\n    /**\n     * audio-48khz-192kbitrate-mono-mp3\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\n     */\n    Audio48Khz192KBitRateMonoMp3,\n\n    /**\n     * ogg-48khz-16bit-mono-opus\n     * Added in version 1.16.0\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\n     */\n    Ogg48Khz16BitMonoOpus,\n\n    /**\n     * webm-16khz-16bit-mono-opus\n     * Added in version 1.16.0\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\n     */\n    Webm16Khz16BitMonoOpus,\n\n    /**\n     * webm-24khz-16bit-mono-opus\n     * Added in version 1.16.0\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\n     */\n    Webm24Khz16BitMonoOpus,\n\n    /**\n     * raw-24khz-16bit-mono-truesilk\n     * Added in version 1.17.0\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\n     */\n     Raw24Khz16BitMonoTrueSilk,\n\n    /**\n     * raw-8khz-8bit-mono-alaw\n     * Added in version 1.17.0\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\n     */\n     Raw8Khz8BitMonoALaw,\n\n    /**\n     * riff-8khz-8bit-mono-alaw\n     * Added in version 1.17.0\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\n     */\n     Riff8Khz8BitMonoALaw,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might be canceled.\n * @class CancellationReason\n */\nexport enum CancellationReason {\n    /**\n     * Indicates that an error occurred during speech recognition.\n     * @member CancellationReason.Error\n     */\n    Error,\n\n    /**\n     * Indicates that the end of the audio stream was reached.\n     * @member CancellationReason.EndOfStream\n     */\n    EndOfStream,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n /**\n  * An abstract base class that defines callback methods (read() and close()) for\n  * custom audio input streams).\n  * @class PullAudioInputStreamCallback\n  */\nexport abstract class PullAudioInputStreamCallback {\n\n    /**\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\n     * to be read is determined by the size of dataBuffer.\n     * @member PullAudioInputStreamCallback.prototype.read\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\n     * @returns {number} the number of bytes have been read.\n     */\n    public abstract read(dataBuffer: ArrayBuffer): number;\n\n    /**\n     * Closes the audio input stream.\n     * @member PullAudioInputStreamCallback.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n/**\n * An abstract base class that defines callback methods (write() and close()) for\n * custom audio output streams).\n * @class PushAudioOutputStreamCallback\n */\nexport abstract class PushAudioOutputStreamCallback {\n\n    /**\n     * Writes audio data into the data buffer.\n     * @member PushAudioOutputStreamCallback.prototype.write\n     * @function\n     * @public\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\n     */\n    public abstract write(dataBuffer: ArrayBuffer): void;\n\n    /**\n     * Closes the audio output stream.\n     * @member PushAudioOutputStreamCallback.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\n\n/**\n * Represents a keyword recognition model for recognizing when\n * the user says a keyword to initiate further speech recognition.\n * @class KeywordRecognitionModel\n */\nexport class KeywordRecognitionModel {\n    private privDisposed: boolean = false;\n\n    /**\n     * Create and initializes a new instance.\n     * @constructor\n     */\n    private constructor() {\n    }\n\n    /**\n     * Creates a keyword recognition model using the specified filename.\n     * @member KeywordRecognitionModel.fromFile\n     * @function\n     * @public\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\n     *        Note, the file can point to a zip file in which case the model\n     *        will be extracted from the zip.\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n     */\n    public static fromFile(fileName: string): KeywordRecognitionModel {\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\n\n        throw new Error(\"Not yet implemented.\");\n    }\n\n    /**\n     * Creates a keyword recognition model using the specified filename.\n     * @member KeywordRecognitionModel.fromStream\n     * @function\n     * @public\n     * @param {string} file - A File that represents file for the keyword recognition model.\n     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\n     */\n    public static fromStream(file: File): KeywordRecognitionModel {\n        Contracts.throwIfNull(file, \"file\");\n\n        throw new Error(\"Not yet implemented.\");\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member KeywordRecognitionModel.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        if (this.privDisposed) {\n            return;\n        }\n\n        this.privDisposed = true;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\n * @class SessionEventArgs\n */\nexport class SessionEventArgs {\n    private privSessionId: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(sessionId: string) {\n        this.privSessionId = sessionId;\n    }\n\n    /**\n     * Represents the session identifier.\n     * @member SessionEventArgs.prototype.sessionId\n     * @function\n     * @public\n     * @returns {string} Represents the session identifier.\n     */\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SessionEventArgs } from \"./Exports\";\n\n/**\n * Defines payload for session events like Speech Start/End Detected\n * @class\n */\nexport class RecognitionEventArgs extends SessionEventArgs {\n    private privOffset: number;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(offset: number, sessionId?: string) {\n        super(sessionId);\n\n        this.privOffset = offset;\n    }\n\n    /**\n     * Represents the message offset\n     * @member RecognitionEventArgs.prototype.offset\n     * @function\n     * @public\n     */\n    public get offset(): number {\n        return this.privOffset;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Define Speech Recognizer output formats.\n * @class OutputFormat\n */\nexport enum OutputFormat {\n    /**\n     * @member OutputFormat.Simple\n     */\n    Simple = 0,\n\n    /**\n     * @member OutputFormat.Detailed\n     */\n    Detailed,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports\";\n\n/**\n * Intent recognition result event arguments.\n * @class\n */\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: IntentRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param result - The result of the intent recognition.\n     * @param offset - The offset.\n     * @param sessionId - The session id.\n     */\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Represents the intent recognition result.\n     * @member IntentRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\n     */\n    public get result(): IntentRecognitionResult {\n        return this.privResult;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason } from \"./Exports\";\n\n/**\n * Defines result of speech recognition.\n * @class RecognitionResult\n */\nexport class RecognitionResult {\n    private privResultId: string;\n    private privReason: ResultReason;\n    private privText: string;\n    private privDuration: number;\n    private privOffset: number;\n    private privLanguage: string;\n    private privLanguageDetectionConfidence: string;\n    private privErrorDetails: string;\n    private privJson: string;\n    private privProperties: PropertyCollection;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} language - Primary Language detected, if provided.\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\n        this.privResultId = resultId;\n        this.privReason = reason;\n        this.privText = text;\n        this.privDuration = duration;\n        this.privOffset = offset;\n        this.privLanguage = language;\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\n        this.privErrorDetails = errorDetails;\n        this.privJson = json;\n        this.privProperties = properties;\n    }\n\n    /**\n     * Specifies the result identifier.\n     * @member RecognitionResult.prototype.resultId\n     * @function\n     * @public\n     * @returns {string} Specifies the result identifier.\n     */\n    public get resultId(): string {\n        return this.privResultId;\n    }\n\n    /**\n     * Specifies status of the result.\n     * @member RecognitionResult.prototype.reason\n     * @function\n     * @public\n     * @returns {ResultReason} Specifies status of the result.\n     */\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    /**\n     * Presents the recognized text in the result.\n     * @member RecognitionResult.prototype.text\n     * @function\n     * @public\n     * @returns {string} Presents the recognized text in the result.\n     */\n    public get text(): string {\n        return this.privText;\n    }\n\n    /**\n     * Duration of recognized speech in 100 nano second incements.\n     * @member RecognitionResult.prototype.duration\n     * @function\n     * @public\n     * @returns {number} Duration of recognized speech in 100 nano second incements.\n     */\n    public get duration(): number {\n        return this.privDuration;\n    }\n\n    /**\n     * Offset of recognized speech in 100 nano second incements.\n     * @member RecognitionResult.prototype.offset\n     * @function\n     * @public\n     * @returns {number} Offset of recognized speech in 100 nano second incements.\n     */\n    public get offset(): number {\n        return this.privOffset;\n    }\n\n    /**\n     * Primary Language detected.\n     * @member RecognitionResult.prototype.language\n     * @function\n     * @public\n     * @returns {string} language detected.\n     */\n    public get language(): string {\n        return this.privLanguage;\n    }\n\n    /**\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\n     * @member RecognitionResult.prototype.languageDetectionConfidence\n     * @function\n     * @public\n     * @returns {string} detection confidence strength.\n     */\n    public get languageDetectionConfidence(): string {\n        return this.privLanguageDetectionConfidence;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member RecognitionResult.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} a brief description of an error.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    /**\n     * A string containing Json serialized recognition result as it was received from the service.\n     * @member RecognitionResult.prototype.json\n     * @function\n     * @private\n     * @returns {string} Json serialized representation of the result.\n     */\n    public get json(): string {\n        return this.privJson;\n    }\n\n    /**\n     *  The set of properties exposed in the result.\n     * @member RecognitionResult.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The set of properties exposed in the result.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\n\n/**\n * Defines result of speech recognition.\n * @class SpeechRecognitionResult\n */\nexport class SpeechRecognitionResult extends RecognitionResult {\n    private readonly privSpeakerId: string;\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @public\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} language - Primary Language detected, if provided.\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\n                       duration?: number, offset?: number, language?: string,\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\n                       json?: string, properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\n        this.privSpeakerId = speakerId;\n    }\n\n    /**\n     * speaker id from conversation transcription/id scenarios\n     * @member SpeechRecognitionResult.prototype.speakerId\n     * @function\n     * @public\n     * @returns {string} id of speaker in given result\n     */\n    public get speakerId(): string {\n        return this.privSpeakerId;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports\";\n\n/**\n * Intent recognition result.\n * @class\n */\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\n    private privIntentId: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param intentId - The intent id.\n     * @param resultId - The result id.\n     * @param reason - The reason.\n     * @param text - The recognized text.\n     * @param duration - The duration.\n     * @param offset - The offset into the stream.\n     * @param language - Primary Language detected, if provided.\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\n     * @param errorDetails - Error details, if provided.\n     * @param json - Additional Json, if provided.\n     * @param properties - Additional properties, if provided.\n     */\n    constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\n\n        this.privIntentId = intentId;\n    }\n\n    /**\n     * A String that represents the intent identifier being recognized.\n     * @member IntentRecognitionResult.prototype.intentId\n     * @function\n     * @public\n     * @returns {string} A String that represents the intent identifier being recognized.\n     */\n    public get intentId(): string {\n        return this.privIntentId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\n\n/**\n * Language understanding model\n * @class LanguageUnderstandingModel\n */\nexport class LanguageUnderstandingModel {\n    /**\n     * Creates and initializes a new instance\n     * @constructor\n     */\n    protected constructor() {\n    }\n\n    /**\n     * Creates an language understanding model using the specified endpoint.\n     * @member LanguageUnderstandingModel.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\n        Contracts.throwIfNull(uri, \"uri\");\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        // Need to extract the app ID from the URL.\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\n\n        // Start tearing the string apart.\n\n        // region can be extracted from the host name.\n        const firstDot: number = uri.host.indexOf(\".\");\n        if (-1 === firstDot) {\n            throw new Error(\"Could not determine region from endpoint\");\n        }\n        langModelImp.region = uri.host.substr(0, firstDot);\n\n        // Now the app ID.\n\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\n        if (-1 === lastSegment) {\n            throw new Error(\"Could not determine appId from endpoint\");\n        }\n\n        langModelImp.appId = uri.pathname.substr(lastSegment);\n\n        // And finally the key.\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\n        if (undefined === langModelImp.subscriptionKey) {\n            throw new Error(\"Could not determine subscription key from endpoint\");\n        }\n\n        return langModelImp;\n    }\n\n    /**\n     * Creates an language understanding model using the application id of Language Understanding service.\n     * @member LanguageUnderstandingModel.fromAppId\n     * @function\n     * @public\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        langModelImp.appId = appId;\n        return langModelImp;\n    }\n\n    /**\n     * Creates a language understanding model using hostname, subscription key and application\n     * id of Language Understanding service.\n     * @member LanguageUnderstandingModel.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - A String that represents the subscription key of\n     *        Language Understanding service.\n     * @param {string} appId - A String that represents the application id of Language\n     *        Understanding service.\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\n     *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\n     */\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\n        langModelImp.appId = appId;\n        langModelImp.region = region;\n        langModelImp.subscriptionKey = subscriptionKey;\n        return langModelImp;\n    }\n}\n\n/**\n * @private\n * @class LanguageUnderstandingModelImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\n    public appId: string;\n    public region: string;\n    public subscriptionKey: string;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionEventArgs, SpeechRecognitionResult } from \"./Exports\";\n\n/**\n * Defines contents of speech recognizing/recognized event.\n * @class SpeechRecognitionEventArgs\n */\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: SpeechRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member SpeechRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {SpeechRecognitionResult} the recognition result.\n     */\n    public get result(): SpeechRecognitionResult {\n        return this.privResult;\n    }\n}\n\n/**\n * Defines contents of conversation transcribed/transcribing event.\n * @class ConversationTranscriptionEventArgs\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ConversationTranscriptionEventArgs extends SpeechRecognitionEventArgs {\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CancellationEventArgsBase,\n} from \"./CancellationEventArgsBase\";\n\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CancellationErrorCode,\n    CancellationEventArgs,\n    CancellationReason,\n    RecognitionEventArgs\n} from \"./Exports\";\n\n/**\n * Defines content of a CancellationEvent.\n * @class CancellationEventArgsBase\n */\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} reason - The cancellation reason.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(reason: CancellationReason, errorDetails: string,\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member CancellationEventArgsBase.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful operation.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful operation, provides details of the occurred error.\n     * @member CancellationEventArgsBase.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Translation text result event arguments.\n * @class TranslationRecognitionEventArgs\n */\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\n    private privResult: TranslationRecognitionResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member TranslationRecognitionEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationRecognitionResult} the recognition result.\n     */\n    public get result(): TranslationRecognitionResult {\n        return this.privResult;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\n\n/**\n * Translation Synthesis event arguments\n * @class TranslationSynthesisEventArgs\n */\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\n    private privResult: TranslationSynthesisResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\n        super(sessionId);\n\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the translation synthesis result.\n     * @member TranslationSynthesisEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\n     */\n    public get result(): TranslationSynthesisResult {\n        return this.privResult;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\n\n/**\n * Translation text result.\n * @class TranslationRecognitionResult\n */\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\n    private privTranslations: Translations;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {Translations} translations - The translations.\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {string} text - The recognized text.\n     * @param {number} duration - The duration.\n     * @param {number} offset - The offset into the stream.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {string} json - Additional Json, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\n                       text?: string, duration?: number, offset?: number, errorDetails?: string,\n                       json?: string, properties?: PropertyCollection) {\n        super(resultId, reason, text, duration, offset, undefined, undefined, undefined, errorDetails, json, properties);\n\n        this.privTranslations = translations;\n    }\n\n    /**\n     * Presents the translation results. Each item in the dictionary represents\n     * a translation result in one of target languages, where the key is the name\n     * of the target language, in BCP-47 format, and the value is the translation\n     * text in the specified language.\n     * @member TranslationRecognitionResult.prototype.translations\n     * @function\n     * @public\n     * @returns {Translations} the current translation map that holds all translations requested.\n     */\n    public get translations(): Translations {\n        return this.privTranslations;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ResultReason } from \"./ResultReason\";\n\n/**\n * Defines translation synthesis result, i.e. the voice output of the translated\n * text in the target language.\n * @class TranslationSynthesisResult\n */\nexport class TranslationSynthesisResult {\n    private privReason: ResultReason;\n    private privAudio: ArrayBuffer;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {ResultReason} reason - The synthesis reason.\n     * @param {ArrayBuffer} audio - The audio data.\n     */\n    constructor(reason: ResultReason, audio: ArrayBuffer) {\n        this.privReason = reason;\n        this.privAudio = audio;\n    }\n\n    /**\n     * Translated text in the target language.\n     * @member TranslationSynthesisResult.prototype.audio\n     * @function\n     * @public\n     * @returns {ArrayBuffer} Translated audio in the target language.\n     */\n    public get audio(): ArrayBuffer {\n        return this.privAudio;\n    }\n\n    /**\n     * The synthesis status.\n     * @member TranslationSynthesisResult.prototype.reason\n     * @function\n     * @public\n     * @returns {ResultReason} The synthesis status.\n     */\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might be generated.\n * @class ResultReason\n */\nexport enum ResultReason {\n    /**\n     * Indicates speech could not be recognized. More details\n     * can be found in the NoMatchDetails object.\n     * @member ResultReason.NoMatch\n     */\n    NoMatch,\n\n    /**\n     * Indicates that the recognition was canceled. More details\n     * can be found using the CancellationDetails object.\n     * @member ResultReason.Canceled\n     */\n    Canceled,\n\n    /**\n     * Indicates the speech result contains hypothesis text.\n     * @member ResultReason.RecognizedSpeech\n     */\n    RecognizingSpeech,\n\n    /**\n     * Indicates the speech result contains final text that has been recognized.\n     * Speech Recognition is now complete for this phrase.\n     * @member ResultReason.RecognizedSpeech\n     */\n    RecognizedSpeech,\n\n    /**\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\n     * Speech recognition will continue unless otherwise configured.\n     * @member ResultReason.RecognizedKeyword\n     */\n    RecognizedKeyword,\n\n    /**\n     * Indicates the intent result contains hypothesis text and intent.\n     * @member ResultReason.RecognizingIntent\n     */\n    RecognizingIntent,\n\n    /**\n     * Indicates the intent result contains final text and intent.\n     * Speech Recognition and Intent determination are now complete for this phrase.\n     * @member ResultReason.RecognizedIntent\n     */\n    RecognizedIntent,\n\n    /**\n     * Indicates the translation result contains hypothesis text and its translation(s).\n     * @member ResultReason.TranslatingSpeech\n     */\n    TranslatingSpeech,\n\n    /**\n     * Indicates the translation result contains final text and corresponding translation(s).\n     * Speech Recognition and Translation are now complete for this phrase.\n     * @member ResultReason.TranslatedSpeech\n     */\n    TranslatedSpeech,\n\n    /**\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\n     * @member ResultReason.SynthesizingAudio\n     */\n    SynthesizingAudio,\n\n    /**\n     * Indicates the synthesized audio is now complete for this phrase.\n     * @member ResultReason.SynthesizingAudioCompleted\n     */\n    SynthesizingAudioCompleted,\n\n    /**\n     * Indicates the speech synthesis is now started\n     * @member ResultReason.SynthesizingAudioStarted\n     */\n    SynthesizingAudioStarted,\n\n    /**\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\n     * @member ResultReason.EnrollingVoiceProfile\n     */\n    EnrollingVoiceProfile,\n\n    /**\n     * Indicates the voice profile has been enrolled.\n     * @member ResultReason.EnrolledVoiceProfile\n     */\n    EnrolledVoiceProfile,\n\n    /**\n     * Indicates successful identification of some speakers.\n     * @member ResultReason.RecognizedSpeakers\n     */\n    RecognizedSpeakers,\n\n    /**\n     * Indicates successfully verified one speaker.\n     * @member ResultReason.RecognizedSpeaker\n     */\n    RecognizedSpeaker,\n\n    /**\n     * Indicates a voice profile has been reset successfully.\n     * @member ResultReason.ResetVoiceProfile\n     */\n    ResetVoiceProfile,\n\n    /**\n     * Indicates a voice profile has been deleted successfully.\n     * @member ResultReason.DeletedVoiceProfile\n     */\n    DeletedVoiceProfile,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ForceDictationPropertyName,\n    OutputFormatPropertyName,\n    ServicePropertiesPropertyName\n} from \"../common.speech/Exports\";\nimport {IStringDictionary} from \"../common/Exports\";\nimport {Contracts} from \"./Contracts\";\nimport {\n    OutputFormat,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    ServicePropertyChannel,\n    SpeechSynthesisOutputFormat,\n} from \"./Exports\";\n\n/**\n * Speech configuration.\n * @class SpeechConfig\n */\nexport abstract class SpeechConfig {\n    /**\n     * Creates and initializes an instance.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n     * @member SpeechConfig.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - The subscription key.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechConfig} The speech factory\n     */\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech config with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\n     *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\n     *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\n     *              endpoint URL can be set by other APIs.\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n     *       use the authorization token.\n     * @member SpeechConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n\n        if (undefined !== subscriptionKey) {\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech config with specified host and subscription key.\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\n     * Note: Added in version 1.9.0.\n     * @member SpeechConfig.fromHost\n     * @function\n     * @public\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\n        Contracts.throwIfNull(hostName, \"hostName\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n        if (undefined !== subscriptionKey) {\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech factory with specified initial authorization token and region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     *       expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\n     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\n     *       the new token value will not apply to recognizers that have already been created. For recognizers\n     *       that have been created before, you need to set authorization token of the corresponding recognizer\n     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member SpeechConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The initial authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\n        speechImpl.authorizationToken = authorizationToken;\n        return speechImpl;\n    }\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server.\n     * @param proxyPort The port number of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param proxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\n\n    /**\n     * Gets the authorization token.\n     * @member SpeechConfig.prototype.authorizationToken\n     * @function\n     * @public\n     */\n    public abstract get authorizationToken(): string;\n\n    /**\n     * Gets/Sets the authorization token.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * @member SpeechConfig.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set authorizationToken(value: string);\n\n    /**\n     * Returns the configured language.\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public abstract get speechRecognitionLanguage(): string;\n\n    /**\n     * Gets/Sets the input language.\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Sets an arbitrary property.\n     * @member SpeechConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member SpeechConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string, def?: string): string;\n\n    /**\n     * Gets speech recognition output format (simple or detailed).\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\n     * get synthesized audio output format.\n     * @member SpeechConfig.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} Returns the output format.\n     */\n    public abstract get outputFormat(): OutputFormat;\n\n    /**\n     * Gets/Sets speech recognition output format (simple or detailed).\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\n     * set synthesized audio output format.\n     * @member SpeechConfig.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public abstract set outputFormat(format: OutputFormat);\n\n    /**\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\n     * @member SpeechConfig.prototype.endpointId\n     * @function\n     * @public\n     * @return {string} The endpoint ID\n     */\n    public abstract get endpointId(): string;\n\n    /**\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\n     * @member SpeechConfig.prototype.endpointId\n     * @function\n     * @public\n     * @param {string} value - The endpoint ID\n     */\n    public abstract set endpointId(value: string);\n\n    /**\n     * Closes the configuration.\n     * @member SpeechConfig.prototype.close\n     * @function\n     * @public\n     */\n    /* tslint:disable:no-empty */\n    public close(): void { }\n\n    /**\n     * @member SpeechConfig.prototype.subscriptionKey\n     * @function\n     * @public\n     * @return {string} The subscription key set on the config.\n     */\n    public abstract get subscriptionKey(): string;\n\n    /**\n     * @member SpeechConfig.prototype.region\n     * @function\n     * @public\n     * @return {region} The region set on the config.\n     */\n    public abstract get region(): string;\n\n    /**\n     * @member SpeechConfig.prototype.setServiceProperty\n     * @function\n     * @public\n     * @param {name} The name of the property.\n     * @param {value} Value to set.\n     * @param {channel} The channel used to pass the specified property to service.\n     * @summary Sets a property value that will be passed to service using the specified channel.\n     * Added in version 1.7.0.\n     */\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\n\n    /**\n     * @member SpeechConfig.prototype.setProfanity\n     * @function\n     * @public\n     * @param {profanity} Profanity option to set.\n     * @summary Sets profanity option.\n     * Added in version 1.7.0.\n     */\n    public abstract setProfanity(profanity: ProfanityOption): void;\n\n    /**\n     * @member SpeechConfig.prototype.enableAudioLogging\n     * @function\n     * @public\n     * @summary Enable audio logging in service.\n     * Added in version 1.7.0.\n     */\n    public abstract enableAudioLogging(): void;\n\n    /**\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\n     * @function\n     * @public\n     * @summary Includes word-level timestamps.\n     * Added in version 1.7.0.\n     */\n    public abstract requestWordLevelTimestamps(): void;\n\n    /**\n     * @member SpeechConfig.prototype.enableDictation\n     * @function\n     * @public\n     * @summary Enable dictation. Only supported in speech continuous recognition.\n     * Added in version 1.7.0.\n     */\n    public abstract enableDictation(): void;\n\n    /**\n     * Gets the language of the speech synthesizer.\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\n     * @function\n     * @public\n     * @returns {string} Returns the speech synthesis language.\n     * Added in version 1.11.0.\n     */\n    public abstract get speechSynthesisLanguage(): string;\n\n    /**\n     * Sets the language of the speech synthesizer.\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\n     * @function\n     * @public\n     * Added in version 1.11.0.\n     */\n    public abstract set speechSynthesisLanguage(language: string);\n\n    /**\n     * Gets the voice of the speech synthesizer.\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\n     * @function\n     * @public\n     * @returns {string} Returns the speech synthesis voice.\n     * Added in version 1.11.0.\n     */\n    public abstract get speechSynthesisVoiceName(): string;\n\n    /**\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\n     * @function\n     * @public\n     * Added in version 1.11.0.\n     */\n    public abstract set speechSynthesisVoiceName(voice: string);\n\n    /**\n     * Gets the speech synthesis output format.\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\n     * @function\n     * @public\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\n     * Added in version 1.11.0.\n     */\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\n\n    /**\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\n     * @function\n     * @public\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS\n     * Added in version 1.11.0.\n     */\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\n}\n\n/**\n * @public\n * @class SpeechConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechConfigImpl extends SpeechConfig {\n\n    private privProperties: PropertyCollection;\n\n    public constructor() {\n        super();\n        this.privProperties = new PropertyCollection();\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\n        this.outputFormat = OutputFormat.Simple;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get endPoint(): URL {\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\n    }\n\n    public get subscriptionKey(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\n    }\n\n    public get region(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n\n    public get authorizationToken(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    public set authorizationToken(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    public get speechRecognitionLanguage(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    public set speechRecognitionLanguage(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n\n    public get autoDetectSourceLanguages(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\n    }\n\n    public set autoDetectSourceLanguages(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\n    }\n\n    public get outputFormat(): OutputFormat {\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n\n    public set outputFormat(value: OutputFormat) {\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n\n    public get endpointId(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n\n    public set endpointId(value: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n    }\n\n    public setProperty(name: string | PropertyId, value: string): void {\n        Contracts.throwIfNull(value, \"value\");\n\n        this.privProperties.setProperty(name, value);\n    }\n\n    public getProperty(name: string | PropertyId, def?: string): string {\n\n        return this.privProperties.getProperty(name, def);\n    }\n\n    public setProxy(proxyHostName: string, proxyPort: number): void;\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n    }\n\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n\n        currentProperties[name] = value;\n\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n    }\n\n    public setProfanity(profanity: ProfanityOption): void {\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n    }\n\n    public enableAudioLogging(): void {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n    }\n    public requestWordLevelTimestamps(): void {\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n    }\n    public enableDictation(): void {\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\n    }\n\n    public clone(): SpeechConfigImpl {\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\n        ret.privProperties = this.privProperties.clone();\n        return ret;\n    }\n\n    public get speechSynthesisLanguage(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n    }\n\n    public set speechSynthesisLanguage(language: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n    }\n\n    public get speechSynthesisVoiceName(): string {\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n    }\n\n    public set speechSynthesisVoiceName(voice: string) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n    }\n\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\n        return (SpeechSynthesisOutputFormat as any)[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n    }\n\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ForceDictationPropertyName,\n    OutputFormatPropertyName,\n    ServicePropertiesPropertyName\n} from \"../common.speech/Exports\";\nimport { IStringDictionary } from \"../common/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    OutputFormat,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    ServicePropertyChannel,\n    SpeechConfig, SpeechSynthesisOutputFormat,\n} from \"./Exports\";\n\n/**\n * Speech translation configuration.\n * @class SpeechTranslationConfig\n */\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\n\n    /**\n     * Creates an instance of recognizer config.\n     */\n    protected constructor() {\n        super();\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\n     * @member SpeechTranslationConfig.fromSubscription\n     * @function\n     * @public\n     * @param {string} subscriptionKey - The subscription key.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\n     *       will encounter errors during recognition.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\n     * to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member SpeechTranslationConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param {string} authorizationToken - The authorization token.\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {SpeechTranslationConfig} The speech translation config.\n     */\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return ret;\n    }\n\n    /**\n     * Creates an instance of the speech config with specified host and subscription key.\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\n     * Note: Added in version 1.9.0.\n     * @member SpeechConfig.fromHost\n     * @function\n     * @public\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\n     * @returns {SpeechConfig} A speech factory instance.\n     */\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\n        Contracts.throwIfNull(hostName, \"hostName\");\n\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\n\n        if (undefined !== subscriptionKey) {\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n        return speechImpl;\n    }\n\n    /**\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\n     *       use the authorization token.\n     * @member SpeechTranslationConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key.\n     * @returns {SpeechTranslationConfig} A speech config instance.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\n\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        return ret;\n    }\n\n    /**\n     * Gets/Sets the authorization token.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * @member SpeechTranslationConfig.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set authorizationToken(value: string);\n\n    /**\n     * Gets/Sets the speech recognition language.\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract addTargetLanguage(value: string): void;\n\n    /**\n     * Gets the (text) target language to translate into.\n     * @member SpeechTranslationConfig.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public abstract get targetLanguages(): string[];\n\n    /**\n     * Gets the selected voice name.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} The voice name.\n     */\n    public abstract get voiceName(): string;\n\n    /**\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfig.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public abstract set voiceName(value: string);\n\n    /**\n     * Sets a named property as value\n     * @member SpeechTranslationConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value.\n     */\n    public abstract setProperty(name: string, value: string): void;\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfig.prototype.close\n     * @function\n     * @public\n     */\n    public abstract close(): void;\n}\n\n/**\n * @private\n * @class SpeechTranslationConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\n\n    private privSpeechProperties: PropertyCollection;\n\n    public constructor() {\n        super();\n        this.privSpeechProperties = new PropertyCollection();\n        this.outputFormat = OutputFormat.Simple;\n    }\n    /**\n     * Gets/Sets the authorization token.\n     * If this is set, subscription key is ignored.\n     * User needs to make sure the provided authorization token is valid and not expired.\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set authorizationToken(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * Sets the speech recognition language.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The authorization token.\n     */\n    public set speechRecognitionLanguage(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\n    }\n\n    /**\n     * Gets the speech recognition language.\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @return {string} The speechRecognitionLanguage.\n     */\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\n     * @function\n     * @public\n     */\n    public get subscriptionKey(): string {\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\n    }\n\n    /**\n     * Gets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public get outputFormat(): OutputFormat {\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\n    }\n\n    /**\n     * Gets/Sets the output format\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\n     * @function\n     * @public\n     */\n    public set outputFormat(value: OutputFormat) {\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\n    }\n\n    /**\n     * Gets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public get endpointId(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\n    }\n\n    /**\n     * Gets/Sets the endpoint id.\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\n     * @function\n     * @public\n     */\n    public set endpointId(value: string) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\n    }\n\n    /**\n     * Add a (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public addTargetLanguage(value: string): void {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        const languages: string[] = this.targetLanguages;\n        languages.push(value);\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\n    }\n\n    /**\n     * Gets the (text) target language to translate into.\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\n     * @function\n     * @public\n     * @param {string} value - The language such as de-DE\n     */\n    public get targetLanguages(): string[] {\n\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n        } else {\n            return [];\n        }\n\n    }\n\n    /**\n     * Gets the voice name.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     */\n    public get voiceName(): string {\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n    }\n\n    /**\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\n     * @function\n     * @public\n     * @param {string} value - The name of the voice.\n     */\n    public set voiceName(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\n    }\n\n    /**\n     * Provides the region.\n     * @member SpeechTranslationConfigImpl.prototype.region\n     * @function\n     * @public\n     * @returns {string} The region.\n     */\n    public get region(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\n    }\n\n    public setProxy(proxyHostName: string, proxyPort: number): void;\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\n    }\n\n    /**\n     * Gets an arbitrary property value.\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} def - The default value of the property in case it is not set.\n     * @returns {string} The value of the property.\n     */\n    public getProperty(name: string, def?: string): string {\n        return this.privSpeechProperties.getProperty(name, def);\n    }\n\n    /**\n     * Gets/Sets an arbitrary property value.\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property.\n     * @param {string} value - The value of the property.\n     */\n    public setProperty(name: string | PropertyId, value: string): void {\n        this.privSpeechProperties.setProperty(name, value);\n    }\n\n    /**\n     * Provides access to custom properties.\n     * @member SpeechTranslationConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    public get properties(): PropertyCollection {\n        return this.privSpeechProperties;\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechTranslationConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\n\n        currentProperties[name] = value;\n\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\n    }\n\n    public setProfanity(profanity: ProfanityOption): void {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\n    }\n\n    public enableAudioLogging(): void {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\n    }\n    public requestWordLevelTimestamps(): void {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\n    }\n    public enableDictation(): void {\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\n    }\n\n    public get speechSynthesisLanguage(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\n    }\n\n    public set speechSynthesisLanguage(language: string) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\n    }\n\n    public get speechSynthesisVoiceName(): string {\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\n    }\n\n    public set speechSynthesisVoiceName(voice: string) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\n    }\n\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\n    }\n\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Represents collection of properties and their values.\n * @class PropertyCollection\n */\nexport class PropertyCollection {\n    private privKeys: string[] = [] as string[];\n    private privValues: string[] = [] as string[];\n\n    /**\n     * Returns the property value in type String. The parameter must have the same type as String.\n     * Currently only String, int and bool are allowed.\n     * If the name is not available, the specified defaultValue is returned.\n     * @member PropertyCollection.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} def - The default value which is returned if the parameter\n     *        is not available in the collection.\n     * @returns {string} value of the parameter.\n     */\n    public getProperty(key: PropertyId | string, def?: string): string {\n        let keyToUse: string;\n\n        if (typeof key === \"string\") {\n            keyToUse = key;\n        } else {\n            keyToUse = PropertyId[key];\n        }\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            if (this.privKeys[n] === keyToUse) {\n                return this.privValues[n];\n            }\n        }\n\n        return def;\n    }\n\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member PropertyCollection.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n    public setProperty(key: string | PropertyId, value: string): void {\n        let keyToUse: string;\n\n        if (typeof key === \"string\") {\n            keyToUse = key;\n        } else {\n            keyToUse = PropertyId[key];\n        }\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            if (this.privKeys[n] === keyToUse) {\n                this.privValues[n] = value;\n                return;\n            }\n        }\n\n        this.privKeys.push(keyToUse);\n        this.privValues.push(value);\n    }\n\n    /**\n     * Clones the collection.\n     * @member PropertyCollection.prototype.clone\n     * @function\n     * @public\n     * @returns {PropertyCollection} A copy of the collection.\n     */\n    public clone(): PropertyCollection {\n        const clonedMap = new PropertyCollection();\n\n        for (let n = 0; n < this.privKeys.length; n++) {\n            clonedMap.privKeys.push(this.privKeys[n]);\n            clonedMap.privValues.push(this.privValues[n]);\n        }\n\n        return clonedMap;\n    }\n\n    /**\n     * Merges this set of properties into another, no overwrites.\n     * @member PropertyCollection.prototype.mergeTo\n     * @function\n     * @public\n     * @param {PropertyCollection} The collection to merge into.\n     */\n    public mergeTo(destinationCollection: PropertyCollection): void {\n        this.privKeys.forEach((key: string | PropertyId) => {\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\n                const value = this.getProperty(key);\n                destinationCollection.setProperty(key, value);\n            }\n        });\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines speech property ids.\n * @class PropertyId\n */\nexport enum PropertyId {\n\n    /**\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify\n     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use [[SpeechConfig.fromSubscription]].\n     * @member PropertyId.SpeechServiceConnection_Key\n     */\n    SpeechServiceConnection_Key = 0,\n\n    /**\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use [[SpeechConfig.fromEndpoint]].\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\n     * @member PropertyId.SpeechServiceConnection_Endpoint\n     */\n    SpeechServiceConnection_Endpoint,\n\n    /**\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\n     * use this property directly.\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\n     * @member PropertyId.SpeechServiceConnection_Region\n     */\n    SpeechServiceConnection_Region,\n\n    /**\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\n     * you shouldn't have to use this property directly.\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\n     * @member PropertyId.SpeechServiceAuthorization_Token\n     */\n    SpeechServiceAuthorization_Token,\n\n    /**\n     * The Cognitive Services Speech Service authorization type. Currently unused.\n     * @member PropertyId.SpeechServiceAuthorization_Type\n     */\n    SpeechServiceAuthorization_Type,\n\n    /**\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\n     * have to use this property directly.\n     * Instead, use [[SpeechConfig.endpointId]].\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\n     * @member PropertyId.SpeechServiceConnection_EndpointId\n     */\n    SpeechServiceConnection_EndpointId,\n\n    /**\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\n     * you shouldn't have to use this property directly.\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\n     */\n    SpeechServiceConnection_TranslationToLanguages,\n\n    /**\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\n     * property directly.\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\n     */\n    SpeechServiceConnection_TranslationVoice,\n\n    /**\n     * Translation features.\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\n     */\n    SpeechServiceConnection_TranslationFeatures,\n\n    /**\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\n     * Instead, use [[LanguageUnderstandingModel]].\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\n     */\n    SpeechServiceConnection_IntentRegion,\n\n    /**\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\n     * You shouldn't have to use this property directly.\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\n     * Added in version 1.4.0.\n     */\n    SpeechServiceConnection_ProxyHostName,\n\n    /**\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\n     * You shouldn't have to use this property directly.\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\n     * Added in version 1.4.0.\n     */\n    SpeechServiceConnection_ProxyPort,\n\n    /**\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\n     * You shouldn't have to use this property directly.\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\n     * Added in version 1.4.0.\n     */\n    SpeechServiceConnection_ProxyUserName,\n\n    /**\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\n     * You shouldn't have to use this property directly.\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\n     * Added in version 1.4.0.\n     */\n    SpeechServiceConnection_ProxyPassword,\n\n    /**\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\n     * This property is intended to be read-only. The SDK is using it internally.\n     * @member PropertyId.SpeechServiceConnection_RecoMode\n     */\n    SpeechServiceConnection_RecoMode,\n\n    /**\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\n     * directly.\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\n     */\n    SpeechServiceConnection_RecoLanguage,\n\n    /**\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\n     * property directly.\n     * Instead use [[SessionEventArgs.sessionId]].\n     * @member PropertyId.Speech_SessionId\n     */\n    Speech_SessionId,\n\n    /**\n     * The spoken language to be synthesized (e.g. en-US)\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\n     */\n    SpeechServiceConnection_SynthLanguage,\n\n    /**\n     * The name of the TTS voice to be used for speech synthesis\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\n     */\n    SpeechServiceConnection_SynthVoice,\n\n    /**\n     * The string to specify TTS output audio format\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\n     */\n    SpeechServiceConnection_SynthOutputFormat,\n\n    /**\n     * The list of comma separated languages used as possible source languages\n     * Added in version 1.13.0\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\n     */\n    SpeechServiceConnection_AutoDetectSourceLanguages,\n\n    /**\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\n     * to use this property directly.\n     * Instead use [[SpeechConfig.outputFormat]].\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\n     */\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\n\n    /**\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\n     */\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\n\n    /**\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\n     * @member PropertyId.SpeechServiceResponse_JsonResult\n     */\n    SpeechServiceResponse_JsonResult,\n\n    /**\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\n     */\n    SpeechServiceResponse_JsonErrorDetails,\n\n    /**\n     * The cancellation reason. Currently unused.\n     * @member PropertyId.CancellationDetails_Reason\n     */\n    CancellationDetails_Reason,\n\n    /**\n     * The cancellation text. Currently unused.\n     * @member PropertyId.CancellationDetails_ReasonText\n     */\n    CancellationDetails_ReasonText,\n\n    /**\n     * The Cancellation detailed text. Currently unused.\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\n     */\n    CancellationDetails_ReasonDetailedText,\n\n    /**\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\n     */\n    LanguageUnderstandingServiceResponse_JsonResult,\n\n    /**\n     * The URL string built from speech configuration.\n     * This property is intended to be read-only. The SDK is using it internally.\n     * NOTE: Added in version 1.7.0.\n     */\n    SpeechServiceConnection_Url,\n\n    /**\n     * The initial silence timeout value (in milliseconds) used by the service.\n     * Added in version 1.7.0\n     */\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\n\n    /**\n     * The end silence timeout value (in milliseconds) used by the service.\n     * Added in version 1.7.0\n     */\n    SpeechServiceConnection_EndSilenceTimeoutMs,\n\n    /**\n     * A boolean value specifying whether audio logging is enabled in the service or not.\n     * Added in version 1.7.0\n     */\n    SpeechServiceConnection_EnableAudioLogging,\n\n    /**\n     * The requested Cognitive Services Speech Service response output profanity setting.\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\n     * Added in version 1.7.0.\n     */\n    SpeechServiceResponse_ProfanityOption,\n\n    /**\n     * A string value specifying which post processing option should be used by service.\n     * Allowed values are \"TrueText\".\n     * Added in version 1.7.0\n     */\n    SpeechServiceResponse_PostProcessingOption,\n\n    /**\n     *  A boolean value specifying whether to include word-level timestamps in the response result.\n     * Added in version 1.7.0\n     */\n    SpeechServiceResponse_RequestWordLevelTimestamps,\n\n    /**\n     * The number of times a word has to be in partial results to be returned.\n     * Added in version 1.7.0\n     */\n    SpeechServiceResponse_StablePartialResultThreshold,\n\n    /**\n     * A string value specifying the output format option in the response result. Internal use only.\n     * Added in version 1.7.0.\n     */\n    SpeechServiceResponse_OutputFormatOption,\n\n    /**\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\n     * Added in version 1.7.0.\n     */\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\n\n    /**\n     * Identifier used to connect to the backend service.\n     * @member PropertyId.Conversation_ApplicationId\n     */\n    Conversation_ApplicationId,\n\n    /**\n     * Type of dialog backend to connect to.\n     * @member PropertyId.Conversation_DialogType\n     */\n    Conversation_DialogType,\n\n    /**\n     * Silence timeout for listening\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\n     */\n    Conversation_Initial_Silence_Timeout,\n\n    /**\n     * From Id to add to speech recognition activities.\n     * @member PropertyId.Conversation_From_Id\n     */\n    Conversation_From_Id,\n\n    /**\n     * ConversationId for the session.\n     * @member PropertyId.Conversation_Conversation_Id\n     */\n    Conversation_Conversation_Id,\n\n    /**\n     * Comma separated list of custom voice deployment ids.\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\n     */\n    Conversation_Custom_Voice_Deployment_Ids,\n\n    /**\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\n     * @member PropertyId.Conversation_Speech_Activity_Template\n     * Added in version 1.10.0.\n     */\n    Conversation_Speech_Activity_Template,\n\n    /**\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\n     * Added in version 1.15.0.\n     */\n    Conversation_Request_Bot_Status_Messages,\n\n    /**\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\n     * channel authentication.\n     * Added in version 1.15.1.\n     */\n    Conversation_Agent_Connection_Id,\n\n    /**\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\n     * Instead, use [[SpeechConfig.fromHost]].\n     */\n    SpeechServiceConnection_Host,\n\n    /**\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\n     */\n    ConversationTranslator_Host,\n\n    /**\n     * Optionally set the the host's display name.\n     * Used when joining a conversation.\n     */\n    ConversationTranslator_Name,\n\n    /**\n     * Optionally set a value for the X-CorrelationId request header.\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\n     */\n    ConversationTranslator_CorrelationId,\n\n    /**\n     * Set the conversation token to be sent to the speech service. This enables the\n     * service to service call from the speech service to the Conversation Translator service for relaying\n     * recognitions. For internal use.\n     */\n    ConversationTranslator_Token,\n\n    /**\n     * The reference text of the audio for pronunciation evaluation.\n     * For this and the following pronunciation assessment parameters, see\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\n     * Under normal circumstances, you shouldn't have to use this property directly.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_ReferenceText,\n\n    /**\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\n     * Under normal circumstances, you shouldn't have to use this property directly.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_GradingSystem,\n\n    /**\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\n     * Under normal circumstances, you shouldn't have to use this property directly.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_Granularity,\n\n    /**\n     * Defines if enable miscue calculation.\n     * With this enabled, the pronounced words will be compared to the reference text,\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\n     * Under normal circumstances, you shouldn't have to use this property directly.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_EnableMiscue,\n\n    /**\n     * The json string of pronunciation assessment parameters\n     * Under normal circumstances, you shouldn't have to use this property directly.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_Json,\n\n    /**\n     * Pronunciation assessment parameters.\n     * This property is intended to be read-only. The SDK is using it internally.\n     * Added in version 1.15.0\n     */\n    PronunciationAssessment_Params\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CognitiveSubscriptionKeyAuthentication,\n    CognitiveTokenAuthentication,\n    Context,\n    IAuthentication,\n    IConnectionFactory,\n    OS,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n} from \"../common.speech/Exports\";\nimport {\n    Deferred,\n    marshalPromiseToCallbacks\n} from \"../common/Exports\";\nimport {\n    Contracts\n} from \"./Contracts\";\nimport {\n    AudioConfig,\n    Connection,\n    PropertyCollection,\n    PropertyId,\n    RecognitionEventArgs,\n    SessionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\n\n/**\n * Defines the base class Recognizer which mainly contains common event handlers.\n * @class Recognizer\n */\nexport abstract class Recognizer {\n    private privDisposed: boolean;\n    protected audioConfig: AudioConfig;\n    protected privReco: ServiceRecognizerBase;\n    protected privProperties: PropertyCollection;\n    private privConnectionFactory: IConnectionFactory;\n\n    /**\n     * Creates and initializes an instance of a Recognizer\n     * @constructor\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\n     */\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\n        this.privDisposed = false;\n        this.privProperties = properties.clone();\n        this.privConnectionFactory = connectionFactory;\n        this.implCommonRecognizerSetup();\n    }\n\n    /**\n     * Defines event handler for session started events.\n     * @member Recognizer.prototype.sessionStarted\n     * @function\n     * @public\n     */\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     * @member Recognizer.prototype.sessionStopped\n     * @function\n     * @public\n     */\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech started events.\n     * @member Recognizer.prototype.speechStartDetected\n     * @function\n     * @public\n     */\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Defines event handler for speech stopped events.\n     * @member Recognizer.prototype.speechEndDetected\n     * @function\n     * @public\n     */\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\n\n    /**\n     * Dispose of associated resources.\n     * @member Recognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposed);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * @Internal\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    public get internalData(): object {\n        return this.privReco;\n    }\n\n    /**\n     * This method performs cleanup of resources.\n     * The Boolean parameter disposing indicates whether the method is called\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n     * Derived classes should override this method to dispose resource if needed.\n     * @member Recognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - Flag to request disposal.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposed) {\n            return;\n        }\n\n        this.privDisposed = true;\n\n        if (disposing) {\n            if (this.privReco) {\n                await this.privReco.audioSource.turnOff();\n                await this.privReco.dispose();\n            }\n        }\n    }\n\n    /**\n     * This method returns the current state of the telemetry setting.\n     * @member Recognizer.prototype.telemetryEnabled\n     * @function\n     * @public\n     * @returns true if the telemetry is enabled, false otherwise.\n     */\n    public static get telemetryEnabled(): boolean {\n        return ServiceRecognizerBase.telemetryDataEnabled;\n    }\n\n    /**\n     * This method globally enables or disables telemetry.\n     * @member Recognizer.prototype.enableTelemetry\n     * @function\n     * @public\n     * @param enabled - Global setting for telemetry collection.\n     * If set to true, telemetry information like microphone errors,\n     * recognition errors are collected and sent to Microsoft.\n     * If set to false, no telemetry is sent to Microsoft.\n     */\n    /* tslint:disable:member-ordering */\n    public static enableTelemetry(enabled: boolean): void {\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\n    }\n\n    //\n    // ################################################################################################################\n    // IMPLEMENTATION.\n    // Move to independent class\n    // ################################################################################################################\n    //\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\n\n    // Creates the correct service recognizer for the type\n    protected abstract createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\n\n    // Does the generic recognizer setup that is common across all recognizer types.\n    protected implCommonRecognizerSetup(): void {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const recognizerConfig = this.createRecognizerConfig(\n            new SpeechServiceConfig(\n                new Context(new OS(osPlatform, osName, osVersion))));\n\n        this.privReco = this.createServiceRecognizer(\n            Recognizer.getAuthFromProperties(this.privProperties),\n            this.privConnectionFactory,\n            this.audioConfig,\n            recognizerConfig);\n    }\n\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\n        Contracts.throwIfDisposed(this.privDisposed);\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\n\n        await this.implRecognizerStop();\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\n        const result: SpeechRecognitionResult = await ret.promise;\n        await this.implRecognizerStop();\n\n        return result;\n\n    }\n\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\n        Contracts.throwIfDisposed(this.privDisposed);\n\n        await this.implRecognizerStop();\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\n    }\n\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\n        Contracts.throwIfDisposed(this.privDisposed);\n        await this.implRecognizerStop();\n    }\n\n    protected async implRecognizerStop(): Promise<void> {\n        if (this.privReco) {\n            await this.privReco.stopRecognizing();\n        }\n        return;\n    }\n\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\n            new CognitiveTokenAuthentication(\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return Promise.resolve(authorizationToken);\n                },\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return Promise.resolve(authorizationToken);\n                });\n\n        return authentication;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    OutputFormatPropertyName,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechConnectionFactory,\n    SpeechServiceConfig,\n    SpeechServiceRecognizer,\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    AutoDetectSourceLanguageConfig,\n    KeywordRecognitionModel,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\n * @class SpeechRecognizer\n */\nexport class SpeechRecognizer extends Recognizer {\n    private privDisposedRecognizer: boolean;\n\n    /**\n     * SpeechRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n        Contracts.throwIfNullOrWhitespace(\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\n        this.privDisposedRecognizer = false;\n    }\n\n    /**\n     * SpeechRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\n        return recognizer;\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member SpeechRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member SpeechRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member SpeechRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\n     * @member SpeechRecognizer.prototype.endpointId\n     * @function\n     * @public\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\n     */\n    public get endpointId(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the output format of recognition.\n     * @member SpeechRecognizer.prototype.outputFormat\n     * @function\n     * @public\n     * @returns {OutputFormat} The output format of recognition.\n     */\n    public get outputFormat(): OutputFormat {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\n            return OutputFormat.Simple;\n        } else {\n            return OutputFormat.Detailed;\n        }\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeechRecognizer.\n     * @member SpeechRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts speech recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the SpeechRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until\n     * stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\n     *        specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member SpeechRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member SpeechRecognizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedRecognizer = true;\n            await this.implRecognizerStop();\n        }\n\n        await super.dispose(disposing);\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(\n            speechConfig,\n            this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AddedLmIntent,\n    IAuthentication,\n    IConnectionFactory,\n    IntentConnectionFactory,\n    IntentServiceRecognizer,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    KeywordRecognitionModel,\n    LanguageUnderstandingModel,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SpeechConfig,\n} from \"./Exports\";\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Intent recognizer.\n * @class\n */\nexport class IntentRecognizer extends Recognizer {\n    private privDisposedIntentRecognizer: boolean;\n    private privAddedIntents: string[][];\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privUmbrellaIntent: AddedLmIntent;\n\n    /**\n     * Initializes an instance of the IntentRecognizer.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\n\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\n        this.privAddedIntents = [];\n        this.privAddedLmIntents = {};\n\n        this.privDisposedIntentRecognizer = false;\n        this.privProperties = configImpl.properties;\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member IntentRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member IntentRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member IntentRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} the spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\n     * @member IntentRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * The collection of properties and their values defined for this IntentRecognizer.\n     * @member IntentRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their\n     *          values defined for this IntentRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts intent recognition, and stops after the first utterance is recognized.\n     * The task returns the recognition text and intent as result.\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\n     *       so it is suitable only for single shot recognition like command or query.\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n            const context: IIntentContext = this.buildSpeechContext();\n\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n        }\n\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\n    }\n\n    /**\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\n            const context: IIntentContext = this.buildSpeechContext();\n\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\n\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\n        }\n\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Stops continuous intent recognition.\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    /**\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\n     * User must subscribe to events to receive recognition results.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\n     * @param cb - Callback invoked once the recognition has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        if (!!err) {\n            err(\"Not yet implemented.\");\n        }\n    }\n\n    /**\n     * Stops continuous speech recognition.\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\n     *       This functionality is currently not included in the SDK itself.\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the recognition has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        if (!!cb) {\n            cb();\n        }\n    }\n\n    /**\n     * Adds a phrase that should be recognized as intent.\n     * @member IntentRecognizer.prototype.addIntent\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\n     */\n    public addIntent(simplePhrase: string, intentId?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\n\n        this.privAddedIntents.push([intentId, simplePhrase]);\n    }\n\n    /**\n     * Adds an intent from Language Understanding service for recognition.\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\n     * @function\n     * @public\n     * @param {string} intentId - A String that represents the identifier of the intent\n     *        to be recognized. Ignored if intentName is empty.\n     * @param {string} model - The intent model from Language Understanding service.\n     * @param {string} intentName - The intent name defined in the intent model. If it\n     *        is empty, all intent names defined in the model will be added.\n     */\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\n    }\n\n    /**\n     * @summary Adds all intents from the specified Language Understanding Model.\n     * @member IntentRecognizer.prototype.addAllIntents\n     * @function\n     * @public\n     * @function\n     * @public\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\n     */\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\n        Contracts.throwIfNull(model, \"model\");\n\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\n\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member IntentRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\n\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.properties);\n    }\n\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\n    }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedIntentRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedIntentRecognizer = true;\n            await super.dispose(disposing);\n        }\n    }\n\n    private buildSpeechContext(): IIntentContext {\n        let appId: string;\n        let region: string;\n        let subscriptionKey: string;\n        const refGrammers: string[] = [];\n\n        if (undefined !== this.privUmbrellaIntent) {\n            appId = this.privUmbrellaIntent.modelImpl.appId;\n            region = this.privUmbrellaIntent.modelImpl.region;\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\n        }\n\n        // Build the reference grammer array.\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\n\n            // validate all the same model, region, and key...\n            if (appId === undefined) {\n                appId = addedLmIntent.modelImpl.appId;\n            } else {\n                if (appId !== addedLmIntent.modelImpl.appId) {\n                    throw new Error(\"Intents must all be from the same LUIS model\");\n                }\n            }\n\n            if (region === undefined) {\n                region = addedLmIntent.modelImpl.region;\n            } else {\n                if (region !== addedLmIntent.modelImpl.region) {\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\n                }\n            }\n\n            if (subscriptionKey === undefined) {\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\n            } else {\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\n                    throw new Error(\"Intents must all use the same subscription key\");\n                }\n            }\n\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\n            refGrammers.push(grammer);\n        }\n\n        return {\n            Intent: {\n                id: appId,\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\n                provider: \"LUIS\",\n            },\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\n        };\n    }\n}\n\ninterface IIntentContext {\n    Intent: {\n        id: string,\n        key: string,\n        provider: string,\n    };\n    ReferenceGrammars: string[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Output format\n * @class VoiceProfileType\n */\nexport enum VoiceProfileType {\n\n    /**\n     * Text independent speaker identification\n     * @member VoiceProfileType.TextIndependentIdentification\n     */\n    TextIndependentIdentification,\n\n    /**\n     * Text dependent speaker verification\n     * @member VoiceProfileType.TextDependentVerification\n     */\n    TextDependentVerification,\n\n    /**\n     * Text independent speaker verification\n     * @member VoiceProfileType.TextIndependentVerification\n     */\n    TextIndependentVerification,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n    TranslationConnectionFactory,\n    TranslationServiceRecognizer,\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationSynthesisEventArgs,\n} from \"./Exports\";\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\n\n/**\n * Translation recognizer\n * @class TranslationRecognizer\n */\nexport class TranslationRecognizer extends Recognizer {\n    private privDisposedTranslationRecognizer: boolean;\n\n    /**\n     * Initializes an instance of the TranslationRecognizer.\n     * @constructor\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n     */\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\n\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\n\n        this.privDisposedTranslationRecognizer = false;\n        this.privProperties = configImpl.properties.clone();\n\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            Contracts.throwIfNullOrWhitespace(\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\n        }\n\n        Contracts.throwIfNullOrWhitespace(\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\n\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\n            PropertyId.SpeechServiceConnection_RecoLanguage),\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member TranslationRecognizer.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member TranslationRecognizer.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member TranslationRecognizer.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\n\n    /**\n     * The event synthesizing signals that a translation synthesis result is received.\n     * @member TranslationRecognizer.prototype.synthesizing\n     * @function\n     * @public\n     */\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\n\n    /**\n     * Gets the language name that was set when the recognizer was created.\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} Gets the language name that was set when the recognizer was created.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * Gets target languages for translation that were set when the recognizer was created.\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\n     * @member TranslationRecognizer.prototype.targetLanguages\n     * @function\n     * @public\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\n     */\n    public get targetLanguages(): string[] {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\n    }\n\n    /**\n     * Gets the name of output voice.\n     * @member TranslationRecognizer.prototype.voiceName\n     * @function\n     * @public\n     * @returns {string} the name of output voice.\n     */\n    public get voiceName(): string {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member TranslationRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} value - Authorization token.\n     */\n    public set authorizationToken(value: string) {\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\n    }\n\n    /**\n     * The collection of properties and their values defined for this TranslationRecognizer.\n     * @member TranslationRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts recognition and translation, and stops after the first utterance is recognized.\n     * The task returns the translation text as result.\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\n     *       for single shot recognition like command or query. For long-running recognition,\n     *       use startContinuousRecognitionAsync() instead.\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the translation has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\n     * User must subscribe to events to receive translation results.\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    /**\n     * Stops continuous recognition and translation.\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the translation has stopped.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member TranslationRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\n     * @member TranslationRecognizer.prototype.onConnection\n     * @function\n     * @public\n     */\n    /* tslint:disable:no-empty */\n    public onConnection(): void { }\n\n    /**\n     * handles disconnection events for conversation translation scenarios.\n     * @member TranslationRecognizer.prototype.onDisconnection\n     * @function\n     * @public\n     */\n    /* tslint:disable:no-empty */\n    public async onDisconnection(): Promise<void> { }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedTranslationRecognizer) {\n            return;\n        }\n\n        this.privDisposedTranslationRecognizer = true;\n\n        if (disposing) {\n            await this.implRecognizerStop();\n            await super.dispose(disposing);\n        }\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"./Exports\";\n\n/**\n * Represents collection of parameters and their values.\n * @class Translation\n */\nexport class Translations {\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\n    private privMap: PropertyCollection = new PropertyCollection();\n\n    /**\n     * Returns the parameter value in type String. The parameter must have the same type as String.\n     * Currently only String, int and bool are allowed.\n     * If the name is not available, the specified defaultValue is returned.\n     * @member Translation.prototype.get\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\n     * @returns {string} value of the parameter.\n     */\n    public get(key: string, def?: string): string {\n        return this.privMap.getProperty(key, def);\n    }\n\n    /**\n     * Sets the String value of the parameter specified by name.\n     * @member Translation.prototype.set\n     * @function\n     * @public\n     * @param {string} key - The parameter name.\n     * @param {string} value - The value of the parameter.\n     */\n    public set(key: string, value: string): void {\n        this.privMap.setProperty(key, value);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the possible reasons a recognition result might not be recognized.\n * @class NoMatchReason\n */\nexport enum NoMatchReason {\n\n    /**\n     * Indicates that speech was detected, but not recognized.\n     * @member NoMatchReason.NotRecognized\n     */\n    NotRecognized,\n\n    /**\n     * Indicates that the start of the audio stream contained only silence,\n     * and the service timed out waiting for speech.\n     * @member NoMatchReason.InitialSilenceTimeout\n     */\n    InitialSilenceTimeout,\n\n    /**\n     * Indicates that the start of the audio stream contained only noise,\n     * and the service timed out waiting for speech.\n     * @member NoMatchReason.InitialBabbleTimeout\n     */\n    InitialBabbleTimeout,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports\";\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Contains detailed information for NoMatch recognition results.\n * @class NoMatchDetails\n */\nexport class NoMatchDetails {\n    private privReason: NoMatchReason;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {NoMatchReason} reason - The no-match reason.\n     */\n    private constructor(reason: NoMatchReason) {\n        this.privReason = reason;\n    }\n\n    /**\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\n     * @member NoMatchDetails.fromResult\n     * @function\n     * @public\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\n     *        result - The recognition result that was not recognized.\n     * @returns {NoMatchDetails} The no match details object being created.\n     */\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\n\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\n\n        switch (simpleSpeech.RecognitionStatus) {\n            case RecognitionStatus.BabbleTimeout:\n                reason = NoMatchReason.InitialBabbleTimeout;\n                break;\n            case RecognitionStatus.InitialSilenceTimeout:\n                reason = NoMatchReason.InitialSilenceTimeout;\n                break;\n            default:\n                reason = NoMatchReason.NotRecognized;\n                break;\n        }\n\n        return new NoMatchDetails(reason);\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member NoMatchDetails.prototype.reason\n     * @function\n     * @public\n     * @returns {NoMatchReason} Specifies the reason canceled.\n     */\n    public get reason(): NoMatchReason {\n        return this.privReason;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports\";\n\n/**\n * Define payload of speech recognition canceled result events.\n * @class TranslationRecognitionCanceledEventArgs\n */\nexport class TranslationRecognitionCanceledEventArgs {\n    private privResult: TranslationRecognitionResult;\n    private privSessionId: string;\n    private privCancelReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} sessionid - The session id.\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {TranslationRecognitionResult} result - The result.\n     */\n    public constructor(\n        sessionid: string,\n        cancellationReason: CancellationReason,\n        errorDetails: string,\n        errorCode: CancellationErrorCode,\n        result: TranslationRecognitionResult) {\n        this.privCancelReason = cancellationReason;\n        this.privErrorDetails = errorDetails;\n        this.privResult = result;\n        this.privSessionId = sessionid;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {TranslationRecognitionResult} the recognition result.\n     */\n    public get result(): TranslationRecognitionResult {\n        return this.privResult;\n    }\n\n    /**\n     * Specifies the session identifier.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\n     * @function\n     * @public\n     * @returns {string} the session identifier.\n     */\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privCancelReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationEventArgs } from \"./CancellationEventArgs\";\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports\";\n\n/**\n * Define payload of intent recognition canceled result events.\n * @class IntentRecognitionCanceledEventArgs\n */\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} result - The result of the intent recognition.\n     * @param {string} offset - The offset.\n     * @param {IntentRecognitionResult} sessionId - The session id.\n     */\n    public constructor(\n        reason: CancellationReason,\n        errorDetails: string,\n        errorCode: CancellationErrorCode,\n        result?: IntentRecognitionResult,\n        offset?: number,\n        sessionId?: string) {\n        super(result, offset, sessionId);\n\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get errorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n} from \"./Exports\";\n\n/**\n * Contains detailed information about why a result was canceled.\n * @class CancellationDetailsBase\n */\nexport class CancellationDetailsBase {\n    private privReason: CancellationReason;\n    private privErrorDetails: string;\n    private privErrorCode: CancellationErrorCode;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {CancellationReason} reason - The cancellation reason.\n     * @param {string} errorDetails - The error details, if provided.\n     */\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        this.privReason = reason;\n        this.privErrorDetails = errorDetails;\n        this.privErrorCode = errorCode;\n    }\n\n    /**\n     * The reason the recognition was canceled.\n     * @member CancellationDetailsBase.prototype.reason\n     * @function\n     * @public\n     * @returns {CancellationReason} Specifies the reason canceled.\n     */\n    public get reason(): CancellationReason {\n        return this.privReason;\n    }\n\n    /**\n     * In case of an unsuccessful recognition, provides details of the occurred error.\n     * @member CancellationDetailsBase.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} A String that represents the error details.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    /**\n     * The error code in case of an unsuccessful recognition.\n     * Added in version 1.1.0.\n     * @return An error code that represents the error reason.\n     */\n    public get ErrorCode(): CancellationErrorCode {\n        return this.privErrorCode;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    RecognitionResult,\n    SpeechSynthesisResult\n} from \"./Exports\";\n\n/**\n * Contains detailed information about why a result was canceled.\n * @class CancellationDetails\n */\nexport class CancellationDetails extends CancellationDetailsBase {\n\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        super(reason, errorDetails, errorCode);\n    }\n\n    /**\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\n     * @member CancellationDetails.fromResult\n     * @function\n     * @public\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\n     * @returns {CancellationDetails} The cancellation details object being created.\n     */\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\n        let reason = CancellationReason.Error;\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\n\n        if (result instanceof RecognitionResult && !!result.json) {\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\n        }\n\n        if (!!result.properties) {\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n        }\n\n        return new CancellationDetails(reason, result.errorDetails, errorCode);\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n *  Defines error code in case that CancellationReason is Error.\n *  Added in version 1.1.0.\n */\nexport enum CancellationErrorCode {\n    /**\n     * Indicates that no error occurred during speech recognition.\n     */\n    NoError,\n\n    /**\n     * Indicates an authentication error.\n     */\n    AuthenticationFailure,\n\n    /**\n     * Indicates that one or more recognition parameters are invalid.\n     */\n    BadRequestParameters,\n\n    /**\n     * Indicates that the number of parallel requests exceeded the number of allowed\n     * concurrent transcriptions for the subscription.\n     */\n    TooManyRequests,\n\n    /**\n     * Indicates a connection error.\n     */\n    ConnectionFailure,\n\n    /**\n     * Indicates a time-out error when waiting for response from service.\n     */\n    ServiceTimeout,\n\n    /**\n     * Indicates that an error is returned by the service.\n     */\n    ServiceError,\n\n    /**\n     * Indicates an unexpected runtime error.\n     */\n    RuntimeError,\n}\n","//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport { SessionEventArgs } from \"./Exports\";\n\n/**\n * Defines payload for connection events like Connected/Disconnected.\n * Added in version 1.2.0\n */\nexport class ConnectionEventArgs extends SessionEventArgs {\n}\n","//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport { SessionEventArgs } from \"./Exports\";\n\n/**\n * Defines payload for any Service message event\n * Added in version 1.9.0\n */\n\nexport class ServiceEventArgs extends SessionEventArgs {\n    private privJsonResult: string;\n    private privEventName: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} json - json payload of the USP message.\n     */\n    public constructor(json: string,  name: string, sessionId?: string) {\n        super(sessionId);\n        this.privJsonResult = json;\n        this.privEventName = name;\n    }\n\n    public get jsonString(): string {\n        return this.privJsonResult;\n    }\n\n    public get eventName(): string {\n        return this.privEventName;\n    }\n}\n","//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport {\n    ServiceRecognizerBase,\n    SynthesisAdapterBase,\n} from \"../common.speech/Exports\";\nimport {\n    ConnectionEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    IDetachable,\n    marshalPromiseToCallbacks,\n    ServiceEvent,\n} from \"../common/Exports\";\nimport {\n    ConnectionMessageImpl\n} from \"./ConnectionMessage\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    ConnectionEventArgs,\n    ConnectionMessageEventArgs,\n    Recognizer,\n    ServiceEventArgs,\n    SpeechSynthesizer,\n} from \"./Exports\";\n\n/**\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\n * By default, a Recognizer autonomously manages connection to service when needed.\n * The Connection class provides additional methods for users to explicitly open or close a connection and\n * to subscribe to connection status changes.\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\n * in advance before starting recognition on the Recognizer associated with this Connection.\n * If the Recognizer needs to connect or disconnect to service, it will\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\n * status via Connected/Disconnected events.\n * Added in version 1.2.1.\n */\nexport class Connection {\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\n    private privEventListener: IDetachable;\n    private privServiceEventListener: IDetachable;\n\n    /**\n     * Gets the Connection instance from the specified recognizer.\n     * @param recognizer The recognizer associated with the connection.\n     * @return The Connection instance of the recognizer.\n     */\n    public static fromRecognizer(recognizer: Recognizer): Connection {\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\n\n        const ret: Connection = new Connection();\n\n        ret.privInternalData = recoBase;\n        ret.setupEvents();\n        return ret;\n    }\n\n    /**\n     * Gets the Connection instance from the specified synthesizer.\n     * @param synthesizer The synthesizer associated with the connection.\n     * @return The Connection instance of the synthesizer.\n     */\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\n\n        const ret: Connection = new Connection();\n\n        ret.privInternalData = synthBase;\n        ret.setupEvents();\n        return ret;\n    }\n\n    /**\n     * Starts to set up connection to the service.\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\n     *\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n     * be notified when the connection is established.\n     */\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\n    }\n\n    /**\n     * Closes the connection the service.\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\n     *\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\n     */\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\n        } else {\n            marshalPromiseToCallbacks((this.privInternalData as ServiceRecognizerBase).disconnect(), cb, err);\n        }\n    }\n\n    /**\n     * Appends a parameter in a message to service.\n     * Added in version 1.12.1.\n     * @param path The path of the network message.\n     * @param propertyName Name of the property\n     * @param propertyValue Value of the property. This is a json string.\n     */\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string): void {\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\n\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\n            if (path.toLowerCase() !== \"speech.context\") {\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\n            } else {\n                (this.privInternalData as ServiceRecognizerBase).speechContext.setSection(propertyName, propertyValue);\n            }\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\n            if (path.toLowerCase() !== \"synthesis.context\") {\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\n            } else {\n                (this.privInternalData as SynthesisAdapterBase).synthesisContext.setSection(propertyName, propertyValue);\n            }\n        }\n    }\n\n    /**\n     * Sends a message to the speech service.\n     * Added in version 1.13.0.\n     * @param path The WebSocket path of the message\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\n     * @param success A callback to indicate success.\n     * @param error A callback to indicate an error.\n     */\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\n    }\n\n    /**\n     * Any message from service that is not being processed by any other top level recognizers.\n     *\n     * Will be removed in 2.0.\n     */\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\n\n    /**\n     * Any message received from the Speech Service.\n     */\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\n\n    /**\n     * Any message sent to the Speech Service.\n     */\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\n\n    /**\n     * The Connected event to indicate that the recognizer is connected to service.\n     */\n    public connected: (args: ConnectionEventArgs) => void;\n\n    /**\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\n     */\n    public disconnected: (args: ConnectionEventArgs) => void;\n\n    /**\n     * Dispose of associated resources.\n     */\n    public close(): void {\n        /* tslint:disable:no-empty */\n    }\n\n    private setupEvents(): void {\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n                if (!!this.connected) {\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\n                }\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                if (!!this.disconnected) {\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\n                }\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\n                if (!!this.messageSent) {\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\n                }\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\n                if (!!this.messageReceived) {\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\n                }\n            }\n        });\n\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\n            if (!!this.receivedServiceMessage) {\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\n            }\n        });\n    }\n}\n","//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport {\n    ConnectionMessage as IntConnectionMessage,\n    MessageType\n} from \"../common/Exports\";\nimport {\n    PropertyCollection\n} from \"./PropertyCollection\";\nimport { PropertyId } from \"./PropertyId\";\n\n/**\n * ConnectionMessage represents implementation specific messages sent to and received from\n * the speech service. These messages are provided for debugging purposes and should not\n * be used for production use cases with the Azure Cognitive Services Speech Service.\n * Messages sent to and received from the Speech Service are subject to change without\n * notice. This includes message contents, headers, payloads, ordering, etc.\n * Added in version 1.11.0.\n */\nexport abstract class ConnectionMessage {\n    /**\n     * The message path.\n     */\n    public abstract get path(): string;\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public abstract get isTextMessage(): boolean;\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public abstract get isBinaryMessage(): boolean;\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public abstract get TextMessage(): string;\n\n    /**\n     * Gets the binary message payload.\n     */\n    public abstract get binaryMessage(): ArrayBuffer;\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public abstract get properties(): PropertyCollection;\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public abstract toString(): string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConnectionMessageImpl {\n\n    private privConnectionMessage: IntConnectionMessage;\n    private privProperties: PropertyCollection;\n\n    constructor(message: IntConnectionMessage) {\n        this.privConnectionMessage = message;\n        this.privProperties = new PropertyCollection();\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\n        }\n\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string, index: number, array: string[]): void => {\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\n        });\n    }\n\n    /**\n     * The message path.\n     */\n    public get path(): string {\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string) => key.toLowerCase() === \"path\".toLowerCase())];\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a text message.\n     * See also IsBinaryMessage().\n     */\n    public get isTextMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Text;\n    }\n\n    /**\n     * Checks to see if the ConnectionMessage is a binary message.\n     * See also GetBinaryMessage().\n     */\n    public get isBinaryMessage(): boolean {\n        return this.privConnectionMessage.messageType === MessageType.Binary;\n    }\n\n    /**\n     * Gets the text message payload. Typically the text message content-type is\n     * application/json. To determine other content-types use\n     * Properties.GetProperty(\"Content-Type\").\n     */\n    public get TextMessage(): string {\n        return this.privConnectionMessage.textBody;\n    }\n\n    /**\n     * Gets the binary message payload.\n     */\n    public get binaryMessage(): ArrayBuffer {\n        return this.privConnectionMessage.binaryBody;\n    }\n\n    /**\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Returns a string that represents the connection message.\n     */\n    public toString(): string {\n        return \"\";\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    DynamicGrammarBuilder,\n    ServiceRecognizerBase,\n} from \"../common.speech/Exports\";\nimport { Recognizer } from \"./Exports\";\n\n/**\n * Allows additions of new phrases to improve speech recognition.\n *\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\n * to the speech service.\n */\nexport class PhraseListGrammar {\n    private privGrammerBuilder: DynamicGrammarBuilder;\n\n    private constructor(recogBase: ServiceRecognizerBase) {\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\n    }\n\n    /**\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\n     * @param recognizer The recognizer to add phrase lists to.\n     */\n    public static fromRecognizer(recognizer: Recognizer): PhraseListGrammar {\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\n\n        return new PhraseListGrammar(recoBase);\n    }\n\n    /**\n     * Adds a single phrase to the current recognizer.\n     * @param phrase Phrase to add.\n     */\n    public addPhrase(phrase: string): void {\n        this.privGrammerBuilder.addPhrase(phrase);\n    }\n\n    /**\n     * Adds multiple phrases to the current recognizer.\n     * @param phrases Array of phrases to add.\n     */\n    public addPhrases(phrases: string[]): void {\n        this.privGrammerBuilder.addPhrase(phrases);\n    }\n\n    /**\n     * Clears all phrases added to the current recognizer.\n     */\n    public clear(): void {\n        this.privGrammerBuilder.clearPhrases();\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\nimport { OutputFormat } from \"./OutputFormat\";\n\n/**\n * Class that defines base configurations for dialog service connector\n * @class DialogServiceConfig\n */\nexport abstract class DialogServiceConfig {\n\n    /**\n     * Creates an instance of DialogService config.\n     * @constructor\n     */\n    protected constructor() { }\n\n    /**\n     * Sets an arbitrary property.\n     * @member DialogServiceConfig.prototype.setProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to set.\n     * @param {string} value - The new value of the property.\n     */\n    public abstract setProperty(name: string | PropertyId, value: string): void;\n\n    /**\n     * Returns the current value of an arbitrary property.\n     * @member DialogServiceConfig.prototype.getProperty\n     * @function\n     * @public\n     * @param {string} name - The name of the property to query.\n     * @param {string} def - The value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\n\n    /**\n     * @member DialogServiceConfig.prototype.setServiceProperty\n     * @function\n     * @public\n     * @param {name} The name of the property.\n     * @param {value} Value to set.\n     * @param {channel} The channel used to pass the specified property to service.\n     * @summary Sets a property value that will be passed to service using the specified channel.\n     */\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server.\n     * @param proxyPort The port number of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param porxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\n\n    /**\n     * Returns the configured language.\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public abstract get speechRecognitionLanguage(): string;\n\n    /**\n     * Gets/Sets the input language.\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to use for recognition.\n     */\n    public abstract set speechRecognitionLanguage(value: string);\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    // tslint:disable-next-line: no-empty\n    public set applicationId(value: string) { }\n\n    public static DialogTypes: any = class {\n        public static BotFramework: string = \"bot_framework\";\n        public static CustomCommands: string = \"custom_commands\";\n    };\n}\n\n/**\n * Dialog Service configuration.\n * @class DialogServiceConfigImpl\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\n\n    private privSpeechConfig: SpeechConfigImpl;\n\n    /**\n     * Creates an instance of dialogService config.\n     */\n    public constructor() {\n        super();\n        this.privSpeechConfig = new SpeechConfigImpl();\n    }\n\n    /**\n     * Provides access to custom properties.\n     * @member DialogServiceConfigImpl.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The properties.\n     */\n    public get properties(): PropertyCollection {\n        return this.privSpeechConfig.properties;\n    }\n\n    /**\n     * Gets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     */\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechConfig.speechRecognitionLanguage;\n    }\n\n    /**\n     * Sets the speech recognition language.\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @param {string} value - The language to set.\n     */\n    public set speechRecognitionLanguage(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.privSpeechConfig.speechRecognitionLanguage = value;\n    }\n\n    public get outputFormat(): OutputFormat {\n        return this.privSpeechConfig.outputFormat;\n    }\n\n    public set outputFormat(value: OutputFormat) {\n        this.privSpeechConfig.outputFormat = value;\n    }\n\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.setProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to set.\n     * @param {string} value - The value.\n     */\n    public setProperty(name: string | PropertyId, value: string): void {\n        this.privSpeechConfig.setProperty(name, value);\n    }\n\n    /**\n     * Sets a named property as value\n     * @member DialogServiceConfigImpl.prototype.getProperty\n     * @function\n     * @public\n     * @param {PropertyId | string} name - The property to get.\n     * @param {string} def - The default value to return in case the property is not known.\n     * @returns {string} The current value, or provided default, of the given property.\n     */\n    public getProperty(name: string | PropertyId, def?: string): string {\n        return this.privSpeechConfig.getProperty(name);\n    }\n\n    /**\n     * Sets the proxy configuration.\n     * Only relevant in Node.js environments.\n     * Added in version 1.4.0.\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\n     * @param proxyPort The port number of the proxy server.\n     * @param proxyUserName The user name of the proxy server.\n     * @param proxyPassword The password of the proxy server.\n     */\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\n        if (proxyUserName) {\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\n        }\n        if (proxyPassword) {\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\n        }\n    }\n\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member DialogServiceConfigImpl.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\n * @class BotFrameworkConfig\n */\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\n\n    /**\n     * Creates an instance of BotFrameworkConfig.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Creates a bot framework configuration instance with the provided subscription information.\n     * @member BotFrameworkConfig.fromSubscription\n     * @function\n     * @public\n     * @param subscription Subscription key associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     *        resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n\n        if (botId) {\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates a bot framework configuration instance for the specified authorization token and region.\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\n     *       caller must refresh it by setting the authorizationToken property on the corresponding\n     *       DialogServiceConnector instance created with this config. The contents of configuration objects are copied\n     *       when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\n     *       original configuration's authorization token. Create a new configuration instance or set the\n     *       SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\n     *       further DialogServiceConnectors.\n     * @member BotFrameworkConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param authorizationToken The authorization token associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     *        resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromAuthorizationToken(\n        authorizationToken: string, region: string, botId?: string\n    ): BotFrameworkConfig {\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n\n        if (botId) {\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates an instance of a BotFrameworkConfig.\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\n     *       property on the created BotFrameworkConfig instance.\n     * Note: Added in version 1.15.0.\n     * @member BotFrameworkConfig.fromHost\n     * @function\n     * @public\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\n     *        wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\n     *        wss://{host}.convai.speech.azure.us.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n     *        token must be set.\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\n     *        resource name.\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\n     */\n    public static fromHost(\n        host: URL | string,\n        subscriptionKey?: string,\n        botId?: string): BotFrameworkConfig {\n\n        Contracts.throwIfNullOrUndefined(host, \"host\");\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\n\n        if (undefined !== subscriptionKey) {\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n\n        return botFrameworkConfig;\n    }\n\n    /**\n     * Creates an instance of a BotFrameworkConfig.\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\n     *       use the authorization token.\n     * Note: Added in version 1.15.0.\n     * @member BotFrameworkConfig.fromEndpoint\n     * @function\n     * @public\n     * @param {URL} endpoint - The service endpoint to connect to.\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\n     *        token must be set.\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\n     */\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\n        Contracts.throwIfNull(endpoint, \"endpoint\");\n\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\n        botFrameworkConfig.setProperty(\n            PropertyId.Conversation_DialogType,\n            DialogServiceConfig.DialogTypes.BotFramework);\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\n\n        if (undefined !== subscriptionKey) {\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\n        }\n\n        return botFrameworkConfig;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport { PropertyId } from \"./Exports\";\n\n/**\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\n * @class CustomCommandsConfig\n */\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\n\n    /**\n     * Creates an instance of CustomCommandsConfig.\n     */\n    public constructor() {\n        super();\n    }\n\n    /**\n     * Creates an instance of the bot framework config with the specified subscription and region.\n     * @member CustomCommandsConfig.fromSubscription\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param subscription Subscription key associated with the bot\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new bot framework config.\n     */\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    }\n\n    /**\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\n     * @member CustomCommandsConfig.fromAuthorizationToken\n     * @function\n     * @public\n     * @param applicationId Speech Commands application id.\n     * @param authorizationToken The authorization token associated with the application.\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\n     * @returns {CustomCommandsConfig} A new speech commands config.\n     */\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\n\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\n        return customCommandsConfig;\n    }\n\n    /**\n     * Sets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to set.\n     */\n    public set applicationId(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\n    }\n\n    /**\n     * Gets the corresponding backend application identifier.\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\n     * @function\n     * @public\n     * @param {string} value - The application identifier to get.\n     */\n    public get applicationId(): string {\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\nimport {\n    DialogServiceAdapter,\n    IAgentConfig,\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n} from \"../common.speech/Exports\";\nimport {\n    Deferred,\n    marshalPromiseToCallbacks\n} from \"../common/Exports\";\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\nimport { Contracts } from \"./Contracts\";\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\nimport {\n    AudioConfig,\n    PropertyCollection,\n    Recognizer,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult\n} from \"./Exports\";\nimport { PropertyId } from \"./PropertyId\";\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\n\n/**\n * Dialog Service Connector\n * @class DialogServiceConnector\n */\nexport class DialogServiceConnector extends Recognizer {\n    private privIsDisposed: boolean;\n    private isTurnComplete: boolean;\n\n    /**\n     * Initializes an instance of the DialogServiceConnector.\n     * @constructor\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\n     */\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\n\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\n\n        this.isTurnComplete = true;\n        this.privIsDisposed = false;\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\n\n        const agentConfig = this.buildAgentConfig();\n        this.privReco.agentConfig.set(agentConfig);\n    }\n\n    /**\n     * The event recognizing signals that an intermediate recognition result is received.\n     * @member DialogServiceConnector.prototype.recognizing\n     * @function\n     * @public\n     */\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event recognized signals that a final recognition result is received.\n     * @member DialogServiceConfig.prototype.recognized\n     * @function\n     * @public\n     */\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\n\n    /**\n     * The event canceled signals that an error occurred during recognition.\n     * @member DialogServiceConnector.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\n\n    /**\n     * The event activityReceived signals that an activity has been received.\n     * @member DialogServiceConnector.prototype.activityReceived\n     * @function\n     * @public\n     */\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\n\n    /**\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\n     * or other problem.\n     * @member DialogServiceConnector.prototype.turnStatusReceived\n     * @function\n     * @public\n     */\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\n\n    /**\n     * Starts a connection to the service.\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\n     *\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\n     * be notified when the connection is established.\n     * @member DialogServiceConnector.prototype.connect\n     * @function\n     * @public\n     */\n    public connect(cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\n    }\n\n    /**\n     * Closes the connection the service.\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\n     *\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\n     */\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\n    }\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Sets the authorization token used to communicate with the service.\n     * @member DialogServiceConnector.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this DialogServiceConnector.\n     * @member DialogServiceConnector.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /** Gets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be empty\n     */\n    public get speechActivityTemplate(): string {\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n    }\n\n    /** Sets the template for the activity generated by service from speech.\n     * Properties from the template will be stamped on the generated activity.\n     * It can be null or empty.\n     * Note: it has to be a valid Json object.\n     */\n    public set speechActivityTemplate(speechActivityTemplate: string) {\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\n    }\n\n    /**\n     * Starts recognition and stops after the first utterance is recognized.\n     * @member DialogServiceConnector.prototype.listenOnceAsync\n     * @function\n     * @public\n     * @param cb - Callback that received the result when the reco has completed.\n     * @param err - Callback invoked in case of an error.\n     */\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\n        if (this.isTurnComplete) {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\n                await this.privReco.connect();\n                await this.implRecognizerStop();\n                this.isTurnComplete = false;\n\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\n\n                const e: SpeechRecognitionResult = await ret.promise;\n                await this.implRecognizerStop();\n\n                return e;\n            };\n\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\n\n            retPromise.catch(() => {\n                // Destroy the recognizer.\n                /* tslint:disable:no-empty */ // We've done all we can here.\n                this.dispose(true).catch(() => { });\n            });\n\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\n                this.isTurnComplete = true;\n            }), cb, err);\n        }\n    }\n\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member DialogServiceConnector.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\n    }\n\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privIsDisposed) {\n            return;\n        }\n\n        if (disposing) {\n            this.privIsDisposed = true;\n            await this.implRecognizerStop();\n            await super.dispose(disposing);\n        }\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n    }\n\n    private buildAgentConfig(): IAgentConfig {\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\n\n        return {\n            botInfo: {\n                commType: communicationType,\n                commandsCulture: undefined,\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\n            },\n            version: 0.2\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\n\n    private static Constants: any = class {\n        private static ApiKey: string = \"api\";\n        private static BaseUrl: string = \"convai.speech\";\n    };\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\n\n        const queryParams: IStringDictionary<string> = {};\n        queryParams[HeaderNames.ConnectionId] = connectionId;\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n        queryParams[QueryParameterNames.Language] = language;\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\n        if (applicationId) {\n            queryParams[QueryParameterNames.BotId] = applicationId;\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\n            }\n        }\n\n        const resourceInfix: string =\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\n            : \"\";\n        const version: string =\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\n            : \"v0\";\n\n        const headers: IStringDictionary<string> = {};\n\n        if (authInfo.token != null && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n\n        // The URL used for connection is chosen in a priority order of specification:\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\n        if (!endpoint) {\n            const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n            const host: string = config.parameters.getProperty(\n                PropertyId.SpeechServiceConnection_Host,\n                `wss://${region}.${DialogConnectionFactory.Constants.BaseUrl}${hostSuffix}`);\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.Constants.ApiKey}/${version}`;\n        }\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ServicePropertiesPropertyName,\n} from \"../common.speech/Exports\";\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\n    public abstract create(\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection;\n\n    protected setCommonUrlParams(\n        config: RecognizerConfig,\n        queryParams: IStringDictionary<string>,\n        endpoint: string): void {\n\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\n            QueryParameterNames.EnableAudioLogging,\n            config,\n            queryParams,\n            endpoint);\n\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\n            QueryParameterNames.EnableWordLevelTimestamps,\n            config,\n            queryParams,\n            endpoint);\n\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\n            QueryParameterNames.Profanity,\n            config,\n            queryParams,\n            endpoint);\n\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\n            QueryParameterNames.InitialSilenceTimeoutMs,\n            config,\n            queryParams,\n            endpoint);\n\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\n            QueryParameterNames.EndSilenceTimeoutMs,\n            config,\n            queryParams,\n            endpoint);\n\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\n            QueryParameterNames.StableIntermediateThreshold,\n            config,\n            queryParams,\n            endpoint);\n\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\n\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\n            queryParams[value] = serviceProperties[value];\n        });\n    }\n\n    protected setUrlParameter(\n        propId: PropertyId,\n        parameterName: string,\n        config: RecognizerConfig,\n        queryParams: IStringDictionary<string>,\n        endpoint: string): void {\n\n        const value: string = config.parameters.getProperty(propId, undefined);\n\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\n            queryParams[parameterName] = value.toLocaleLowerCase();\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport class QueryParameterNames {\n    public static BotId: string = \"botid\";\n    public static CustomSpeechDeploymentId: string = \"cid\";\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\n    public static EnableAudioLogging: string = \"storeAudio\";\n    public static EnableLanguageId: string = \"lidEnabled\";\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\n    public static Format: string = \"format\";\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\n    public static Language: string = \"language\";\n    public static Profanity: string = \"profanity\";\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\n    public static StableTranslation: string = \"stableTranslation\";\n    public static TestHooks: string = \"testhooks\";\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream\";\n\n/**\n * Defines contents of received message/events.\n * @class ActivityReceivedEventArgs\n */\nexport class ActivityReceivedEventArgs {\n    private privActivity: any;\n    private privAudioStream: PullAudioOutputStream;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {any} activity - The activity..\n     */\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\n        this.privActivity = activity;\n        this.privAudioStream = audioStream;\n    }\n\n    /**\n     * Gets the received activity\n     * @member ActivityReceivedEventArgs.prototype.activity\n     * @function\n     * @public\n     * @returns {any} the received activity.\n     */\n    public get activity(): any {\n        return this.privActivity;\n    }\n\n    public get audioStream(): PullAudioOutputStream {\n        return this.privAudioStream;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ITurnStatusResponsePayload,\n    TurnStatusResponsePayload\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload\";\n\n/**\n * Defines contents of received message/events.\n * @class TurnStatusReceivedEventArgs\n */\nexport class TurnStatusReceivedEventArgs {\n    private privTurnStatus: ITurnStatusResponsePayload;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} turnStatus - The JSON-encoded turn status message.\n     */\n    public constructor(turnStatus: string) {\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\n    }\n\n    /**\n     * Gets the interaction identifier associated with this turn status event.\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\n     * @function\n     * @public\n     * @returns {any} the received interaction id.\n     */\n    public get interactionId(): any {\n        return this.privTurnStatus.interactionId;\n    }\n\n    /**\n     * Gets the conversation identifier associated with this turn status event.\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\n     * @function\n     * @public\n     * @returns {any} the received conversation id.\n     */\n    public get conversationId(): any {\n        return this.privTurnStatus.conversationId;\n    }\n\n    /**\n     * Gets the received turn status code.\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\n     * @function\n     * @public\n     * @returns {number} the received turn status.\n     */\n    public get statusCode(): number {\n        return this.privTurnStatus.statusCode;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport interface ITurnStatusResponsePayload {\n    interactionId: string;\n    conversationId: string;\n    statusCode: any;\n}\n\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\n\n    private constructor(json: string) {\n        this.privMessageStatusResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): TurnStatusResponsePayload {\n        return new TurnStatusResponsePayload(json);\n    }\n\n    public get interactionId(): string {\n        return this.privMessageStatusResponse.interactionId;\n    }\n\n    public get conversationId(): string {\n        return this.privMessageStatusResponse.conversationId;\n    }\n\n    public get statusCode(): any {\n        // Payloads may contain a limited set of textual representations or a numeric status\n        // code. The textual values are here converted into numeric ones.\n        switch (this.privMessageStatusResponse.statusCode) {\n            case \"Success\":\n                return 200;\n            case \"Failed\":\n                return 400;\n            case \"TimedOut\":\n                return 429;\n            default:\n                return this.privMessageStatusResponse.statusCode;\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Defines channels used to pass property settings to service.\n * Added in version 1.7.0.\n */\nexport enum ServicePropertyChannel {\n    /**\n     * Uses URI query parameter to pass property settings to service.\n     */\n    UriQueryParameter = 0.\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Profanity option.\n * Added in version 1.7.0.\n */\nexport enum ProfanityOption {\n    Masked = 0,\n    Removed = 1,\n    Raw = 2\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"../../common/Error\";\nimport { marshalPromiseToCallbacks } from \"../../common/Promise\";\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\n\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\n/**\n * Base audio player class\n * TODO: Plays only PCM for now.\n * @class\n */\nexport class BaseAudioPlayer {\n\n    private audioContext: AudioContext = null;\n    private gainNode: GainNode = null;\n    private audioFormat: AudioStreamFormatImpl;\n    private autoUpdateBufferTimer: any = 0;\n    private samples: Float32Array;\n    private startTime: number;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\n     */\n    public constructor(audioFormat?: AudioStreamFormat) {\n        if (audioFormat === undefined) {\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\n        }\n        this.init(audioFormat);\n    }\n\n    /**\n     * play Audio sample\n     * @param newAudioData audio data to be played.\n     */\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n                this.ensureInitializedContext();\n                const audioData = this.formatAudioData(newAudioData);\n                const newSamplesData = new Float32Array(this.samples.length + audioData.length);\n                newSamplesData.set(this.samples, 0);\n                newSamplesData.set(audioData, this.samples.length);\n                this.samples = newSamplesData;\n        })(), cb, err);\n    }\n\n    /**\n     * stops audio and clears the buffers\n     */\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\n        if (this.audioContext !== null) {\n            this.samples = new Float32Array();\n            clearInterval(this.autoUpdateBufferTimer);\n            this.audioContext.close().then(() => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string) => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n            this.audioContext = null;\n        }\n    }\n\n    private init(audioFormat: AudioStreamFormat): void {\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\n        this.samples = new Float32Array();\n    }\n\n    private ensureInitializedContext(): void {\n        if (this.audioContext === null) {\n            this.createAudioContext();\n            const timerPeriod = 200;\n            this.autoUpdateBufferTimer = setInterval(() => {\n                this.updateAudioBuffer();\n            }, timerPeriod);\n        }\n    }\n\n    private createAudioContext(): void {\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\n\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\n        // to control the volume, not likely\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.value = 1;\n        this.gainNode.connect(this.audioContext.destination);\n        this.startTime = this.audioContext.currentTime;\n    }\n\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\n        switch (this.audioFormat.bitsPerSample) {\n            case 8:\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\n            case 16:\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\n            case 32:\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\n            default:\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\n        }\n    }\n\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\n        const float32Data = new Float32Array(audioData.length);\n        for (let i = 0; i < audioData.length; i++) {\n            float32Data[i] = audioData[i] / maxValue;\n        }\n        return float32Data;\n    }\n\n    private updateAudioBuffer(): void {\n        if (this.samples.length === 0) {\n            return;\n        }\n\n        const channelCount = this.audioFormat.channels;\n        const bufferSource = this.audioContext.createBufferSource();\n        const frameCount = this.samples.length / channelCount;\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\n\n        // TODO: Should we do the conversion in the pushAudioSample instead?\n        for (let channel = 0; channel < channelCount; channel++) {\n            // Fill in individual channel data\n            let channelOffset = channel;\n            const audioData = audioBuffer.getChannelData(channel);\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\n                audioData[i] = this.samples[channelOffset];\n            }\n        }\n\n        if (this.startTime < this.audioContext.currentTime) {\n            this.startTime = this.audioContext.currentTime;\n        }\n\n        bufferSource.buffer = audioBuffer;\n        bufferSource.connect(this.gainNode);\n        bufferSource.start(this.startTime);\n\n        // Make sure we play the next sample after the current one.\n        this.startTime += audioBuffer.duration;\n\n        // Clear the samples for the next pushed data.\n        this.samples = new Float32Array();\n    }\n\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\n        if (this.audioContext === null) {\n            this.createAudioContext();\n        }\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\n        const destination: AudioDestinationNode = this.audioContext.destination;\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\n            source.buffer = newBuffer;\n            source.connect(destination);\n            source.start(0);\n        });\n    }\n}\n","//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\n//\n\nimport {\n    ConnectionMessage,\n    SessionEventArgs\n} from \"./Exports\";\n\nexport class ConnectionMessageEventArgs {\n\n    private privConnectionMessage: ConnectionMessage;\n\n    constructor(message: ConnectionMessage) {\n        this.privConnectionMessage = message;\n    }\n\n    /**\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\n     */\n    public get message(): ConnectionMessage {\n        return this.privConnectionMessage;\n    }\n\n    /**\n     * Returns a string that represents the connection message event.\n     */\n    public toString(): string {\n        return \"Message: \" + this.privConnectionMessage.toString();\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { VoiceProfileType } from \"./Exports\";\n\n/**\n * Defines Voice Profile class for Speaker Recognition\n * @class VoiceProfile\n */\nexport class VoiceProfile {\n    private privId: string;\n    private privProfileType: VoiceProfileType;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} profileId - profileId of this Voice Profile.\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\n     */\n    constructor(profileId: string, profileType: VoiceProfileType) {\n        this.privId = profileId;\n        this.privProfileType = profileType;\n    }\n\n    /**\n     * profileId of this Voice Profile instance\n     * @member VoiceProfile.prototype.profileId\n     * @function\n     * @public\n     * @returns {string} profileId of this Voice Profile instance.\n     */\n    public get profileId(): string {\n        return this.privId;\n    }\n\n    /**\n     * profileType of this Voice Profile instance\n     * @member VoiceProfile.prototype.profileType\n     * @function\n     * @public\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\n     */\n    public get profileType(): VoiceProfileType {\n        return this.privProfileType;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    CancellationDetailsBase,\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    ResultReason,\n} from \"./Exports\";\n\nexport interface EnrollmentResultDetails {\n    profileId: string;\n    enrollmentsCount: number;\n    enrollmentsLength: number;\n    enrollmentsSpeechLength: number;\n    remainingEnrollmentsCount: number;\n    remainingEnrollmentsSpeechLength: number;\n    audioLength: number;\n    audioSpeechLength: number;\n    enrollmentStatus: string;\n}\n\n/**\n * Output format\n * @class VoiceProfileEnrollmentResult\n */\nexport class VoiceProfileEnrollmentResult {\n    private privReason: ResultReason;\n    private privDetails: EnrollmentResultDetails;\n    private privProperties: PropertyCollection;\n    private privErrorDetails: string;\n\n    public constructor(reason: ResultReason, json: string, statusText: string) {\n        this.privReason = reason;\n        this.privProperties = new PropertyCollection();\n        if (this.privReason !== ResultReason.Canceled) {\n            if (!!json) {\n                this.privDetails = JSON.parse(json);\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\n                }\n            }\n        } else {\n            this.privErrorDetails = statusText;\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\n        }\n    }\n\n    public static FromIdentificationProfileList(json: { profiles: any[] }): VoiceProfileEnrollmentResult[] {\n        const results: VoiceProfileEnrollmentResult[] = [];\n        for (const item of json.profiles) {\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\n            result.privDetails = this.getIdentificationDetails(item);\n            results.push(result);\n        }\n        return results;\n    }\n\n    public static FromVerificationProfileList(json: { profiles: any[] }): VoiceProfileEnrollmentResult[] {\n        const results: VoiceProfileEnrollmentResult[] = [];\n        for (const item of json.profiles) {\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\n            result.privDetails = this.getVerificationDetails(item);\n            results.push(result);\n        }\n        return results;\n    }\n\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    public get enrollmentsCount(): number {\n        return this.privDetails.enrollmentsCount;\n    }\n\n    public get enrollmentsLength(): number {\n        return this.privDetails.enrollmentsLength;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\n        return this.privDetails;\n    }\n\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    private static getIdentificationDetails(json: any): any {\n        return {\n            audioSpeechLength: json.speechTime ? parseFloat(json.speechTime) : 0,\n            enrollmentStatus: json.enrollmentStatus,\n            enrollmentsLength: json.enrollmentSpeechTime ? parseFloat(json.enrollmentSpeechTime) : 0,\n            profileId: json.profileId || json.identificationProfileId,\n            remainingEnrollmentSpeechLength: json.remainingEnrollmentSpeechTime ? parseFloat(json.remainingEnrollmentSpeechTime) : 0\n        };\n    }\n\n    private static getVerificationDetails(json: any): any {\n        return {\n            enrollmentStatus: json.enrollmentStatus,\n            enrollmentsCount: json.enrollmentsCount,\n            profileId: json.profileId || json.verificationProfileId,\n            remainingEnrollmentSpeechLength: json.remainingEnrollmentSpeechLength ? parseFloat(json.remainingEnrollmentSpeechLength) : 0,\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount\n        };\n    }\n}\n\n/**\n * @class VoiceProfileEnrollmentCancellationDetails\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\n\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        super(reason, errorDetails, errorCode);\n    }\n\n    /**\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\n     * @function\n     * @public\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\n     */\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\n        const reason = CancellationReason.Error;\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\n\n        if (!!result.properties) {\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n        }\n\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    CancellationDetailsBase,\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    ResultReason,\n} from \"./Exports\";\n\n/**\n * Output format\n * @class VoiceProfileResult\n */\nexport class VoiceProfileResult {\n    private privReason: ResultReason;\n    private privProperties: PropertyCollection;\n    private privErrorDetails: string;\n\n    public constructor(reason: ResultReason, statusText: string) {\n        this.privReason = reason;\n        this.privProperties = new PropertyCollection();\n        if (reason === ResultReason.Canceled) {\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\n            this.privErrorDetails = statusText;\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\n        }\n    }\n\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n}\n\n/**\n * @class VoiceProfileCancellationDetails\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\n\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        super(reason, errorDetails, errorCode);\n    }\n\n    /**\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\n     * @member VoiceProfileCancellationDetails.fromResult\n     * @function\n     * @public\n     * @param {VoiceProfileResult} result - The result that was canceled.\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\n     */\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\n        const reason = CancellationReason.Error;\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\n\n        if (!!result.properties) {\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n        }\n\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport {\n    ResultReason,\n    VoiceProfileResult\n} from \"./Exports\";\n\n/**\n * Output format\n * @class VoiceProfileAuthorizationPhraseResult\n */\nexport class VoiceProfileAuthorizationPhraseResult extends VoiceProfileResult {\n    private privPhrases: string[] = [];\n\n    public constructor(reason: ResultReason, statusText: string, json: any) {\n        super(reason, statusText);\n        Contracts.throwIfNullOrUndefined(json, \"phrases array\");\n        for (const item of json) {\n            this.privPhrases.push(item.passPhrase);\n        }\n    }\n\n    public get phrases(): string[] {\n        return this.privPhrases;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IRestResponse,\n} from \"../common.browser/Exports\";\nimport {\n    Context,\n    OS,\n    SpeakerIdMessageAdapter,\n    SpeakerRecognitionConfig,\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    VoiceProfile,\n    VoiceProfileAuthorizationPhraseResult,\n    VoiceProfileEnrollmentResult,\n    VoiceProfileResult,\n    VoiceProfileType,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Defines VoiceProfileClient class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class VoiceProfileClient\n */\nexport class VoiceProfileClient {\n    protected privProperties: PropertyCollection;\n    private privAdapter: SpeakerIdMessageAdapter;\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member VoiceProfileClient.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this VoiceProfileClient.\n     * @member VoiceProfileClient.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * VoiceProfileClient constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\n     */\n    public constructor(speechConfig: SpeechConfig) {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.implClientSetup();\n    }\n\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.createProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\n     *        specifies the keyword to be recognized.\n     * @param {string} lang Language string (locale) for Voice Profile\n     * @param cb - Callback invoked once Voice Profile has been created.\n     * @param err - Callback invoked in case of an error.\n     */\n    public createProfileAsync(profileType: VoiceProfileType, lang: string, cb?: (e: VoiceProfile) => void, err?: (e: string) => void): void {\n\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfile> => {\n            const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\n            const response: { profileId: string } = result.json();\n            const profile = new VoiceProfile(response.profileId, profileType);\n            return profile;\n        })(), cb, err);\n    }\n     /**\n      * Get current information of a voice profile\n      * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\n      * @function\n      * @public\n      * @param {VoiceProfile} profile Voice Profile to retrieve info for\n      * @param cb - Callback invoked once Voice Profile has been created.\n      * @param err - Callback invoked in case of an error.\n      */\n    public retrieveEnrollmentResultAsync(profile: VoiceProfile, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\n                marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\n            const result: IRestResponse = await this.privAdapter.getProfileStatus(profile);\n            return new VoiceProfileEnrollmentResult(\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\n                result.data,\n                result.statusText,\n            );\n        })(), cb, err);\n    }\n\n    /**\n     * Get all voice profiles on account with given voice profile type\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\n     * @function\n     * @public\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\n     * @param cb - Callback invoked once Profile list has been returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    public getAllProfilesAsync(profileType: VoiceProfileType, cb?: (e: VoiceProfileEnrollmentResult[]) => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult[]> => {\n            const result: IRestResponse = await this.privAdapter.getProfiles(profileType);\n            if (profileType === VoiceProfileType.TextIndependentIdentification) {\n                return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json());\n            }\n            return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json());\n        })(), cb, err);\n    }\n\n    /**\n     * Get valid authorization phrases for voice profile enrollment\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\n     * @function\n     * @public\n     * @param {string} lang Language string (locale) for Voice Profile\n     * @param cb - Callback invoked once phrases have been returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    public getAuthorizationPhrasesAsync(lang: string, cb?: (e: VoiceProfileAuthorizationPhraseResult) => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileAuthorizationPhraseResult> => {\n            const result: IRestResponse = await this.privAdapter.getAuthorizationPhrases(lang);\n            return new VoiceProfileAuthorizationPhraseResult(\n                result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\n                result.statusText,\n                result.json()\n            );\n        })(), cb, err);\n    }\n\n    /**\n     * Create a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\n     * @param cb - Callback invoked once Enrollment request has been submitted.\n     * @param err - Callback invoked in case of an error.\n     */\n    public enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig, cb?: (e: VoiceProfileEnrollmentResult) => void, err?: (e: string) => void): void {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileEnrollmentResult> => {\n            const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\n            return new VoiceProfileEnrollmentResult(\n                result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\n                result.data,\n                result.statusText,\n            );\n        })(), cb, err);\n    }\n\n    /**\n     * Delete a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to be deleted\n     * @param cb - Callback invoked once Voice Profile has been deleted.\n     * @param err - Callback invoked in case of an error.\n     */\n    public deleteProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\n            const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\n            return this.getResult(result, ResultReason.DeletedVoiceProfile);\n        })(), cb, err);\n    }\n\n    /**\n     * Remove all enrollments for a speaker recognition voice profile\n     * @member VoiceProfileClient.prototype.resetProfileAsync\n     * @function\n     * @public\n     * @param {VoiceProfile} profile Voice Profile to be reset\n     * @param cb - Callback invoked once Voice Profile has been reset.\n     * @param err - Callback invoked in case of an error.\n     */\n    public resetProfileAsync(profile: VoiceProfile, cb?: (response: VoiceProfileResult) => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<VoiceProfileResult> => {\n            const result: IRestResponse = await this.privAdapter.resetProfile(profile);\n            return this.getResult(result, ResultReason.ResetVoiceProfile);\n        })(), cb, err);\n    }\n\n    /**\n     * Included for compatibility\n     * @member VoiceProfileClient.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n\n    // Does class setup, swiped from Recognizer.\n    protected implClientSetup(): void {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const recognizerConfig =\n            new SpeakerRecognitionConfig(\n                new Context(new OS(osPlatform, osName, osVersion)),\n                this.privProperties);\n\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\n        const response: VoiceProfileResult =\n            new VoiceProfileResult(\n                result.ok ? successReason : ResultReason.Canceled,\n                result.statusText\n            );\n        return (response);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IRestResponse,\n} from \"../common.browser/Exports\";\nimport {\n    Context,\n    OS,\n    SpeakerIdMessageAdapter,\n    SpeakerRecognitionConfig,\n} from \"../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeakerIdentificationModel,\n    SpeakerRecognitionResult,\n    SpeakerRecognitionResultType,\n    SpeakerVerificationModel,\n} from \"./Exports\";\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Defines SpeakerRecognizer class for Speaker Recognition\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\n * @class SpeakerRecognizer\n */\nexport class SpeakerRecognizer {\n    protected privProperties: PropertyCollection;\n    private privAdapter: SpeakerIdMessageAdapter;\n    private privAudioConfigImpl: AudioConfigImpl;\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeakerRecognizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeakerRecognizer.\n     * @member SpeakerRecognizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * SpeakerRecognizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\n\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.implSRSetup();\n    }\n\n    /**\n     * Get recognition result for model using given audio\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\n     * @function\n     * @public\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\n     * @param cb - Callback invoked once result is returned.\n     * @param err - Callback invoked in case of an error.\n     */\n    public recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel, cb?: (e: SpeakerRecognitionResult) => void, err?: (e: string) => void): void {\n\n        if (model instanceof SpeakerIdentificationModel) {\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\n            marshalPromiseToCallbacks(this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined), cb, err);\n        } else if (model instanceof SpeakerVerificationModel) {\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\n            marshalPromiseToCallbacks(this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId), cb, err);\n        } else {\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\n        }\n    }\n\n    /**\n     * Included for compatibility\n     * @member SpeakerRecognizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(): void {\n        return;\n    }\n\n    // Does class setup, swiped from Recognizer.\n    private implSRSetup(): void {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const recognizerConfig =\n            new SpeakerRecognitionConfig(\n                new Context(new OS(osPlatform, osName, osVersion)),\n                this.privProperties);\n\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\n    }\n\n    private async getResult(responsePromise: Promise<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string): Promise<SpeakerRecognitionResult> {\n        const response: IRestResponse = await responsePromise;\n        return new SpeakerRecognitionResult(\n            resultType,\n            response.data,\n            profileId,\n            response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport {\n    VoiceProfile,\n    VoiceProfileType,\n} from \"./Exports\";\n\n/**\n * Defines SpeakerIdentificationModel class for Speaker Recognition\n * Model contains a set of profiles against which to identify speaker(s)\n * @class SpeakerIdentificationModel\n */\nexport class SpeakerIdentificationModel {\n    private privVoiceProfiles: VoiceProfile[] = [];\n\n    private constructor(profiles: VoiceProfile[]) {\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\n        if (profiles.length === 0) {\n            throw new Error(\"Empty Voice Profiles array\");\n        }\n        profiles.forEach((profile: VoiceProfile) => {\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\n            }\n            this.privVoiceProfiles.push(profile);\n        });\n    }\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\n        return new SpeakerIdentificationModel(profiles);\n    }\n\n    public get voiceProfileIds(): string {\n        return this.privVoiceProfiles.map((profile: VoiceProfile) => profile.profileId).join(\",\");\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport {\n    VoiceProfile,\n    VoiceProfileType,\n} from \"./Exports\";\n\n/**\n * Defines SpeakerVerificationModel class for Speaker Recognition\n * Model contains a profile against which to verify a speaker\n * @class SpeakerVerificationModel\n */\nexport class SpeakerVerificationModel {\n    private privVoiceProfile: VoiceProfile;\n\n    private constructor(profile: VoiceProfile) {\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\n            throw new Error(\"Verification model cannot be created from Identification profile\");\n        }\n        this.privVoiceProfile = profile;\n    }\n\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\n        return new SpeakerVerificationModel(profile);\n    }\n\n    public get voiceProfile(): VoiceProfile {\n        return this.privVoiceProfile;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\nimport {Contracts} from \"./Contracts\";\nimport {\n    PropertyCollection,\n    PropertyId,\n    SourceLanguageConfig,\n} from \"./Exports\";\n\n/**\n * Language auto detect configuration.\n * @class AutoDetectSourceLanguageConfig\n * Added in version 1.13.0.\n */\nexport class AutoDetectSourceLanguageConfig {\n    private privProperties: PropertyCollection;\n\n    private constructor() {\n        this.privProperties = new PropertyCollection();\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\n     * @function\n     * @public\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\n     */\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\n        const config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\n        return config;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\n     * @function\n     * @public\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\n     */\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\n        const config = new AutoDetectSourceLanguageConfig();\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\n        return config;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\n     * @function\n     * @public\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\n     */\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\n        if (configs.length < 1) {\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\n        }\n        const autoConfig = new AutoDetectSourceLanguageConfig();\n        const langs: string[] = [];\n        configs.forEach((config: SourceLanguageConfig) => {\n            langs.push(config.language);\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\n            }\n        });\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\n\n        return autoConfig;\n    }\n\n    /**\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets an auto detected language config properties\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\nimport {\n    SpeechRecognitionResult,\n} from \"./Exports\";\n\n/**\n * Output format\n * @class AutoDetectSourceLanguageResult\n */\nexport class AutoDetectSourceLanguageResult {\n\n    private privLanguage: string;\n    private privLanguageDetectionConfidence: string;\n\n    private constructor(language: string, languageDetectionConfidence: string) {\n        Contracts.throwIfNullOrUndefined(language, \"language\");\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\n        this.privLanguage = language;\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\n    }\n\n    /**\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\n     * @member AutoDetectSourceLanguageResult.fromResult\n     * @function\n     * @public\n     * @param {SpeechRecognitionResult} result - The recognition result.\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\n     */\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\n    }\n\n    public get language(): string {\n        return this.privLanguage;\n    }\n\n    public get languageDetectionConfidence(): string {\n        return this.privLanguageDetectionConfidence;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Contracts } from \"./Contracts\";\n\n/**\n * Source Language configuration.\n * @class SourceLanguageConfig\n */\nexport class SourceLanguageConfig {\n    private privLanguage: string;\n    private privEndpointId: string;\n\n    private constructor(language: string, endpointId?: string) {\n        Contracts.throwIfNullOrUndefined(language, \"language\");\n        this.privLanguage = language;\n        this.privEndpointId = endpointId;\n    }\n\n    /**\n     * @member SourceLanguageConfig.fromLanguage\n     * @function\n     * @public\n     * @param {string} language language (eg. \"en-US\") value of config.\n     * @param {string?} endpointId endpointId of model bound to given language of config.\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\n     * Added in version 1.13.0.\n     */\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\n        return new SourceLanguageConfig(language, endpointId);\n    }\n\n    public get language(): string {\n        return this.privLanguage;\n    }\n\n    public get endpointId(): string {\n        return this.privEndpointId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    CancellationDetailsBase,\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n} from \"./Exports\";\n\nexport enum SpeakerRecognitionResultType {\n    Verify,\n    Identify\n}\n/**\n * Output format\n * @class SpeakerRecognitionResult\n */\nexport class SpeakerRecognitionResult {\n    private privReason: ResultReason;\n    private privProperties: PropertyCollection;\n    private privProfileId: string;\n    private privScore: number;\n    private privErrorDetails: string;\n\n    public constructor(resultType: SpeakerRecognitionResultType, data: string, profileId: string, resultReason: ResultReason = ResultReason.RecognizedSpeaker) {\n        this.privProperties = new PropertyCollection();\n        this.privReason = resultReason;\n        if (this.privReason !== ResultReason.Canceled) {\n            if (resultType === SpeakerRecognitionResultType.Identify) {\n                const json: { identifiedProfile: { profileId: string, score: number } } = JSON.parse(data);\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\n                this.privProfileId = json.identifiedProfile.profileId;\n                this.privScore = json.identifiedProfile.score;\n            } else {\n                const json: { recognitionResult: string, score: number } = JSON.parse(data);\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\n                this.privScore = json.score;\n                if (json.recognitionResult.toLowerCase() !== \"accept\") {\n                    this.privReason = ResultReason.NoMatch;\n                }\n                if (profileId !== undefined && profileId !== \"\") {\n                    this.privProfileId = profileId;\n                }\n            }\n        } else {\n            const json: { statusText: string } = JSON.parse(data);\n            Contracts.throwIfNullOrUndefined(json, \"JSON\");\n            this.privErrorDetails = json.statusText;\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\n        }\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, data);\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    public get profileId(): string {\n        return this.privProfileId;\n    }\n\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    public get score(): number {\n        return this.privScore;\n    }\n}\n\n/**\n * @class SpeakerRecognitionCancellationDetails\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\n\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\n        super(reason, errorDetails, errorCode);\n    }\n\n    /**\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\n     * @member SpeakerRecognitionCancellationDetails.fromResult\n     * @function\n     * @public\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\n     */\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\n        const reason = CancellationReason.Error;\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\n\n        if (!!result.properties) {\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\n        }\n\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nexport { Conversation, ConversationImpl } from \"./Conversation\";\nexport { ConversationInfo } from \"./IConversation\";\nexport { ConversationCommon } from \"./ConversationCommon\";\nexport { ConversationExpirationEventArgs } from \"./ConversationExpirationEventArgs\";\nexport { ConversationParticipantsChangedEventArgs } from \"./ConversationParticipantsChangedEventArgs\";\nexport { ConversationTranslationCanceledEventArgs } from \"./ConversationTranslationCanceledEventArgs\";\nexport { ConversationTranslationEventArgs } from \"./ConversationTranslationEventArgs\";\nexport { ConversationTranslationResult } from \"./ConversationTranslationResult\";\nexport { ConversationTranslator } from \"./ConversationTranslator\";\nexport { ConversationTranscriber } from \"./ConversationTranscriber\";\nexport { IParticipant, Participant, User, VoiceSignature } from \"./IParticipant\";\nexport { ParticipantChangedReason } from \"./ParticipantChangedReason\";\nexport { ConversationHandler, ConversationTranscriptionHandler, IConversationTranslator } from \"./ConversationHandler\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport {\n    ConversationConnectionConfig,\n    ConversationManager,\n    ConversationReceivedTranslationEventArgs,\n    ConversationRecognizer,\n    ConversationRecognizerFactory,\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalConversation,\n    IInternalParticipant,\n    InternalParticipants,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs,\n    TranscriberRecognizer\n} from \"../../common.speech/Exports\";\nimport {\n    IDisposable,\n    IErrorMessages,\n    marshalPromiseToCallbacks\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    Connection,\n    ConnectionEventArgs,\n    ConversationExpirationEventArgs,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationEventArgs,\n    ConversationTranslator,\n    Participant,\n    ParticipantChangedReason,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    SpeechTranslationConfig,\n} from \"../Exports\";\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\nimport { Callback, ConversationInfo, IConversation } from \"./IConversation\";\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\n\nexport abstract class Conversation implements IConversation {\n\n    public abstract get authorizationToken(): string;\n    public abstract set authorizationToken(value: string);\n\n    public abstract get config(): SpeechTranslationConfig;\n\n    public abstract get conversationId(): string;\n    public abstract get conversationInfo(): ConversationInfo;\n    public abstract get properties(): PropertyCollection;\n    public abstract get speechRecognitionLanguage(): string;\n    public abstract get participants(): Participant[];\n\n    protected constructor() { }\n\n    /**\n     * Create a conversation\n     * @param speechConfig\n     * @param cb\n     * @param err\n     */\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\n        }\n        if (typeof arg2 === \"string\") {\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig, arg2);\n            marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), arg3, arg4);\n            return conversationImpl;\n        } else {\n            const conversationImpl: ConversationImpl = new ConversationImpl(speechConfig);\n            const cb: Callback = arg2;\n            const err: Callback = arg3;\n            conversationImpl.createConversationAsync(\n                (() => {\n                    if (!!cb) {\n                        cb();\n                    }\n                }),\n                (error: any) => {\n                    if (!!err) {\n                        err(error);\n                    }\n                });\n            return conversationImpl;\n        }\n\n    }\n\n    /** Start a conversation. */\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Delete a conversation. After this no one will be able to join the conversation. */\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** End a conversation. */\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Lock a conversation. This will prevent new participants from joining. */\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Add Participant to Conversation. */\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Mute all other participants in the conversation. After this no other participants will\n     * have their speech recognitions broadcast, nor be able to send text messages.\n     */\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Mute a participant.\n     * @param userId A user identifier\n     */\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\n\n    /**\n     * Remove a participant from a conversation using the user id, Participant or User object\n     * @param userId A user identifier\n     */\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\n\n    /** Unlocks a conversation. */\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\n\n    /** Unmute all other participants in the conversation. */\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\n\n    /**\n     * Unmute a participant.\n     * @param userId A user identifier\n     */\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ConversationImpl extends Conversation implements IDisposable {\n\n    private privConfig: SpeechTranslationConfig;\n    private privProperties: PropertyCollection;\n    private privLanguage: string;\n    private privToken: string;\n    private privIsDisposed: boolean = false;\n    private privRoom: IInternalConversation;\n    private privManager: ConversationManager;\n    private privConversationRecognizer: ConversationRecognizer;\n    private privIsConnected: boolean = false;\n    private privParticipants: InternalParticipants;\n    private privIsReady: boolean;\n    private privConversationTranslator: ConversationTranslator;\n    private privTranscriberRecognizer: TranscriberRecognizer;\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\n    private privConversationId: string = \"\";\n    private readonly privTextMessageMaxLength: number;\n\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\n        this.privConversationTranslator = conversationTranslator;\n    }\n\n    // get the internal data about a conversation\n    public get room(): IInternalConversation {\n        return this.privRoom;\n    }\n\n    // get the wrapper for connecting to the websockets\n    public get connection(): ConversationRecognizer {\n        return this.privConversationRecognizer; // this.privConnection;\n    }\n\n    // get / set the speech auth token\n    public get authorizationToken(): string {\n        return this.privToken;\n    }\n\n    public set authorizationToken(value: string) {\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\n        this.privToken = value;\n    }\n\n    // get the config\n    public get config(): SpeechTranslationConfig {\n        return this.privConfig;\n    }\n\n    // get the conversation Id\n    public get conversationId(): string {\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\n    }\n\n    // get the properties\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    // get the speech language\n    public get speechRecognitionLanguage(): string {\n        return this.privLanguage;\n    }\n\n    public get isMutedByHost(): boolean {\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\n    }\n\n    public get isConnected(): boolean {\n        return this.privIsConnected && this.privIsReady;\n    }\n\n    public get participants(): Participant[] {\n        return this.toParticipants(true);\n    }\n\n    public get me(): Participant {\n        return this.toParticipant(this.privParticipants.me);\n    }\n\n    public get host(): Participant {\n        return this.toParticipant(this.privParticipants.host);\n    }\n\n    /**\n     * Create a conversation impl\n     * @param speechConfig\n     * @param {string} id - optional conversationId\n     */\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\n        super();\n        this.privProperties = new PropertyCollection();\n        this.privManager = new ConversationManager();\n\n        // check the speech language\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n        if (!language) {\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\n        }\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n        if (!id) {\n            // check the target language(s)\n            if (speechConfig.targetLanguages.length === 0) {\n                speechConfig.addTargetLanguage(this.privLanguage);\n            }\n\n            // check the profanity setting: speech and conversationTranslator should be in sync\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\n            if (!profanity) {\n                speechConfig.setProfanity(ProfanityOption.Masked);\n            }\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\n            if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\n                hostNickname = \"Host\";\n            }\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\n\n        } else {\n            this.privConversationId = id;\n        }\n\n        // save the speech config for future usage\n        this.privConfig = speechConfig;\n\n        // save the config properties\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\n        this.privProperties = configImpl.properties.clone();\n        this.privIsConnected = false;\n        this.privParticipants = new InternalParticipants();\n        this.privIsReady = false;\n        this.privTextMessageMaxLength = 1000;\n    }\n\n    /**\n     * Create a new conversation as Host\n     * @param cb\n     * @param err\n     */\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            if (!!this.privConversationRecognizer) {\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n            }\n            this.privManager.createOrJoin(this.privProperties, undefined,\n                ((room: IInternalConversation) => {\n                    if (!room) {\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\n                    }\n                    this.privRoom = room;\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Starts a new conversation as host.\n     * @param cb\n     * @param err\n     */\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            // check if there is already a recognizer\n            if (!!this.privConversationRecognizer) {\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\n            }\n            // check if there is conversation data available\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\n            // connect to the conversation websocket\n            this.privParticipants.meId = this.privRoom.participantId;\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this.privConfig);\n\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\n            // has to forward serviceRecognizer connection events that usually get passed automatically\n            this.privConversationRecognizer.connected = this.onConnected;\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\n            this.privConversationRecognizer.canceled = this.onCanceled;\n\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\n            this.privConversationRecognizer.connect(this.privRoom.token,\n                (() => {\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Join a conversation as a participant.\n     * @param { IParticipant } participant - participant to add\n     * @param cb\n     * @param err\n     */\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\n    }\n\n    /**\n     * Join a conversation as a participant.\n     * @param conversation\n     * @param nickname\n     * @param lang\n     * @param cb\n     * @param err\n     */\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\n        try {\n            // TODO\n            // if (!!this.privConversationRecognizer) {\n            //     throw new Error(this.privErrors.permissionDeniedStart);\n            // }\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\n            // join the conversation\n            this.privManager.createOrJoin(this.privProperties, conversationId,\n                ((room: IInternalConversation) => {\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\n                    this.privRoom = room;\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\n                    // join callback\n                    if (!!cb) {\n                        cb(room.cognitiveSpeechAuthToken);\n                    }\n                }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Deletes a conversation\n     * @param cb\n     * @param err\n     */\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\n    }\n\n    public async deleteConversationImplAsync(): Promise<void> {\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\n\n            this.dispose();\n    }\n\n    /**\n     * Issues a request to close the client websockets\n     * @param cb\n     * @param err\n     */\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\n    }\n\n    public endConversationImplAsync(): Promise<void> {\n        return this.close(true);\n    }\n\n    /**\n     * Issues a request to lock the conversation\n     * @param cb\n     * @param err\n     */\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(true),\n                (() => {\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to mute the conversation\n     * @param cb\n     * @param err\n     */\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the user's permissions\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(true),\n                (() => {\n                    this.handleCallback(cb, err);\n                }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to mute a participant in the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the connection is open (host + participant can perform the mute command)\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // if not host, check the participant is not muting another participant\n            if (!this.me.isHost && this.me.id !== userId) {\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n            }\n            // check the user exists\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\n            if (exists === -1) {\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, true), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to remove a participant from the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\n                // Assume this is a transcription participant\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\n            } else {\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n                if (!this.canSendAsHost) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\n                }\n                let participantId: string = \"\";\n                if (typeof userId === \"string\") {\n                    participantId = userId as string;\n                } else if (userId.hasOwnProperty(\"id\")) {\n                    const participant: IParticipant = userId as IParticipant;\n                    participantId = participant.id;\n                } else if (userId.hasOwnProperty(\"userId\")) {\n                    const user: IUser = userId as IUser;\n                    participantId = user.userId;\n                }\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n                // check the participant exists\n                const index: number = this.participants.findIndex((p: Participant) => p.id === participantId);\n                if (index === -1) {\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n                }\n                this.privConversationRecognizer?.sendRequest(this.getEjectCommand(participantId), (() => {\n                    this.handleCallback(cb, err);\n                }),\n                    ((error: any) => {\n                        this.handleError(error, err);\n                    }));\n            }\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unlock the conversation\n     * @param cb\n     * @param err\n     */\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(false), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unmute all participants in the conversation\n     * @param cb\n     * @param err\n     */\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSendAsHost) {\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(false), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Issues a request to unmute a participant in the conversation\n     * @param userId\n     * @param cb\n     * @param err\n     */\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            // check the connection is open (host + participant can perform the mute command)\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // if not host, check the participant is not muting another participant\n            if (!this.me.isHost && this.me.id !== userId) {\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\n            }\n            // check the user exists\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\n            if (exists === -1) {\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, false), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Send a text message\n     * @param message\n     * @param cb\n     * @param err\n     */\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            // TODO: is a max length check required?\n            if (message.length > this.privTextMessageMaxLength) {\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getMessageCommand(message), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Change nickname\n     * @param message\n     * @param cb\n     * @param err\n     */\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\n            if (!this.canSend) {\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n            }\n            this.privConversationRecognizer?.sendRequest(this.getChangeNicknameCommand(nickname), (() => {\n                this.handleCallback(cb, err);\n            }),\n                ((error: any) => {\n                    this.handleError(error, err);\n                }));\n        } catch (error) {\n            this.handleError(error, err);\n        }\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public dispose(reason?: string): void {\n        if (this.isDisposed) {\n            return;\n        }\n        this.privIsDisposed = true;\n        this.config?.close();\n        this.privConfig = undefined;\n        this.privLanguage = undefined;\n        this.privProperties = undefined;\n        this.privRoom = undefined;\n        this.privToken = undefined;\n        this.privManager = undefined;\n        this.privConversationRecognizer = undefined;\n        this.privIsConnected = false;\n        this.privIsReady = false;\n        this.privParticipants = undefined;\n    }\n\n    public get transcriberRecognizer(): TranscriberRecognizer {\n        return this.privTranscriberRecognizer;\n    }\n\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\n        if (!!this.privTranscriberRecognizer) {\n            await this.privTranscriberRecognizer.close();\n        }\n        this.privTranscriberRecognizer = recognizer;\n        this.privTranscriberRecognizer.conversation = this;\n    }\n\n    public get conversationInfo(): ConversationInfo {\n        const convId: string = this.conversationId;\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant) => {\n            return {\n                id: part.id,\n                preferredLanguage: part.preferredLanguage,\n                voice: part.voice\n            };\n        });\n        const props: { [id: string]: string } = {};\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\n            const val: string = this.properties.getProperty(key, \"\");\n            if (val !== \"\") {\n                props[key] = val;\n            }\n        }\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\n        return info;\n    }\n\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\n        if (newParticipant !== undefined) {\n            if (!!this.privTranscriberRecognizer) {\n                const conversationInfo = this.conversationInfo;\n                conversationInfo.participants = [participant];\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\n            }\n        }\n    }\n\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\n        this.privParticipants.deleteParticipant(participant.id);\n        const conversationInfo = this.conversationInfo;\n        conversationInfo.participants = [participant];\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\n    }\n\n    /** websocket callbacks */\n    private onConnected = (e: ConnectionEventArgs): void => {\n        this.privIsConnected = true;\n        try {\n            if (!!this.privConversationTranslator.sessionStarted) {\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onDisconnected = async (e: ConnectionEventArgs): Promise<void> => {\n        await this.close(false);\n        try {\n            if (!!this.privConversationTranslator.sessionStopped) {\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onCanceled = async (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): Promise<void> => {\n        await this.close(false); // ?\n        try {\n            if (!!this.privConversationTranslator.canceled) {\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\n        try {\n            const updatedParticipant: any = this.privParticipants.getParticipant(e.id);\n            if (updatedParticipant !== undefined) {\n\n                switch (e.key) {\n                    case ConversationTranslatorCommandTypes.changeNickname:\n                        updatedParticipant.displayName = e.value;\n                        break;\n                    case ConversationTranslatorCommandTypes.setUseTTS:\n                        updatedParticipant.useTts = e.value;\n                        break;\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\n                        updatedParticipant.profanity = e.value;\n                        break;\n                    case ConversationTranslatorCommandTypes.setMute:\n                        updatedParticipant.isMuted = e.value;\n                        break;\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\n                        updatedParticipant.translateToLanguages = e.value;\n                        break;\n                }\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\n\n                if (!!this.privConversationTranslator?.participantsChanged) {\n                    this.privConversationTranslator?.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onLockRoomCommandReceived = (r: ConversationRecognizer, e: LockRoomEventArgs): void => {\n        // TODO\n    }\n\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\n        try {\n            this.privParticipants.participants.forEach((p: IInternalParticipant) => p.isMuted = (p.isHost ? false : e.isMuted));\n            if (!!this.privConversationTranslator?.participantsChanged) {\n                this.privConversationTranslator?.participantsChanged(\n                    this.privConversationTranslator,\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\n                        this.toParticipants(false), e.sessionId));\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\n        try {\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\n            if (newParticipant !== undefined) {\n                if (!!this.privConversationTranslator?.participantsChanged) {\n                    this.privConversationTranslator?.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\n                            [this.toParticipant(newParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\n        try {\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\n            if (ejectedParticipant !== undefined) {\n                // remove the participant from the internal participants list\n                this.privParticipants.deleteParticipant(e.participant.id);\n                if (!!this.privConversationTranslator?.participantsChanged) {\n                    // notify subscribers that the participant has left the conversation\n                    this.privConversationTranslator?.participantsChanged(\n                        this.privConversationTranslator,\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\n                }\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\n        try {\n            switch (e.command) {\n                case ConversationTranslatorMessageTypes.final:\n                    if (!!this.privConversationTranslator?.transcribed) {\n                        this.privConversationTranslator?.transcribed(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n                case ConversationTranslatorMessageTypes.partial:\n                    if (!!this.privConversationTranslator?.transcribing) {\n                        this.privConversationTranslator?.transcribing(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n                case ConversationTranslatorMessageTypes.instantMessage:\n                    if (!!this.privConversationTranslator?.textMessageReceived) {\n                        this.privConversationTranslator?.textMessageReceived(\n                            this.privConversationTranslator,\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\n                    }\n                    break;\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\n        try {\n            // check if the session token needs to be updated\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\n                this.privRoom.token = e.sessionToken;\n            }\n            // save the participants\n            this.privParticipants.participants = [...e.participants];\n            // enable the conversation\n            if (this.privParticipants.me !== undefined) {\n                this.privIsReady = true;\n            }\n            if (!!this.privConversationTranslator?.participantsChanged) {\n                this.privConversationTranslator?.participantsChanged(\n                    this.privConversationTranslator,\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\n            }\n            // if this is the host, update the nickname if needed\n            if (this.me.isHost) {\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\n                    // issue a change nickname request\n                    this.changeNicknameAsync(nickname);\n                }\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\n        try {\n            if (!!this.privConversationTranslator?.conversationExpiration) {\n                this.privConversationTranslator?.conversationExpiration(\n                    this.privConversationTranslator,\n                    e);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private async close(dispose: boolean): Promise<void> {\n        try {\n            this.privIsConnected = false;\n            await this.privConversationRecognizer.close();\n            await this.privTranscriberRecognizer?.close();\n            this.privConversationRecognizer = undefined;\n            this.privConversationTranslator?.dispose();\n        } catch (e) {\n            // ignore error\n        }\n        if (dispose) {\n            this.dispose();\n        }\n    }\n\n    /** Helpers */\n    private get canSend(): boolean {\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\n    }\n\n    private get canSendAsHost(): boolean {\n        return this.privIsConnected && this.privParticipants.me?.isHost;\n    }\n\n    private handleCallback(cb: any, err: any): void {\n        if (!!cb) {\n            try {\n                cb();\n            } catch (e) {\n                if (!!err) {\n                    err(e);\n                }\n            }\n            cb = undefined;\n        }\n    }\n\n    private handleError(error: any, err: any): void {\n        if (!!err) {\n            if (error instanceof Error) {\n                const typedError: Error = error as Error;\n                err(typedError.name + \": \" + typedError.message);\n\n            } else {\n                err(error);\n            }\n        }\n    }\n\n    /** Participant Helpers */\n    private toParticipants(includeHost: boolean): Participant[] {\n\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant) => {\n            return this.toParticipant(p);\n        });\n        if (!includeHost) {\n            return participants.filter((p: Participant) => p.isHost === false);\n        } else {\n            return participants;\n        }\n    }\n\n    private toParticipant(p: IInternalParticipant): Participant {\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\n    }\n\n    private getMuteAllCommand(isMuted: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setMuteAll,\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: this.privRoom.participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isMuted\n        });\n    }\n\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setMute,\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isMuted\n        });\n    }\n\n    private getLockCommand(isLocked: boolean): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.setLockState,\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: this.privRoom.participantId,\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: isLocked\n        });\n    }\n\n    private getEjectCommand(participantId: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: participantId,\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n        });\n    }\n\n    private getChangeNicknameCommand(nickname: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n\n        return JSON.stringify({\n            command: ConversationTranslatorCommandTypes.changeNickname,\n            nickname,\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: this.privRoom.participantId, // the id of the host\n            roomid: this.privRoom.roomId,\n            type: ConversationTranslatorMessageTypes.participantCommand,\n            value: nickname\n        });\n    }\n\n    private getMessageCommand(message: string): string {\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\n\n        return JSON.stringify({\n            // tslint:disable-next-line: object-literal-shorthand\n            participantId: this.privRoom.participantId,\n            roomId: this.privRoom.roomId,\n            text: message,\n            type: ConversationTranslatorMessageTypes.instantMessage\n        });\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    AudioConfig,\n    SpeechTranslationConfig,\n} from \"../Exports\";\nimport { Callback, IConversation } from \"./IConversation\";\n\nexport class ConversationCommon {\n\n    protected privAudioConfig: AudioConfig;\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\n\n    public constructor(audioConfig?: AudioConfig) {\n        this.privAudioConfig = audioConfig;\n    }\n\n    protected handleCallback(cb: Callback, err: Callback): void {\n        if (!!cb) {\n            try {\n                cb();\n            } catch (e) {\n                if (!!err) {\n                    err(e);\n                }\n            }\n            cb = undefined;\n        }\n    }\n\n    protected handleError(error: any, err: Callback): void {\n        if (!!err) {\n            if (error instanceof Error) {\n                const typedError: Error = error as Error;\n                err(typedError.name + \": \" + typedError.message);\n\n            } else {\n                err(error);\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { SessionEventArgs } from \"../Exports\";\n\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\n    private privExpirationTime: number;\n\n    constructor(expirationTime: number, sessionId?: string) {\n        super(sessionId);\n        this.privExpirationTime = expirationTime;\n    }\n\n    /** How much longer until the conversation expires (in minutes). */\n    get expirationTime(): number {\n        return this.privExpirationTime;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { SessionEventArgs } from \"../Exports\";\nimport { ParticipantChangedReason } from \"./Exports\";\nimport { IParticipant } from \"./IParticipant\";\n\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\n    private privReason: ParticipantChangedReason;\n    private privParticipant: IParticipant[];\n\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\n        super(sessionId);\n        this.privReason = reason;\n        this.privParticipant = participants;\n    }\n\n    public get reason(): ParticipantChangedReason {\n        return this.privReason;\n    }\n\n    public get participants(): IParticipant[] {\n        return this.privParticipant;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase\";\n\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { RecognitionEventArgs } from \"../Exports\";\nimport { ConversationTranslationResult } from \"./Exports\";\n\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\n    private privResult: ConversationTranslationResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {ConversationTranslationResult} result - The translation recognition result.\n     * @param {number} offset - The offset.\n     * @param {string} sessionId - The session id.\n     */\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\n        super(offset, sessionId);\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the recognition result.\n     * @returns {ConversationTranslationResult} the recognition result.\n     */\n    public get result(): ConversationTranslationResult {\n        return this.privResult;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { PropertyCollection } from \"../PropertyCollection\";\nimport { ResultReason } from \"../ResultReason\";\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult\";\nimport { Translations } from \"../Translations\";\n\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\n    private privId: string;\n    private privOrigLang: string;\n\n    public constructor(participantId: string,\n                       translations: Translations,\n                       originalLanguage?: string,\n                       resultId?: string,\n                       reason?: ResultReason,\n                       text?: string,\n                       duration?: number,\n                       offset?: number,\n                       errorDetails?: string,\n                       json?: string,\n                       properties?: PropertyCollection) {\n        super(translations, resultId, reason, text, duration, offset, errorDetails, json, properties);\n        this.privId = participantId;\n        this.privOrigLang = originalLanguage;\n    }\n\n    /**\n     * The unique identifier for the participant this result is for.\n     */\n    public get participantId(): string {\n        return this.privId;\n    }\n\n    /**\n     * The original language this result was in.\n     */\n    public get originalLang(): string {\n        return this.privOrigLang;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\nimport {\n    IDisposable,\n    IErrorMessages,\n    marshalPromiseToCallbacks\n} from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioConfig,\n    CancellationErrorCode,\n    CancellationReason,\n    ProfanityOption,\n    PropertyCollection,\n    PropertyId,\n    SessionEventArgs,\n    SpeechTranslationConfig,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognizer\n} from \"../Exports\";\nimport { ConversationImpl } from \"./Conversation\";\nimport {\n    ConversationCommon,\n    ConversationExpirationEventArgs,\n    ConversationHandler,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationEventArgs,\n    IConversationTranslator,\n    Participant,\n} from \"./Exports\";\nimport { Callback, IConversation } from \"./IConversation\";\n\nexport enum SpeechState {\n    Inactive, Connecting, Connected\n}\n\n// tslint:disable:max-classes-per-file\n\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\n    private privTranslator: ConversationTranslator;\n    private privSpeechState: SpeechState;\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, translator?: ConversationTranslator) {\n        super(speechConfig, audioConfig);\n        this.privSpeechState = SpeechState.Inactive;\n        if (!!translator) {\n            this.privTranslator = translator;\n            this.sessionStarted = () => {\n                this.privSpeechState = SpeechState.Connected;\n            };\n\n            this.sessionStopped = () => {\n                this.privSpeechState = SpeechState.Inactive;\n            };\n\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\n                // TODO: add support for getting recognitions from here if own speech\n\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\n                if (e.result?.errorDetails) {\n                    await this.cancelSpeech();\n                    // TODO: format the error message contained in 'errorDetails'\n                    this.fireCancelEvent(e.result.errorDetails);\n                }\n            };\n\n            this.canceled = async (r: TranslationRecognizer, e: TranslationRecognitionCanceledEventArgs) => {\n                if (this.privSpeechState !== SpeechState.Inactive) {\n                    try {\n                        await this.cancelSpeech();\n                    } catch (error) {\n                        this.privSpeechState = SpeechState.Inactive;\n                    }\n                }\n            };\n        }\n    }\n    public get state(): SpeechState {\n        return this.privSpeechState;\n    }\n\n    public set state(newState: SpeechState) {\n        this.privSpeechState = newState;\n    }\n\n    public onConnection(): void {\n        this.privSpeechState = SpeechState.Connected;\n    }\n\n    public async onDisconnection(): Promise<void> {\n        this.privSpeechState = SpeechState.Inactive;\n        await this.cancelSpeech();\n    }\n\n    /**\n     * Fire a cancel event\n     * @param error\n     */\n    private fireCancelEvent(error: any): void {\n        try {\n            if (!!this.privTranslator.canceled) {\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\n                    error?.reason ?? CancellationReason.Error,\n                    error?.errorDetails ?? error,\n                    error?.errorCode ?? CancellationErrorCode.RuntimeError,\n                    undefined,\n                    error?.sessionId);\n\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\n            }\n        } catch (e) {\n            //\n        }\n    }\n\n    private async cancelSpeech(): Promise<void> {\n        try {\n            this.stopContinuousRecognitionAsync();\n            await this.privReco?.disconnect();\n            this.privSpeechState = SpeechState.Inactive;\n        } catch (e) {\n            // ignore the error\n        }\n    }\n\n}\n\n/***\n * Join, leave or connect to a conversation.\n */\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\n\n    private privSpeechRecognitionLanguage: string;\n    private privProperties: PropertyCollection;\n    private privIsDisposed: boolean = false;\n    private privCTRecognizer: ConversationTranslationRecognizer;\n    private privIsSpeaking: boolean = false;\n    private privConversation: ConversationImpl;\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\n    private privPlaceholderKey: string = \"abcdefghijklmnopqrstuvwxyz012345\";\n    private privPlaceholderRegion: string = \"westus\";\n\n    public constructor(audioConfig?: AudioConfig) {\n        super(audioConfig);\n        this.privProperties = new PropertyCollection();\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechRecognitionLanguage;\n    }\n\n    public get participants(): Participant[] {\n        return this.privConversation?.participants;\n    }\n\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\n\n    /**\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\n     * @param conversation\n     * @param nickname\n     * @param lang\n     * @param cb\n     * @param err\n     */\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\n    public joinConversationAsync(conversation: any, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\n\n        try {\n\n            if (typeof conversation === \"string\") {\n\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n                if (!!this.privConversation) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\n                }\n\n                let lang: string = param1 as string;\n                if (lang === undefined || lang === null || lang === \"\") { lang = ConversationConnectionConfig.defaultLanguageCode; }\n\n                // create a placeholder config\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\n                    this.privPlaceholderKey,\n                    this.privPlaceholderRegion);\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\n\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\n                if (endpoint) {\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\n                }\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\n                if (speechEndpointHost) {\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\n                }\n\n                // join the conversation\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\n                this.privConversation.conversationTranslator = this;\n\n                this.privConversation.joinConversationAsync(\n                    conversation,\n                    nickname,\n                    lang,\n                    ((result: string) => {\n\n                        if (!result) {\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\n                        }\n\n                        this.privSpeechTranslationConfig.authorizationToken = result;\n\n                        // connect to the ws\n                        this.privConversation.startConversationAsync(\n                            (() => {\n                                this.handleCallback(param2, param3);\n                            }),\n                            ((error: any) => {\n                                this.handleError(error, param3);\n                            }));\n\n                    }),\n                    ((error: any) => {\n                        this.handleError(error, param3);\n                    }));\n\n            } else if (typeof conversation === \"object\") {\n\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\n\n                // save the nickname\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\n                // ref the conversation object\n                this.privConversation = conversation as ConversationImpl;\n                // ref the conversation translator object\n                this.privConversation.conversationTranslator = this;\n\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n                this.privSpeechTranslationConfig = conversation.config;\n\n                this.handleCallback(param1 as Callback, param2);\n            } else {\n                this.handleError(\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\n                    param2);\n            }\n\n        } catch (error) {\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\n        }\n    }\n\n    /**\n     * Leave the conversation\n     * @param cb\n     * @param err\n     */\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\n\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n\n            // stop the speech websocket\n            await this.cancelSpeech();\n            // stop the websocket\n            await this.privConversation.endConversationImplAsync();\n            // https delete request\n            await this.privConversation.deleteConversationImplAsync();\n            this.dispose();\n\n        })(), cb, err);\n    }\n\n    /**\n     * Send a text message\n     * @param message\n     * @param cb\n     * @param err\n     */\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\n\n        try {\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\n\n            this.privConversation?.sendTextMessageAsync(message, cb, err);\n        } catch (error) {\n\n            this.handleError(error, err);\n        }\n    }\n\n    /**\n     * Start speaking\n     * @param cb\n     * @param err\n     */\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            try {\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\n\n                if (this.privCTRecognizer === undefined) {\n                    await this.connectTranslatorRecognizer();\n                }\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\n\n                if (!this.canSpeak) {\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\n                }\n\n                await this.startContinuousRecognition();\n\n                this.privIsSpeaking = true;\n            } catch (error) {\n                this.privIsSpeaking = false;\n                await this.cancelSpeech();\n                throw error;\n            }\n        })(), cb, err);\n    }\n\n    /**\n     * Stop speaking\n     * @param cb\n     * @param err\n     */\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            try {\n                if (!this.privIsSpeaking) {\n                    // stop speech\n                    await this.cancelSpeech();\n                    return;\n                }\n\n                // stop the recognition but leave the websocket open\n                this.privIsSpeaking = false;\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\n                    this.privCTRecognizer?.stopContinuousRecognitionAsync(resolve, reject);\n                });\n\n            } catch (error) {\n                await this.cancelSpeech();\n            }\n        })(), cb, err);\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\n        marshalPromiseToCallbacks((async (): Promise<void> => {\n            if (this.isDisposed && !this.privIsSpeaking) {\n                return;\n            }\n            await this.cancelSpeech();\n            this.privIsDisposed = true;\n            this.privSpeechTranslationConfig?.close();\n            this.privSpeechRecognitionLanguage = undefined;\n            this.privProperties = undefined;\n            this.privAudioConfig = undefined;\n            this.privSpeechTranslationConfig = undefined;\n            this.privConversation?.dispose();\n            this.privConversation = undefined;\n        })(), success, err);\n    }\n\n    /**\n     * Cancel the speech websocket\n     */\n    private async cancelSpeech(): Promise<void> {\n        try {\n            this.privIsSpeaking = false;\n            await this.privCTRecognizer?.onDisconnection();\n            this.privCTRecognizer = undefined;\n        } catch (e) {\n            // ignore the error\n        }\n    }\n\n    /**\n     * Connect to the speech translation recognizer.\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\n     * @param cb\n     * @param err\n     */\n    private async connectTranslatorRecognizer(): Promise<void> {\n        try {\n\n            if (this.privAudioConfig === undefined) {\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\n            }\n\n            // clear the temp subscription key if it's a participant joining\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\n                === this.privPlaceholderKey) {\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\n            }\n\n            // TODO\n            const token: string = encodeURIComponent(this.privConversation.room.token);\n\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\n\n            const url: string = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\n\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\n\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\n        } catch (error) {\n            await this.cancelSpeech();\n            throw error;\n        }\n    }\n\n    /**\n     * Handle the start speaking request\n     * @param cb\n     * @param err\n     */\n    private startContinuousRecognition(): Promise<void> {\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\n        });\n    }\n\n    private get canSpeak(): boolean {\n\n        // is there a Conversation websocket available and has the Recognizer been set up\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\n            return false;\n        }\n\n        // is the user already speaking\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\n            return false;\n        }\n\n        // is the user muted\n        if (this.privConversation.isMutedByHost) {\n            return false;\n        }\n\n        return true;\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { Contracts } from \"../Contracts\";\nimport {\n    AudioConfig,\n    CancellationEventArgs,\n    ConversationTranscriptionEventArgs,\n    PropertyCollection,\n    PropertyId,\n    SessionEventArgs,\n} from \"../Exports\";\nimport {\n    ConversationHandler,\n    ConversationImpl,\n    ConversationTranscriptionHandler,\n} from \"./Exports\";\nimport { Callback, IConversation } from \"./IConversation\";\n\nexport class ConversationTranscriber implements ConversationTranscriptionHandler {\n    private privDisposedRecognizer: boolean;\n    private privRecognizer: TranscriberRecognizer;\n    private privProperties: PropertyCollection;\n    protected privAudioConfig: AudioConfig;\n\n    /**\n     * ConversationTranscriber constructor.\n     * @constructor\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(audioConfig?: AudioConfig) {\n        this.privAudioConfig = audioConfig;\n        this.privProperties = new PropertyCollection();\n        this.privRecognizer = undefined;\n        this.privDisposedRecognizer = false;\n    }\n\n    /**\n     * The event canceled signals that an error occurred during transcription.\n     * @member ConversationTranscriber.prototype.canceled\n     * @function\n     * @public\n     */\n    public canceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\n\n    /**\n     * @param {Conversation} converation - conversation to be recognized\n     */\n    public joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void {\n        const conversationImpl = conversation as ConversationImpl;\n        Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\");\n\n        // ref the conversation object\n        // create recognizer and subscribe to recognizer events\n        this.privRecognizer = new TranscriberRecognizer(conversation.config, this.privAudioConfig);\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\n        this.privRecognizer.connectCallbacks(this);\n\n        marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\n    }\n\n     /**\n      * The event recognized signals that a final conversation transcription result is received.\n      * @member ConversationTranscriber.prototype.transcribed\n      * @function\n      * @public\n      */\n    public transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\n\n     /**\n      * The event recognizing signals that an intermediate conversation transcription result is received.\n      * @member ConversationTranscriber.prototype.transcribing\n      * @function\n      * @public\n      */\n    public transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\n\n    /**\n     * Defines event handler for session started events.\n     * @member ConversationTranscriber.prototype.sessionStarted\n     * @function\n     * @public\n     */\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Defines event handler for session stopped events.\n     * @member ConversationTranscriber.prototype.sessionStopped\n     * @function\n     * @public\n     */\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member ConversationTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member ConversationTranscriber.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * Gets the spoken language of recognition.\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\n     * @function\n     * @public\n     * @returns {string} The spoken language of recognition.\n     */\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    /**\n     * The collection of properties and their values defined for this ConversationTranscriber.\n     * @member ConversationTranscriber.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\n     * User must subscribe to events to receive transcription results.\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the transcription has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\n    }\n\n    /**\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\n     * User must subscribe to events to receive transcription results.\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\n     * @function\n     * @public\n     * @param cb - Callback invoked once the transcription has started.\n     * @param err - Callback invoked in case of an error.\n     */\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\n    }\n\n    /**\n     * Leave the current conversation. After this is called, you will no longer receive any events.\n     */\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\n        this.privRecognizer.disconnectCallbacks();\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\n    }\n\n    /**\n     * closes all external resources held by an instance of this class.\n     * @member ConversationTranscriber.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member ConversationTranscriber.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedRecognizer) {\n            return;\n        }\n        if (!!this.privRecognizer) {\n            await this.privRecognizer.close();\n            this.privRecognizer = undefined;\n        }\n        if (disposing) {\n            this.privDisposedRecognizer = true;\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nimport { PropertyCollection } from \"../Exports\";\n\n/**\n * Represents a user in a conversation.\n * Added in version 1.4.0\n */\nexport interface IUser {\n    /** Gets the user's ID */\n    readonly userId: string;\n}\n\nexport class User implements IUser {\n    private privUserId: string;\n\n    constructor(userId: string) {\n        this.privUserId = userId;\n    }\n\n    public get userId(): string {\n        return this.privUserId;\n    }\n}\n\nexport interface VoiceSignature {\n    Version: number;\n    Tag: string;\n    Data: string;\n}\n\nexport interface TranscriptionParticipant {\n    /** The unique identifier for the participant. */\n    readonly id: string;\n    /** The participant's preferred spoken language. */\n    readonly preferredLanguage: string;\n    /** The participant's voice signature */\n    readonly voice: string;\n}\n\n/**\n * Represents a participant in a conversation.\n * Added in version 1.4.0\n */\nexport interface IParticipant extends TranscriptionParticipant {\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\n    readonly avatar: string;\n    /**\n     * The participant's display name. Please note that there may be more than one participant\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\n     */\n    readonly displayName: string;\n    /** Gets whether or not this participant is the host. */\n    readonly isHost: boolean;\n    /** Gets whether or not this participant is muted. */\n    readonly isMuted: boolean;\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\n    readonly isUsingTts: boolean;\n    /** Contains properties of the participant. */\n    readonly properties: PropertyCollection;\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class Participant implements IParticipant {\n    private privAvatar: string;\n    private privDisplayName: string;\n    private privId: string;\n    private privIsHost: boolean;\n    private privIsMuted: boolean;\n    private privIsUsingTts: boolean;\n    private privPreferredLanguage: string;\n    private privVoice: string;\n    private privProperties: PropertyCollection;\n\n    constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\n        this.privId = id;\n        this.privAvatar = avatar;\n        this.privDisplayName = displayName;\n        this.privIsHost = isHost;\n        this.privIsMuted = isMuted;\n        this.privIsUsingTts = isUsingTts;\n        this.privPreferredLanguage = preferredLanguage;\n        this.privVoice = voice;\n        this.privProperties = new PropertyCollection();\n    }\n\n    public static From(id: string, language: string, voice: string): IParticipant {\n        return new Participant(id, \"\", id, false, false, false, language, voice);\n    }\n\n    public get avatar(): string {\n        return this.privAvatar;\n    }\n\n    public get displayName(): string {\n        return this.privDisplayName;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public get preferredLanguage(): string {\n        return this.privPreferredLanguage;\n    }\n\n    public get isHost(): boolean {\n        return this.privIsHost;\n    }\n\n    public get isMuted(): boolean {\n        return this.privIsMuted;\n    }\n\n    public get isUsingTts(): boolean {\n        return this.privIsUsingTts;\n    }\n\n    public get voice(): string {\n        return this.privVoice;\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// Multi-device Conversation is a Preview feature.\n\nexport enum ParticipantChangedReason {\n    /** Participant has joined the conversation. */\n    JoinedConversation,\n\n    /** Participant has left the conversation. This could be voluntary, or involuntary\n     *  (e.g. they are experiencing networking issues).\n     */\n    LeftConversation,\n\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\n    Updated\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PathLike } from \"fs\";\nimport {\n    AutoDetectSourceLanguagesOpenRangeOptionName,\n    CognitiveSubscriptionKeyAuthentication,\n    CognitiveTokenAuthentication,\n    Context,\n    IAuthentication,\n    ISynthesisConnectionFactory,\n    OS,\n    SpeechServiceConfig,\n    SpeechSynthesisConnectionFactory,\n    SynthesisAdapterBase,\n    SynthesizerConfig,\n} from \"../common.speech/Exports\";\nimport {\n    createNoDashGuid,\n    IAudioDestination,\n    IStringDictionary,\n    marshalPromiseToCallbacks,\n    Queue\n} from \"../common/Exports\";\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\nimport {\n    PullAudioOutputStreamImpl,\n    PushAudioOutputStreamImpl\n} from \"./Audio/AudioOutputStream\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    AudioConfig,\n    AudioOutputStream,\n    AutoDetectSourceLanguageConfig,\n    PropertyCollection,\n    PropertyId,\n    PullAudioOutputStream,\n    PushAudioOutputStreamCallback,\n    SpeechConfig,\n    SpeechSynthesisBookmarkEventArgs,\n    SpeechSynthesisEventArgs,\n    SpeechSynthesisOutputFormat,\n    SpeechSynthesisResult,\n    SpeechSynthesisVisemeEventArgs,\n    SpeechSynthesisWordBoundaryEventArgs,\n} from \"./Exports\";\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\n\n/**\n * Defines the class SpeechSynthesizer for text to speech.\n * Updated in version 1.16.0\n * @class SpeechSynthesizer\n */\nexport class SpeechSynthesizer {\n    protected audioConfig: AudioConfig;\n    protected privAdapter: SynthesisAdapterBase;\n    protected privProperties: PropertyCollection;\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\n\n    /**\n     * Defines event handler for synthesis start events.\n     * @member SpeechSynthesizer.prototype.synthesisStarted\n     * @function\n     * @public\n     */\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\n\n    /**\n     * Defines event handler for synthesizing events.\n     * @member SpeechSynthesizer.prototype.synthesizing\n     * @function\n     * @public\n     */\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\n\n    /**\n     * Defines event handler for synthesis completed events.\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\n     * @function\n     * @public\n     */\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\n\n    /**\n     * Defines event handler for synthesis cancelled events.\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\n     * @function\n     * @public\n     */\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\n\n    /**\n     * Defines event handler for word boundary events\n     * @member SpeechSynthesizer.prototype.wordBoundary\n     * @function\n     * @public\n     */\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\n\n    /**\n     * Defines event handler for bookmark reached events\n     * Added in version 1.16.0\n     * @member SpeechSynthesizer.prototype.bookmarkReached\n     * @function\n     * @public\n     */\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\n\n    /**\n     * Defines event handler for viseme received event\n     * Added in version 1.16.0\n     * @member SpeechSynthesizer.prototype.visemeReceived\n     * @function\n     * @public\n     */\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\n\n    /**\n     * Gets the authorization token used to communicate with the service.\n     * @member SpeechSynthesizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @returns {string} Authorization token.\n     */\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    /**\n     * Gets/Sets the authorization token used to communicate with the service.\n     * @member SpeechSynthesizer.prototype.authorizationToken\n     * @function\n     * @public\n     * @param {string} token - Authorization token.\n     */\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    /**\n     * The collection of properties and their values defined for this SpeechSynthesizer.\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    /**\n     * Indicates if auto detect source language is enabled\n     * @member SpeechSynthesizer.prototype.properties\n     * @function\n     * @public\n     * @returns {boolean} if auto detect source language is enabled\n     */\n    public get autoDetectSourceLanguage(): boolean {\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\n    }\n\n    private privDisposed: boolean;\n    private privConnectionFactory: ISynthesisConnectionFactory;\n    private privSynthesizing: boolean;\n\n    /**\n     * SpeechSynthesizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\n     */\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\n\n        if (audioConfig !== null) {\n            if (audioConfig === undefined) {\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\n            } else {\n                this.audioConfig = audioConfig;\n            }\n        }\n\n        this.privProperties = speechConfigImpl.properties.clone();\n        this.privDisposed = false;\n        this.privSynthesizing = false;\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\n        this.implCommonSynthesizeSetup();\n    }\n\n    /**\n     * SpeechSynthesizer constructor.\n     * @constructor\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\n     */\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\n        return new SpeechSynthesizer(speechConfig, audioConfig);\n    }\n\n    public buildSsml(text: string): string {\n        const languageToDefaultVoice: IStringDictionary<string>  = {\n            [\"ar-EG\"]: \"Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)\",\n            [\"ar-SA\"]: \"Microsoft Server Speech Text to Speech Voice (ar-SA, Naayf)\",\n            [\"bg-BG\"]: \"Microsoft Server Speech Text to Speech Voice (bg-BG, Ivan)\",\n            [\"ca-ES\"]: \"Microsoft Server Speech Text to Speech Voice (ca-ES, HerenaRUS)\",\n            [\"cs-CZ\"]: \"Microsoft Server Speech Text to Speech Voice (cs-CZ, Jakub)\",\n            [\"da-DK\"]: \"Microsoft Server Speech Text to Speech Voice (da-DK, HelleRUS)\",\n            [\"de-AT\"]: \"Microsoft Server Speech Text to Speech Voice (de-AT, Michael)\",\n            [\"de-CH\"]: \"Microsoft Server Speech Text to Speech Voice (de-CH, Karsten)\",\n            [\"de-DE\"]: \"Microsoft Server Speech Text to Speech Voice (de-DE, HeddaRUS)\",\n            [\"el-GR\"]: \"Microsoft Server Speech Text to Speech Voice (el-GR, Stefanos)\",\n            [\"en-AU\"]: \"Microsoft Server Speech Text to Speech Voice (en-AU, HayleyRUS)\",\n            [\"en-CA\"]: \"Microsoft Server Speech Text to Speech Voice (en-CA, HeatherRUS)\",\n            [\"en-GB\"]: \"Microsoft Server Speech Text to Speech Voice (en-GB, HazelRUS)\",\n            [\"en-IE\"]: \"Microsoft Server Speech Text to Speech Voice (en-IE, Sean)\",\n            [\"en-IN\"]: \"Microsoft Server Speech Text to Speech Voice (en-IN, PriyaRUS)\",\n            [\"en-US\"]: \"Microsoft Server Speech Text to Speech Voice (en-US, AriaRUS)\",\n            [\"es-ES\"]: \"Microsoft Server Speech Text to Speech Voice (es-ES, HelenaRUS)\",\n            [\"es-MX\"]: \"Microsoft Server Speech Text to Speech Voice (es-MX, HildaRUS)\",\n            [\"fi-FI\"]: \"Microsoft Server Speech Text to Speech Voice (fi-FI, HeidiRUS)\",\n            [\"fr-CA\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CA, HarmonieRUS)\",\n            [\"fr-CH\"]: \"Microsoft Server Speech Text to Speech Voice (fr-CH, Guillaume)\",\n            [\"fr-FR\"]: \"Microsoft Server Speech Text to Speech Voice (fr-FR, HortenseRUS)\",\n            [\"he-IL\"]: \"Microsoft Server Speech Text to Speech Voice (he-IL, Asaf)\",\n            [\"hi-IN\"]: \"Microsoft Server Speech Text to Speech Voice (hi-IN, Kalpana)\",\n            [\"hr-HR\"]: \"Microsoft Server Speech Text to Speech Voice (hr-HR, Matej)\",\n            [\"hu-HU\"]: \"Microsoft Server Speech Text to Speech Voice (hu-HU, Szabolcs)\",\n            [\"id-ID\"]: \"Microsoft Server Speech Text to Speech Voice (id-ID, Andika)\",\n            [\"it-IT\"]: \"Microsoft Server Speech Text to Speech Voice (it-IT, LuciaRUS)\",\n            [\"ja-JP\"]: \"Microsoft Server Speech Text to Speech Voice (ja-JP, HarukaRUS)\",\n            [\"ko-KR\"]: \"Microsoft Server Speech Text to Speech Voice (ko-KR, HeamiRUS)\",\n            [\"ms-MY\"]: \"Microsoft Server Speech Text to Speech Voice (ms-MY, Rizwan)\",\n            [\"nb-NO\"]: \"Microsoft Server Speech Text to Speech Voice (nb-NO, HuldaRUS)\",\n            [\"nl-NL\"]: \"Microsoft Server Speech Text to Speech Voice (nl-NL, HannaRUS)\",\n            [\"pl-PL\"]: \"Microsoft Server Speech Text to Speech Voice (pl-PL, PaulinaRUS)\",\n            [\"pt-BR\"]: \"Microsoft Server Speech Text to Speech Voice (pt-BR, HeloisaRUS)\",\n            [\"pt-PT\"]: \"Microsoft Server Speech Text to Speech Voice (pt-PT, HeliaRUS)\",\n            [\"ro-RO\"]: \"Microsoft Server Speech Text to Speech Voice (ro-RO, Andrei)\",\n            [\"ru-RU\"]: \"Microsoft Server Speech Text to Speech Voice (ru-RU, EkaterinaRUS)\",\n            [\"sk-SK\"]: \"Microsoft Server Speech Text to Speech Voice (sk-SK, Filip)\",\n            [\"sl-SI\"]: \"Microsoft Server Speech Text to Speech Voice (sl-SI, Lado)\",\n            [\"sv-SE\"]: \"Microsoft Server Speech Text to Speech Voice (sv-SE, HedvigRUS)\",\n            [\"ta-IN\"]: \"Microsoft Server Speech Text to Speech Voice (ta-IN, Valluvar)\",\n            [\"te-IN\"]: \"Microsoft Server Speech Text to Speech Voice (te-IN, Chitra)\",\n            [\"th-TH\"]: \"Microsoft Server Speech Text to Speech Voice (th-TH, Pattara)\",\n            [\"tr-TR\"]: \"Microsoft Server Speech Text to Speech Voice (tr-TR, SedaRUS)\",\n            [\"vi-VN\"]: \"Microsoft Server Speech Text to Speech Voice (vi-VN, An)\",\n            [\"zh-CN\"]: \"Microsoft Server Speech Text to Speech Voice (zh-CN, HuihuiRUS)\",\n            [\"zh-HK\"]: \"Microsoft Server Speech Text to Speech Voice (zh-HK, TracyRUS)\",\n            [\"zh-TW\"]: \"Microsoft Server Speech Text to Speech Voice (zh-TW, HanHanRUS)\",\n        };\n\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\n        if (this.autoDetectSourceLanguage) {\n            language = \"en-US\";\n        } else {\n            voice = voice || languageToDefaultVoice[language];\n        }\n        if (voice) {\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\n        }\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\n        return ssml;\n    }\n\n    /**\n     * Executes speech synthesis on plain text.\n     * The task returns the synthesis result.\n     * @member SpeechSynthesizer.prototype.speakTextAsync\n     * @function\n     * @public\n     * @param text - Text to be synthesized.\n     * @param cb - Callback that received the SpeechSynthesisResult.\n     * @param err - Callback invoked in case of an error.\n     * @param stream - AudioOutputStream to receive the synthesized audio.\n     */\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\n        this.speakImpl(text, false, cb, err, stream);\n    }\n\n    /**\n     * Executes speech synthesis on SSML.\n     * The task returns the synthesis result.\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\n     * @function\n     * @public\n     * @param ssml - SSML to be synthesized.\n     * @param cb - Callback that received the SpeechSynthesisResult.\n     * @param err - Callback invoked in case of an error.\n     * @param stream - AudioOutputStream to receive the synthesized audio.\n     */\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\n        this.speakImpl(ssml, true, cb, err, stream);\n    }\n\n    /**\n     * Dispose of associated resources.\n     * @member SpeechSynthesizer.prototype.close\n     * @function\n     * @public\n     */\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        Contracts.throwIfDisposed(this.privDisposed);\n\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\n    }\n\n    /**\n     * @Internal\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    public get internalData(): object {\n        return this.privAdapter;\n    }\n\n    /**\n     * This method performs cleanup of resources.\n     * The Boolean parameter disposing indicates whether the method is called\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\n     * Derived classes should override this method to dispose resource if needed.\n     * @member SpeechSynthesizer.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - Flag to request disposal.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposed) {\n            return;\n        }\n\n        if (disposing) {\n            if (this.privAdapter) {\n                await this.privAdapter.dispose();\n            }\n        }\n\n        this.privDisposed = true;\n    }\n\n    //\n    // ################################################################################################################\n    // IMPLEMENTATION.\n    // Move to independent class\n    // ################################################################################################################\n    //\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\n        return new SynthesizerConfig(\n            speechConfig,\n            this.privProperties);\n    }\n\n    // Creates the synthesis adapter\n    protected createSynthesisAdapter(\n        authentication: IAuthentication,\n        connectionFactory: ISynthesisConnectionFactory,\n        audioConfig: AudioConfig,\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\n        return new SynthesisAdapterBase(authentication, connectionFactory,\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\n    }\n\n    protected implCommonSynthesizeSetup(): void {\n\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\n        let osName = \"unknown\";\n        let osVersion = \"unknown\";\n\n        if (typeof navigator !== \"undefined\") {\n            osPlatform = osPlatform + \"/\" + navigator.platform;\n            osName = navigator.userAgent;\n            osVersion = navigator.appVersion;\n        }\n\n        const synthesizerConfig = this.createSynthesizerConfig(\n            new SpeechServiceConfig(\n                new Context(new OS(osPlatform, osName, osVersion))));\n\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\n            new CognitiveTokenAuthentication(\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return Promise.resolve(authorizationToken);\n                },\n                (authFetchEventId: string): Promise<string> => {\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\n                    return Promise.resolve(authorizationToken);\n                });\n\n        this.privAdapter = this.createSynthesisAdapter(\n            authentication,\n            this.privConnectionFactory,\n            this.audioConfig,\n            synthesizerConfig);\n\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\n            (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\n        );\n    }\n\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\n        try {\n            Contracts.throwIfDisposed(this.privDisposed);\n            const requestId = createNoDashGuid();\n            let audioDestination;\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\n            } else if (dataStream instanceof PullAudioOutputStream) {\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\n            } else if (dataStream !== undefined) {\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\n            } else {\n                audioDestination = undefined;\n            }\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\n                this.privSynthesizing = false;\n                if (!!cb) {\n                    try {\n                        cb(e);\n                    } catch (e) {\n                        if (!!err) {\n                            err(e);\n                        }\n                    }\n                }\n                cb = undefined;\n                /* tslint:disable:no-empty */\n                this.adapterSpeak().catch(() => { });\n\n            }, (e: string): void => {\n                if (!!err) {\n                    err(e);\n                }\n            }, audioDestination));\n\n            /* tslint:disable:no-empty */\n            this.adapterSpeak().catch(() => { });\n\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n\n            // Destroy the synthesizer.\n            /* tslint:disable:no-empty */\n            this.dispose(true).catch(() => { });\n        }\n    }\n\n    protected async adapterSpeak(): Promise<void> {\n        if (!this.privDisposed && !this.privSynthesizing) {\n            this.privSynthesizing = true;\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\n        }\n    }\n\n    private static XMLEncode(text: string): string {\n        return text.replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&apos;\");\n    }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SynthesisRequest {\n    public requestId: string;\n    public text: string;\n    public isSSML: boolean;\n    public cb: (e: SpeechSynthesisResult) => void;\n    public err: (e: string) => void;\n    public dataStream: IAudioDestination;\n\n    constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\n        this.requestId = requestId;\n        this.text = text;\n        this.isSSML = isSSML;\n        this.cb = cb;\n        this.err = err;\n        this.dataStream = dataStream;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection, ResultReason } from \"./Exports\";\n\n/**\n * Defines result of speech synthesis.\n * @class SpeechSynthesisResult\n * Added in version 1.11.0\n */\nexport class SpeechSynthesisResult {\n    private privResultId: string;\n    private privReason: ResultReason;\n    private privAudioData: ArrayBuffer;\n    private privErrorDetails: string;\n    private privProperties: PropertyCollection;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {string} resultId - The result id.\n     * @param {ResultReason} reason - The reason.\n     * @param {number} audioData - The offset into the stream.\n     * @param {string} errorDetails - Error details, if provided.\n     * @param {PropertyCollection} properties - Additional properties, if provided.\n     */\n    constructor(resultId?: string, reason?: ResultReason,  audioData?: ArrayBuffer,\n                errorDetails?: string, properties?: PropertyCollection) {\n        this.privResultId = resultId;\n        this.privReason = reason;\n        this.privAudioData = audioData;\n        this.privErrorDetails = errorDetails;\n        this.privProperties = properties;\n    }\n\n    /**\n     * Specifies the result identifier.\n     * @member SpeechSynthesisResult.prototype.resultId\n     * @function\n     * @public\n     * @returns {string} Specifies the result identifier.\n     */\n    public get resultId(): string {\n        return this.privResultId;\n    }\n\n    /**\n     * Specifies status of the result.\n     * @member SpeechSynthesisResult.prototype.reason\n     * @function\n     * @public\n     * @returns {ResultReason} Specifies status of the result.\n     */\n    public get reason(): ResultReason {\n        return this.privReason;\n    }\n\n    /**\n     * The synthesized audio data\n     * @member SpeechSynthesisResult.prototype.audioData\n     * @function\n     * @public\n     * @returns {ArrayBuffer} The synthesized audio data.\n     */\n    public get audioData(): ArrayBuffer {\n        return this.privAudioData;\n    }\n\n    /**\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\n     * @member SpeechSynthesisResult.prototype.errorDetails\n     * @function\n     * @public\n     * @returns {string} a brief description of an error.\n     */\n    public get errorDetails(): string {\n        return this.privErrorDetails;\n    }\n\n    /**\n     *  The set of properties exposed in the result.\n     * @member SpeechSynthesisResult.prototype.properties\n     * @function\n     * @public\n     * @returns {PropertyCollection} The set of properties exposed in the result.\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SpeechSynthesisResult } from \"./Exports\";\n\n/**\n * Defines contents of speech synthesis events.\n * @class SpeechSynthesisEventArgs\n * Added in version 1.11.0\n */\nexport class SpeechSynthesisEventArgs {\n    private readonly privResult: SpeechSynthesisResult;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\n     */\n    public constructor(result: SpeechSynthesisResult) {\n        this.privResult = result;\n    }\n\n    /**\n     * Specifies the synthesis result.\n     * @member SpeechSynthesisEventArgs.prototype.result\n     * @function\n     * @public\n     * @returns {SpeechSynthesisResult} the synthesis result.\n     */\n    public get result(): SpeechSynthesisResult {\n        return this.privResult;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines contents of speech synthesis word boundary event.\n * @class SpeechSynthesisWordBoundaryEventArgs\n * Added in version 1.11.0\n */\nexport class SpeechSynthesisWordBoundaryEventArgs {\n    private privAudioOffset: number;\n    private privText: string;\n    private privWordLength: number;\n    private privTextOffset: number;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {number} audioOffset - The audio offset.\n     * @param {string} text - The text.\n     * @param {number} wordLength - The length of the word.\n     * @param {number} textOffset - The text offset.\n     */\n    public constructor(audioOffset: number, text: string, wordLength: number, textOffset: number) {\n        this.privAudioOffset = audioOffset;\n        this.privText = text;\n        this.privWordLength = wordLength;\n        this.privTextOffset = textOffset;\n    }\n\n    /**\n     * Specifies the audio offset.\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\n     * @function\n     * @public\n     * @returns {number} the audio offset.\n     */\n    public get audioOffset(): number {\n        return this.privAudioOffset;\n    }\n\n    /**\n     * Specifies the text of the word boundary event.\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\n     * @function\n     * @public\n     * @returns {string} the text.\n     */\n    public get text(): string {\n        return this.privText;\n    }\n\n    /**\n     * Specifies the word length\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\n     * @function\n     * @public\n     * @returns {number} the word length\n     */\n    public get wordLength(): number {\n        return this.privWordLength;\n    }\n\n    /**\n     * Specifies the text offset.\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\n     * @function\n     * @public\n     * @returns {number} the text offset.\n     */\n    public get textOffset(): number {\n        return this.privTextOffset;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines contents of speech synthesis bookmark event.\n * @class SpeechSynthesisBookmarkEventArgs\n * Added in version 1.16.0\n */\nexport class SpeechSynthesisBookmarkEventArgs {\n    private privAudioOffset: number;\n    private privText: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {number} audioOffset - The audio offset.\n     * @param {string} text - The bookmark text.\n     */\n    public constructor(audioOffset: number, text: string) {\n        this.privAudioOffset = audioOffset;\n        this.privText = text;\n    }\n\n    /**\n     * Specifies the audio offset.\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\n     * @function\n     * @public\n     * @returns {number} the audio offset.\n     */\n    public get audioOffset(): number {\n        return this.privAudioOffset;\n    }\n\n    /**\n     * Specifies the bookmark.\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\n     * @function\n     * @public\n     * @returns {string} the bookmark text.\n     */\n    public get text(): string {\n        return this.privText;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines contents of speech synthesis viseme event.\n * @class SpeechSynthesisVisemeEventArgs\n * Added in version 1.16.0\n */\nexport class SpeechSynthesisVisemeEventArgs {\n    private privAudioOffset: number;\n    private privVisemeId: number;\n    private privAnimation: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param {number} audioOffset - The audio offset.\n     * @param {number} visemeId - The viseme ID.\n     * @param {string} animation - The animation, could be in svg or other format.\n     */\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\n        this.privAudioOffset = audioOffset;\n        this.privVisemeId = visemeId;\n        this.privAnimation = animation;\n    }\n\n    /**\n     * Specifies the audio offset.\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\n     * @function\n     * @public\n     * @returns {number} the audio offset.\n     */\n    public get audioOffset(): number {\n        return this.privAudioOffset;\n    }\n\n    /**\n     * Specifies the viseme ID.\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\n     * @function\n     * @public\n     * @returns {number} the viseme ID.\n     */\n    public get visemeId(): number {\n        return this.privVisemeId;\n    }\n\n    /**\n     * Specifies the animation.\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\n     * @function\n     * @public\n     * @returns {string} the animation, could be in svg or other format.\n     */\n    public get animation(): string {\n        return this.privAnimation;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\nimport {\n    BackgroundEvent,\n    createNoDashGuid,\n    Events,\n    IAudioDestination,\n    INumberDictionary\n} from \"../../common/Exports\";\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\n\nconst MediaDurationPlaceholderSeconds = 60 * 30;\n\nconst AudioFormatToMimeType: INumberDictionary<string> = {\n    [AudioFormatTag.PCM]: \"audio/wav\",\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\n};\n\n/**\n * Represents the speaker playback audio destination, which only works in browser.\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\n * @class SpeakerAudioDestination\n * Updated in version 1.17.0\n */\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\n    private readonly privId: string;\n    private privFormat: AudioOutputFormatImpl;\n    private privAudio: HTMLAudioElement;\n    private privMediaSource: MediaSource;\n    private privSourceBuffer: SourceBuffer;\n    private privPlaybackStarted: boolean = false;\n    private privAudioBuffer: ArrayBuffer[];\n    private privAppendingToBuffer: boolean = false;\n    private privMediaSourceOpened: boolean = false;\n    private privIsClosed: boolean;\n    private privIsPaused: boolean;\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\n    private privBytesReceived: number = 0;\n\n    public constructor(audioDestinationId?: string) {\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\n        this.privIsPaused = false;\n        this.privIsClosed = false;\n    }\n\n    public id(): string {\n        return this.privId;\n    }\n\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\n        if (this.privAudioBuffer !== undefined) {\n            this.privAudioBuffer.push(buffer);\n            this.updateSourceBuffer().then(() => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string): void => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n        } else if (this.privAudioOutputStream !== undefined) {\n            this.privAudioOutputStream.write(buffer);\n            this.privBytesReceived += buffer.byteLength;\n        }\n    }\n\n    public close(cb?: () => void, err?: (error: string) => void): void {\n        this.privIsClosed = true;\n        if (this.privSourceBuffer !== undefined) {\n            this.handleSourceBufferUpdateEnd().then(() => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string): void => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n        } else if (this.privAudioOutputStream !== undefined) {\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\n                // tslint:disable-next-line:no-console\n                console.warn(`Play back is not supported for raw PCM, mulaw or alaw format without header.`);\n                if (!!this.onAudioEnd) {\n                    this.onAudioEnd(this);\n                }\n            } else {\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\n                this.privAudioOutputStream.read(receivedAudio).then((_: number): void => {\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\n                    this.notifyPlayback().then(() => {\n                        if (!!cb) {\n                            cb();\n                        }\n                    }, (error: string): void => {\n                        if (!!err) {\n                            err(error);\n                        }\n                    });\n                }, (error: string): void => {\n                    if (!!err) {\n                        err(error);\n                    }\n                });\n            }\n        } else {\n            // unsupported format, call onAudioEnd directly.\n            if (!!this.onAudioEnd) {\n                this.onAudioEnd(this);\n            }\n        }\n    }\n\n    set format(format: AudioStreamFormat) {\n        if (typeof (AudioContext) !== \"undefined\" || typeof ((window as any).webkitAudioContext) !== \"undefined\") {\n            this.privFormat = format as AudioOutputFormatImpl;\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\n            if (mimeType === undefined) {\n                // tslint:disable-next-line:no-console\n                console.warn(\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\n\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\n                this.privAudio = new Audio();\n                this.privAudioBuffer = [];\n                this.privMediaSource = new MediaSource();\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\n                this.privAudio.load();\n                this.privMediaSource.onsourceopen = (event: Event): void => {\n                    this.privMediaSourceOpened = true;\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\n                    this.privSourceBuffer.onupdate = (_: Event) => {\n                        this.updateSourceBuffer().catch((reason: string): void => {\n                            Events.instance.onEvent(new BackgroundEvent(reason));\n                        });\n                    };\n                    this.privSourceBuffer.onupdateend = (_: Event) => {\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\n                            Events.instance.onEvent(new BackgroundEvent(reason));\n                        });\n                    };\n                    this.privSourceBuffer.onupdatestart = (_: Event) => {\n                        this.privAppendingToBuffer = false;\n                    };\n                };\n                this.updateSourceBuffer().catch((reason: string): void => {\n                    Events.instance.onEvent(new BackgroundEvent(reason));\n                });\n\n            } else {\n                // tslint:disable-next-line:no-console\n                console.warn(\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\n                this.privAudioOutputStream.format = this.privFormat;\n                this.privAudio = new Audio();\n            }\n        }\n    }\n\n    public get isClosed(): boolean {\n        return this.privIsClosed;\n    }\n\n    public get currentTime(): number {\n        if (this.privAudio !== undefined) {\n            return this.privAudio.currentTime;\n        }\n        return -1;\n    }\n\n    public pause(): void {\n        if (!this.privIsPaused && this.privAudio !== undefined) {\n            this.privAudio.pause();\n            this.privIsPaused = true;\n        }\n    }\n\n    public resume(cb?: () => void, err?: (error: string) => void): void {\n        if (this.privIsPaused && this.privAudio !== undefined) {\n            this.privAudio.play().then(() => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string): void => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n            this.privIsPaused = false;\n        }\n    }\n\n    public onAudioStart: (sender: IPlayer) => void;\n\n    public onAudioEnd: (sender: IPlayer) => void;\n\n    public get internalAudio(): HTMLAudioElement {\n        return this.privAudio;\n    }\n\n    private async updateSourceBuffer(): Promise<void> {\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\n            this.privAppendingToBuffer = true;\n            const binary = this.privAudioBuffer.shift();\n            try {\n                this.privSourceBuffer.appendBuffer(binary);\n            } catch (error) {\n                this.privAudioBuffer.unshift(binary);\n                // tslint:disable-next-line:no-console\n                console.log(\n                    \"buffer filled, pausing addition of binaries until space is made\");\n                return;\n            }\n            await this.notifyPlayback();\n        } else if (this.canEndStream()) {\n            await this.handleSourceBufferUpdateEnd();\n        }\n    }\n\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\n            this.privMediaSource.endOfStream();\n            await this.notifyPlayback();\n        }\n    }\n\n    private async notifyPlayback(): Promise<void> {\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\n            this.privPlaybackStarted = true;\n            if (!!this.onAudioStart) {\n                this.onAudioStart(this);\n            }\n            this.privAudio.onended = (): void => {\n                if (!!this.onAudioEnd) {\n                    this.onAudioEnd(this);\n                }\n            };\n            if (!this.privIsPaused) {\n                await this.privAudio.play();\n            }\n        }\n    }\n\n    private canEndStream(): boolean {\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\n    }\n\n    private sourceBufferAvailable(): boolean {\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CancellationEventArgsBase,\n} from \"./CancellationEventArgsBase\";\n\n/**\n * Defines content of a RecognitionErrorEvent.\n * @class ConversationTranscriptionCanceledEventArgs\n */\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\n * Added in version 1.15.0\n * @class PronunciationAssessmentGradingSystem\n */\nexport enum PronunciationAssessmentGradingSystem {\n    /**\n     * Five point calibration\n     * @member PronunciationAssessmentGradingSystem.FivePoint\n     */\n    FivePoint = 1,\n\n    /**\n     * Hundred mark\n     * @member PronunciationAssessmentGradingSystem.HundredMark\n     */\n    HundredMark,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\n * Added in version 1.15.0\n * @class PronunciationAssessmentGranularity\n */\nexport enum PronunciationAssessmentGranularity {\n    /**\n     * Shows the score on the full text, word and phoneme level\n     * @member PronunciationAssessmentGranularity.Phoneme\n     */\n    Phoneme = 1,\n\n    /**\n     * Shows the score on the full text and word level\n     * @member PronunciationAssessmentGranularity.Word\n     */\n    Word,\n\n    /**\n     * Shows the score on the full text level only\n     * @member PronunciationAssessmentGranularity.FullText\n     */\n    FullText,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\nimport { Contracts } from \"./Contracts\";\nimport {\n    PronunciationAssessmentGradingSystem,\n    PronunciationAssessmentGranularity,\n    PropertyCollection,\n    PropertyId,\n    Recognizer\n} from \"./Exports\";\n\n/**\n * Pronunciation assessment configuration.\n * @class PronunciationAssessmentConfig\n * Added in version 1.15.0.\n */\nexport class PronunciationAssessmentConfig {\n    private privProperties: PropertyCollection;\n\n    /**\n     * PronunciationAssessmentConfig constructor.\n     * @constructor\n     * @param {string} referenceText\n     * @param gradingSystem\n     * @param granularity\n     * @param enableMiscue\n     */\n    public constructor(referenceText: string,\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\n                       enableMiscue: boolean = false) {\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\n        this.privProperties = new PropertyCollection();\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\n    }\n\n    /**\n     * @member PronunciationAssessmentConfig.fromJSON\n     * @function\n     * @public\n     * @param {string} json The json string containing the pronunciation assessment parameters.\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\n     */\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\n        Contracts.throwIfNullOrUndefined(json, \"json\");\n        const config = new PronunciationAssessmentConfig(\"\");\n        config.privProperties = new PropertyCollection();\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\n        return config;\n    }\n\n    public toJSON(): string {\n        this.updateJson();\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\n    }\n\n    public applyTo(recognizer: Recognizer): void {\n        this.updateJson();\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\n    }\n\n    /**\n     * Gets the reference text.\n     * @member PronunciationAssessmentConfig.prototype.referenceText\n     * @function\n     * @public\n     * @returns {string} Reference text.\n     */\n    public get referenceText(): string {\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n    }\n\n    /**\n     * Gets/Sets the reference text.\n     * @member PronunciationAssessmentConfig.prototype.referenceText\n     * @function\n     * @public\n     * @param {string} referenceText - Reference text.\n     */\n    public set referenceText(referenceText: string) {\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\n    }\n\n    /**\n     * @member PronunciationAssessmentConfig.prototype.properties\n     * @function\n     * @public\n     * @return {PropertyCollection} Properties of the config.\n     * @summary Gets a pronunciation assessment config properties\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    private updateJson(): void {\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\n        const paramsJson = JSON.parse(jsonString);\n\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\n        if (referenceText) {\n            paramsJson.referenceText = referenceText;\n        }\n\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\n        if (gradingSystem) {\n            paramsJson.gradingSystem = gradingSystem;\n        }\n\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\n        if (granularity) {\n            paramsJson.granularity = granularity;\n        }\n\n        // always set dimension to Comprehensive\n        paramsJson.dimension = \"Comprehensive\";\n\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\n        if (enableMiscueString === \"true\") {\n            paramsJson.enableMiscue = true;\n        } else if (enableMiscueString === \"false\") {\n            paramsJson.enableMiscue = false;\n        }\n\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {Contracts} from \"./Contracts\";\nimport {\n    PropertyId,\n    RecognitionResult\n} from \"./Exports\";\n\n/**\n * Pronunciation assessment results.\n * @class PronunciationAssessmentResult\n * Added in version 1.15.0.\n */\nexport class PronunciationAssessmentResult {\n    private privPronJson: any;\n\n    private constructor(jsonString: string) {\n        const j = JSON.parse(jsonString);\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\n        this.privPronJson = j.NBest[0];\n    }\n\n    /**\n     * @member PronunciationAssessmentResult.fromResult\n     * @function\n     * @public\n     * @param {RecognitionResult} result The recognition result.\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\n     */\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\n        Contracts.throwIfNullOrUndefined(result, \"result\");\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\n        Contracts.throwIfNullOrUndefined(json, \"json\");\n        return new PronunciationAssessmentResult(json);\n    }\n\n    /**\n     * Gets the detail result of pronunciation assessment.\n     * @member PronunciationAssessmentConfig.prototype.detailResult\n     * @function\n     * @public\n     * @returns {any} detail result.\n     */\n    public get detailResult(): any {\n        return this.privPronJson;\n    }\n\n    /**\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\n     * how closely the phonemes match a native speaker's pronunciation.\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\n     * @function\n     * @public\n     * @returns {number} Accuracy score.\n     */\n    public get accuracyScore(): number {\n        return this.detailResult.PronunciationAssessment.AccuracyScore;\n    }\n\n    /**\n     * The overall score indicating the pronunciation quality of the given speech.\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\n     * @function\n     * @public\n     * @returns {number} Pronunciation score.\n     */\n    public get pronunciationScore(): number {\n        return this.detailResult.PronunciationAssessment.PronScore;\n    }\n\n    /**\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\n     * @member PronunciationAssessmentResult.prototype.completenessScore\n     * @function\n     * @public\n     * @returns {number} Completeness score.\n     */\n    public get completenessScore(): number {\n        return this.detailResult.PronunciationAssessment.CompletenessScore;\n    }\n\n    /**\n     * The score indicating the fluency of the given speech.\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\n     * @function\n     * @public\n     * @returns {number} Fluency score.\n     */\n    public get fluencyScore(): number {\n        return this.detailResult.PronunciationAssessment.FluencyScore;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { EventType, PlatformEvent } from \"../common/Exports\";\n\nexport class SpeechRecognitionEvent extends PlatformEvent {\n    private privRequestId: string;\n    private privSessionId: string;\n\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n\n        this.privRequestId = requestId;\n        this.privSessionId = sessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n}\n\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\n        super(\"ListeningStartedEvent\", requestId, sessionId);\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n}\n\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\n    private privAuthFetchEventid: string;\n\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\n        this.privAuthFetchEventid = authFetchEventid;\n    }\n\n    public get authFetchEventid(): string {\n        return this.privAuthFetchEventid;\n    }\n}\n\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAuthFetchEventId: string;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n        this.privAuthFetchEventId = authFetchEventId;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n}\n\nexport enum RecognitionCompletionStatus {\n    Success,\n    AudioSourceError,\n    AudioSourceTimeout,\n    AuthTokenFetchError,\n    AuthTokenFetchTimeout,\n    UnAuthorized,\n    ConnectTimeout,\n    ConnectError,\n    ClientRecognitionActivityTimeout,\n    UnknownError,\n}\n\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAuthFetchEventId: string;\n    private privServiceTag: string;\n    private privStatus: RecognitionCompletionStatus;\n    private privError: string;\n\n    constructor(\n        requestId: string,\n        audioSourceId: string,\n        audioNodeId: string,\n        authFetchEventId: string,\n        sessionId: string,\n        serviceTag: string,\n        status: RecognitionCompletionStatus,\n        error: string) {\n\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\n\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privStatus = status;\n        this.privError = error;\n        this.privServiceTag = serviceTag;\n    }\n\n    public get audioSourceId(): string {\n        return this.privAudioSourceId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n\n    public get serviceTag(): string {\n        return this.privServiceTag;\n    }\n\n    public get status(): RecognitionCompletionStatus {\n        return this.privStatus;\n    }\n\n    public get error(): string {\n        return this.privError;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\nimport {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEvent,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    IDisposable,\n    IStreamChunk,\n    MessageType,\n    ServiceEvent,\n    Timeout\n} from \"../common/Exports\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyId,\n    RecognitionEventArgs,\n    Recognizer,\n    SessionEventArgs,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport { Callback } from \"../sdk/Transcription/IConversation\";\nimport {\n    AgentConfig,\n    DynamicGrammarBuilder,\n    ISpeechConfigAudioDevice,\n    RecognitionMode,\n    RequestSession,\n    SpeechContext,\n    SpeechDetected,\n    type\n} from \"./Exports\";\nimport {\n    AuthInfo,\n    IAuthentication,\n} from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport abstract class ServiceRecognizerBase implements IDisposable {\n    private privAuthentication: IAuthentication;\n    private privConnectionFactory: IConnectionFactory;\n\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionConfigurationPromise: Promise<IConnection>;\n\n    // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionPromise: Promise<IConnection>;\n    private privAuthFetchEventId: string;\n    private privIsDisposed: boolean;\n    private privMustReportEndOfStream: boolean;\n    private privConnectionEvents: EventSource<ConnectionEvent>;\n    private privServiceEvents: EventSource<ServiceEvent>;\n    private privDynamicGrammar: DynamicGrammarBuilder;\n    private privAgentConfig: AgentConfig;\n    private privServiceHasSentMessage: boolean;\n    private privActivityTemplate: string;\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\n    private privAudioSource: IAudioSource;\n    private privIsLiveAudio: boolean = false;\n    protected privSpeechContext: SpeechContext;\n    protected privRequestSession: RequestSession;\n    protected privConnectionId: string;\n    protected privRecognizerConfig: RecognizerConfig;\n    protected privRecognizer: Recognizer;\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\n    protected privErrorCallback: (e: string) => void;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: Recognizer) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!audioSource) {\n            throw new ArgumentNullError(\"audioSource\");\n        }\n\n        if (!recognizerConfig) {\n            throw new ArgumentNullError(\"recognizerConfig\");\n        }\n\n        this.privMustReportEndOfStream = false;\n        this.privAuthentication = authentication;\n        this.privConnectionFactory = connectionFactory;\n        this.privAudioSource = audioSource;\n        this.privRecognizerConfig = recognizerConfig;\n        this.privIsDisposed = false;\n        this.privRecognizer = recognizer;\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\n        this.privServiceEvents = new EventSource<ServiceEvent>();\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\n        this.privAgentConfig = new AgentConfig();\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\n            this.privSetTimeout = Timeout.setTimeout;\n        }\n\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\n                if (connectionClosedEvent.statusCode === 1003 ||\n                    connectionClosedEvent.statusCode === 1007 ||\n                    connectionClosedEvent.statusCode === 1002 ||\n                    connectionClosedEvent.statusCode === 4000 ||\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\n                ) {\n                    await this.cancelRecognitionLocal(CancellationReason.Error,\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n                }\n            }\n        });\n    }\n\n    public get audioSource(): IAudioSource {\n        return this.privAudioSource;\n    }\n\n    public get speechContext(): SpeechContext {\n        return this.privSpeechContext;\n    }\n\n    public get dynamicGrammar(): DynamicGrammarBuilder {\n        return this.privDynamicGrammar;\n    }\n\n    public get agentConfig(): AgentConfig {\n        return this.privAgentConfig;\n    }\n\n    public set conversationTranslatorToken(token: string) {\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\n    }\n\n    public set authentication(auth: IAuthentication) {\n        this.privAuthentication = this.authentication;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privIsDisposed = true;\n        if (this.privConnectionConfigurationPromise) {\n            try {\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\n                await connection.dispose(reason);\n            } catch (error) {\n                // The connection is in a bad state. But we're trying to kill it, so...\n                return;\n            }\n        }\n    }\n\n    public get connectionEvents(): EventSource<ConnectionEvent> {\n        return this.privConnectionEvents;\n    }\n\n    public get serviceEvents(): EventSource<ServiceEvent> {\n        return this.privServiceEvents;\n    }\n\n    public get recognitionMode(): RecognitionMode {\n        return this.privRecognizerConfig.recognitionMode;\n    }\n\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\n\n    public async recognize(\n        recoMode: RecognitionMode,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallBack: (e: string) => void,\n    ): Promise<void> {\n\n        if (this.recognizeOverride !== undefined) {\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\n        }\n        // Clear the existing configuration promise to force a re-transmission of config and context.\n        this.privConnectionConfigurationPromise = null;\n        this.privRecognizerConfig.recognitionMode = recoMode;\n\n        this.privSuccessCallback = successCallback;\n        this.privErrorCallback = errorCallBack;\n\n        this.privRequestSession.startNewRecognition();\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\n\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n        const conPromise: Promise<IConnection> = this.connectImpl();\n        let audioNode: ReplayableAudioNode;\n\n        try {\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\n\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n\n        } catch (error) {\n            await this.privRequestSession.onStopRecognizing();\n            throw error;\n        }\n\n        try {\n            await conPromise;\n        } catch (error) {\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n            return;\n        }\n\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n        if (!!this.privRecognizer.sessionStarted) {\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n        }\n\n        const messageRetrievalPromise = this.receiveMessage();\n        const audioSendPromise = this.sendAudio(audioNode);\n\n        audioSendPromise.catch(async (error: string) => {\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        });\n\n        return;\n    }\n\n    public async stopRecognizing(): Promise<void> {\n        if (this.privRequestSession.isRecognizing) {\n            try {\n                await this.audioSource.turnOff();\n                await this.sendFinalAudio();\n                await this.privRequestSession.onStopRecognizing();\n                await this.privRequestSession.turnCompletionPromise;\n            } finally {\n                await this.privRequestSession.dispose();\n            }\n        }\n        return;\n    }\n\n    public async connect(): Promise<void> {\n        await this.connectImpl();\n        return Promise.resolve();\n    }\n\n    public connectAsync(cb?: Callback, err?: Callback): void {\n        this.connectImpl().then((connection: IConnection): void => {\n            try {\n                if (!!cb) {\n                    cb();\n                }\n            } catch (e) {\n                if (!!err) {\n                    err(e);\n                }\n            }\n        }, (reason: any): void => {\n            try {\n                if (!!err) {\n                    err(reason);\n                }\n                /* tslint:disable:no-empty */\n            } catch (error) {\n            }\n        });\n    }\n\n    protected disconnectOverride: () => Promise<void> = undefined;\n\n    public async disconnect(): Promise<void> {\n        await this.cancelRecognitionLocal(CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        if (this.disconnectOverride !== undefined) {\n            await this.disconnectOverride();\n        }\n\n        try {\n            await (await this.privConnectionPromise).dispose();\n        } catch (error) {\n\n        }\n\n        this.privConnectionPromise = null;\n    }\n\n    // Called when telemetry data is sent to the service.\n    // Used for testing Telemetry capture.\n    public static telemetryData: (json: string) => void;\n    public static telemetryDataEnabled: boolean = true;\n\n    public sendMessage(message: string): void { }\n\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\n\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\n    }\n\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\n    public get activityTemplate(): string { return this.privActivityTemplate; }\n\n    protected abstract processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        successCallback?: (e: SpeechRecognitionResult) => void,\n        errorCallBack?: (e: string) => void): Promise<boolean>;\n\n    protected async sendTelemetryData(): Promise<void> {\n        const telemetryData = this.privRequestSession.getTelemetry();\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\n            this.privIsDisposed ||\n            null === telemetryData) {\n            return;\n        }\n\n        if (!!ServiceRecognizerBase.telemetryData) {\n            try {\n                ServiceRecognizerBase.telemetryData(telemetryData);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"telemetry\",\n            this.privRequestSession.requestId,\n            \"application/json\",\n            telemetryData));\n    }\n\n    // Cancels recognition.\n    protected abstract cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void;\n\n    // Cancels recognition.\n    protected async cancelRecognitionLocal(\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): Promise<void> {\n\n        if (!!this.privRequestSession.isRecognizing) {\n            await this.privRequestSession.onStopRecognizing();\n\n            this.cancelRecognition(\n                this.privRequestSession.sessionId,\n                this.privRequestSession.requestId,\n                cancellationReason,\n                errorCode,\n                error);\n        }\n    }\n\n    protected receiveMessageOverride: () => Promise<void> = undefined;\n\n    protected async receiveMessage(): Promise<void> {\n        try {\n            if (this.privIsDisposed) {\n                // We're done.\n                return;\n            }\n\n            let connection = await this.fetchConnection();\n            const message = await connection.read();\n\n            if (this.receiveMessageOverride !== undefined) {\n                return this.receiveMessageOverride();\n            }\n\n            // indicates we are draining the queue and it came with no message;\n            if (!message) {\n                if (!this.privRequestSession.isRecognizing) {\n                    return;\n                } else {\n                    return this.receiveMessage();\n                }\n            }\n\n            this.privServiceHasSentMessage = true;\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\n                switch (connectionMessage.path.toLowerCase()) {\n                    case \"turn.start\":\n                        this.privMustReportEndOfStream = true;\n                        this.privRequestSession.onServiceTurnStartResponse();\n                        break;\n\n                    case \"speech.startdetected\":\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechStartDetected) {\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                        }\n                        break;\n\n                    case \"speech.enddetected\":\n                        let json: string;\n                        if (connectionMessage.textBody.length > 0) {\n                            json = connectionMessage.textBody;\n                        } else {\n                            // If the request was empty, the JSON returned is empty.\n                            json = \"{ Offset: 0 }\";\n                        }\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\n                        // Only shrink the buffers for continuous recognition.\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n                        }\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n                        if (!!this.privRecognizer.speechEndDetected) {\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                        }\n                        break;\n\n                    case \"turn.end\":\n                        await this.sendTelemetryData();\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\n                            this.privMustReportEndOfStream = false;\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\n                        }\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                            if (!!this.privRecognizer.sessionStopped) {\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                            }\n                            return;\n                        } else {\n                            connection = await this.fetchConnection();\n                            await this.sendPrePayloadJSON(connection);\n                        }\n                        break;\n\n                    default:\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\n                            if (!!this.privServiceEvents) {\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                            }\n                        }\n                }\n            }\n            return this.receiveMessage();\n        } catch (error) {\n            return null;\n        }\n    }\n\n    protected sendSpeechContext = (connection: IConnection): Promise<void> => {\n        const speechContextJson = this.speechContext.toJSON();\n\n        if (speechContextJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.context\",\n                this.privRequestSession.requestId,\n                \"application/json\",\n                speechContextJson));\n        }\n        return;\n    }\n\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\n\n    // Encapsulated for derived service recognizers that need to send additional JSON\n    protected async sendPrePayloadJSON(connection: IConnection): Promise<void> {\n        if (this.sendPrePayloadJSONOverride !== undefined) {\n            return this.sendPrePayloadJSONOverride(connection);\n        }\n\n        await this.sendSpeechContext(connection);\n        await this.sendWaveHeader(connection);\n        return;\n    }\n\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\n        // this.writeBufferToConsole(format.header);\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Binary,\n            \"audio\",\n            this.privRequestSession.requestId,\n            \"audio/x-wav\",\n            format.header\n        ));\n    }\n\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\n\n    // Establishes a websocket connection to the end point.\n    protected connectImpl(): Promise<IConnection> {\n        if (this.privConnectionPromise) {\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionPromise = null;\n                    this.privServiceHasSentMessage = false;\n                    return this.connectImpl();\n                }\n                return this.privConnectionPromise;\n            }, (error: string): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionPromise = null;\n                this.privServiceHasSentMessage = false;\n                return this.connectImpl();\n            });\n        }\n\n        this.privConnectionPromise = this.retryableConnect();\n\n        // Attach an empty handler to allow the promise to run in the background while\n        // other startup events happen. It'll eventually be awaited on.\n        this.privConnectionPromise.catch(() => { });\n\n        if (this.postConnectImplOverride !== undefined) {\n            return this.postConnectImplOverride(this.privConnectionPromise);\n        }\n\n        return this.privConnectionPromise;\n    }\n\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\n\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> => {\n        // filter out anything that is not required for the service to work.\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\n\n            const replacement: any = {\n                context: {\n                    system: withTelemetry.context.system,\n                },\n            };\n\n            SpeechServiceConfigJson = JSON.stringify(replacement);\n        }\n\n        if (this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\n            const json: { context: any } = JSON.parse(SpeechServiceConfigJson);\n            json.context.DisableReferenceChannel = \"True\";\n            json.context.MicSpec = \"1_0_0\";\n            SpeechServiceConfigJson = JSON.stringify(json);\n        }\n\n        if (SpeechServiceConfigJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.config\",\n                requestSession.requestId,\n                \"application/json\",\n                SpeechServiceConfigJson));\n        }\n\n        return;\n    }\n\n    protected async fetchConnection(): Promise<IConnection> {\n        if (this.privConnectionConfigurationPromise) {\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigurationPromise = null;\n                    this.privServiceHasSentMessage = false;\n                    return this.fetchConnection();\n                }\n                return this.privConnectionConfigurationPromise;\n            }, (error: string): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigurationPromise = null;\n                this.privServiceHasSentMessage = false;\n                return this.fetchConnection();\n            });\n        }\n\n        this.privConnectionConfigurationPromise = this.configureConnection();\n        return await this.privConnectionConfigurationPromise;\n    }\n\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\n\n        // The time we last sent data to the service.\n        let nextSendTime: number = Date.now();\n\n        // Max amount to send before we start to throttle\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\n\n        const readAndUploadCycle = async (): Promise<void> => {\n            // If speech is done, stop sending audio.\n            if (!this.privIsDisposed &&\n                !this.privRequestSession.isSpeechEnded &&\n                this.privRequestSession.isRecognizing &&\n                this.privRequestSession.recogNumber === startRecogNumber) {\n\n                const connection: IConnection = await this.fetchConnection();\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\n                // we have a new audio chunk to upload.\n                if (this.privRequestSession.isSpeechEnded) {\n                    // If service already recognized audio end then don't send any more audio\n                    return;\n                }\n\n                let payload: ArrayBuffer;\n                let sendDelay: number;\n\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\n                    payload = null;\n                    sendDelay = 0;\n                } else {\n                    payload = audioStreamChunk.buffer;\n\n                    this.privRequestSession.onAudioSent(payload.byteLength);\n\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\n                        sendDelay = 0;\n                    } else {\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\n                    }\n                }\n\n                if (0 !== sendDelay) {\n                    await this.delay(sendDelay);\n                }\n\n                if (payload !== null) {\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\n                }\n\n                // Are we still alive?\n                if (!this.privIsDisposed &&\n                    !this.privRequestSession.isSpeechEnded &&\n                    this.privRequestSession.isRecognizing &&\n                    this.privRequestSession.recogNumber === startRecogNumber) {\n                    connection.send(\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\n                    ).catch(() => {\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });\n                    });\n\n                    if (!audioStreamChunk?.isEnd) {\n                        // this.writeBufferToConsole(payload);\n                        // Regardless of success or failure, schedule the next upload.\n                        // If the underlying connection was broken, the next cycle will\n                        // get a new connection and re-transmit missing audio automatically.\n                        return readAndUploadCycle();\n                    } else {\n                        // the audio stream has been closed, no need to schedule next\n                        // read-upload cycle.\n                        if (!this.privIsLiveAudio) {\n                            this.privRequestSession.onSpeechEnded();\n                        }\n                    }\n                }\n            }\n        };\n\n        return readAndUploadCycle();\n    }\n\n    private async retryableConnect(): Promise<IConnection> {\n        let isUnAuthorized: boolean = false;\n\n        this.privAuthFetchEventId = createNoDashGuid();\n        const sessionId: string = this.privRequestSession.sessionId;\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\n\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n        let lastStatusCode: number = 0;\n        let lastReason: string = \"\";\n\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\n\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\n            // facing event when a connection fails to let them try and provide new auth information.\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n            const auth: AuthInfo = await authPromise;\n\n            await this.privRequestSession.onAuthCompleted(false);\n\n            // Create the connection\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\n            // Attach the telemetry handlers.\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\n\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n            // it'll stop sending events.\n            connection.events.attach((event: ConnectionEvent) => {\n                this.connectionEvents.onEvent(event);\n            });\n\n            const response: ConnectionOpenResponse = await connection.open();\n            // 200 == everything is fine.\n            if (response.statusCode === 200) {\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\n                return Promise.resolve(connection);\n            } else if (response.statusCode === 1006) {\n                isUnAuthorized = true;\n            }\n\n            lastStatusCode = response.statusCode;\n            lastReason = response.reason;\n\n            this.privRequestSession.onRetryConnection();\n        }\n\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\n    }\n\n    private delay(delayMs: number): Promise<void> {\n        return new Promise((resolve: () => void, reject: (error: string) => void) => {\n            this.privSetTimeout(resolve, delayMs);\n        });\n    }\n\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\n        let out: string = \"Buffer Size: \";\n        if (null === buffer) {\n            out += \"null\";\n        } else {\n            const readView: Uint8Array = new Uint8Array(buffer);\n            out += buffer.byteLength + \"\\r\\n\";\n            for (let i: number = 0; i < buffer.byteLength; i++) {\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\n            }\n        }\n        // tslint:disable-next-line:no-console\n        console.info(out);\n    }\n\n    private async sendFinalAudio(): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\n        return;\n    }\n\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    private async configureConnection(): Promise<IConnection> {\n        const connection: IConnection = await this.connectImpl();\n        if (this.configConnectionOverride !== undefined) {\n            return this.configConnectionOverride(connection);\n        }\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n        await this.sendPrePayloadJSON(connection);\n        return connection;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\n\nexport class SpeechConnectionMessage extends ConnectionMessage {\n\n    private privPath: string;\n    private privRequestId: string;\n    private privContentType: string;\n    private privStreamId: string;\n    private privAdditionalHeaders: IStringDictionary<string>;\n\n    public constructor(\n        messageType: MessageType,\n        path: string,\n        requestId: string,\n        contentType: string,\n        body: any,\n        streamId?: string,\n        additionalHeaders?: IStringDictionary<string>,\n        id?: string) {\n\n        if (!path) {\n            throw new ArgumentNullError(\"path\");\n        }\n\n        if (!requestId) {\n            throw new ArgumentNullError(\"requestId\");\n        }\n\n        const headers: IStringDictionary<string> = {};\n        headers[HeaderNames.Path] = path;\n        headers[HeaderNames.RequestId] = requestId;\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\n        if (contentType) {\n            headers[HeaderNames.ContentType] = contentType;\n        }\n\n        if (streamId) {\n            headers[HeaderNames.RequestStreamId] = streamId;\n        }\n\n        if (additionalHeaders) {\n            for (const headerName in additionalHeaders) {\n                if (headerName) {\n                    headers[headerName] = additionalHeaders[headerName];\n                }\n\n            }\n        }\n\n        if (id) {\n            super(messageType, body, headers, id);\n        } else {\n            super(messageType, body, headers);\n        }\n\n        this.privPath = path;\n        this.privRequestId = requestId;\n        this.privContentType = contentType;\n        this.privStreamId = streamId;\n        this.privAdditionalHeaders = additionalHeaders;\n    }\n\n    public get path(): string {\n        return this.privPath;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get contentType(): string {\n        return this.privContentType;\n    }\n\n    public get streamId(): string {\n        return this.privStreamId;\n    }\n\n    public get additionalHeaders(): IStringDictionary<string> {\n        return this.privAdditionalHeaders;\n    }\n\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\n        let path = null;\n        let requestId = null;\n        let contentType = null;\n        let requestTimestamp = null;\n        let streamId = null;\n        const additionalHeaders: IStringDictionary<string> = {};\n\n        if (message.headers) {\n            for (const headerName in message.headers) {\n                if (headerName) {\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\n                        path = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\n                        requestId = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\n                        requestTimestamp = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\n                        contentType = message.headers[headerName];\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\n                        streamId = message.headers[headerName];\n                    } else {\n                        additionalHeaders[headerName] = message.headers[headerName];\n                    }\n                }\n            }\n        }\n\n        return new SpeechConnectionMessage(\n            message.messageType,\n            path,\n            requestId,\n            contentType,\n            message.body,\n            streamId,\n            additionalHeaders,\n            message.id);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\n\nexport enum RecognitionMode {\n    Interactive,\n    Conversation,\n    Dictation,\n}\n\nexport enum SpeechResultFormat {\n    Simple,\n    Detailed,\n}\n\nexport class RecognizerConfig {\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\n    private privSpeechServiceConfig: SpeechServiceConfig;\n    private privRecognitionActivityTimeout: number;\n    private privParameters: PropertyCollection;\n    private privMaxRetryCount: number;\n\n    constructor(\n        speechServiceConfig: SpeechServiceConfig,\n        parameters: PropertyCollection) {\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n        this.privParameters = parameters;\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\n    }\n\n    public get parameters(): PropertyCollection {\n        return this.privParameters;\n    }\n\n    public get recognitionMode(): RecognitionMode {\n        return this.privRecognitionMode;\n    }\n\n    public set recognitionMode(value: RecognitionMode) {\n        this.privRecognitionMode = value;\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\n    }\n\n    public get SpeechServiceConfig(): SpeechServiceConfig {\n        return this.privSpeechServiceConfig;\n    }\n\n    public get recognitionActivityTimeout(): number {\n        return this.privRecognitionActivityTimeout;\n    }\n\n    public get isContinuousRecognition(): boolean {\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\n    }\n\n    public get autoDetectSourceLanguages(): string {\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\n    }\n\n    public get maxRetryCount(): number {\n        return this.privMaxRetryCount;\n    }\n}\n\n// The config is serialized and sent as the Speech.Config\nexport class SpeechServiceConfig {\n    private context: Context;\n    private recognition: string;\n\n    constructor(context: Context) {\n        this.context = context;\n    }\n\n    public serialize = (): string => {\n        return JSON.stringify(this, (key: any, value: any): any => {\n            if (value && typeof value === \"object\") {\n                const replacement: any = {};\n                for (const k in value) {\n                    if (Object.hasOwnProperty.call(value, k)) {\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\n                    }\n                }\n                return replacement;\n            }\n            return value;\n        });\n    }\n\n    public get Context(): Context {\n        return this.context;\n    }\n\n    public get Recognition(): string {\n        return this.recognition;\n    }\n\n    public set Recognition(value: string) {\n        this.recognition = value.toLowerCase();\n    }\n}\n\nexport class Context {\n    public system: System;\n    public os: OS;\n    public audio: ISpeechConfigAudio;\n\n    constructor(os: OS) {\n        this.system = new System();\n        this.os = os;\n    }\n}\n\nexport class System {\n    public name: string;\n    public version: string;\n    public build: string;\n    public lang: string;\n\n    constructor() {\n        // Note: below will be patched for official builds.\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.15.0-alpha.0.1\";\n\n        this.name = \"SpeechSDK\";\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\n        this.build = \"JavaScript\";\n        this.lang = \"JavaScript\";\n    }\n}\n\nexport class OS {\n    public platform: string;\n    public name: string;\n    public version: string;\n\n    constructor(platform: string, name: string, version: string) {\n        this.platform = platform;\n        this.name = name;\n        this.version = version;\n    }\n}\n\nexport class Device {\n    public manufacturer: string;\n    public model: string;\n    public version: string;\n\n    constructor(manufacturer: string, model: string, version: string) {\n        this.manufacturer = manufacturer;\n        this.model = model;\n        this.version = version;\n    }\n}\n\nexport interface ISpeechConfigAudio {\n    source?: ISpeechConfigAudioDevice;\n    playback?: ISpeechConfigAudioDevice;\n}\n\nexport interface ISpeechConfigAudioDevice {\n    manufacturer: string;\n    model: string;\n    connectivity: connectivity;\n    type: type;\n    samplerate: number;\n    bitspersample: number;\n    channelcount: number;\n}\n\nexport enum connectivity {\n    Bluetooth = \"Bluetooth\",\n    Wired = \"Wired\",\n    WiFi = \"WiFi\",\n    Cellular = \"Cellular\",\n    InBuilt = \"InBuilt\",\n    Unknown = \"Unknown\",\n}\n\nexport enum type {\n    Phone = \"Phone\",\n    Speaker = \"Speaker\",\n    Car = \"Car\",\n    Headset = \"Headset\",\n    Thermostat = \"Thermostat\",\n    Microphones = \"Microphones\",\n    Deskphone = \"Deskphone\",\n    RemoteControl = \"RemoteControl\",\n    Unknown = \"Unknown\",\n    File = \"File\",\n    Stream = \"Stream\",\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionCompletionStatus } from \"../../src/common.speech/Exports\";\nimport { TranslationStatus } from \"./TranslationStatus\";\n\nexport interface ITranslations {\n    TranslationStatus: TranslationStatus;\n    Translations: ITranslation[];\n    FailureReason: string;\n}\n\nexport interface ITranslation {\n    Language: string;\n    Text: string;\n}\n\nexport interface ISpeechEndDetectedResult {\n    Offset?: number;\n}\n\n// turn.start\nexport interface ITurnStart {\n    context: ITurnStartContext;\n}\n\nexport interface ITurnStartContext {\n    serviceTag: string;\n}\n\nexport interface IResultErrorDetails {\n    errorText: string;\n    recogSate: RecognitionCompletionStatus;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionMessage,\n    Deferred,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    MessageType,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\nconst CRLF: string = \"\\r\\n\";\n\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\n        const deferral = new Deferred<ConnectionMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const textMessage: string = message.textContent;\n                let headers: IStringDictionary<string> = {};\n                let body: string = null;\n\n                if (textMessage) {\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\n                    if (headerBodySplit && headerBodySplit.length > 0) {\n                        headers = this.parseHeaders(headerBodySplit[0]);\n                        if (headerBodySplit.length > 1) {\n                            body = headerBodySplit[1];\n                        }\n                    }\n                }\n\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n            } else if (message.messageType === MessageType.Binary) {\n                const binaryMessage: ArrayBuffer = message.binaryContent;\n                let headers: IStringDictionary<string> = {};\n                let body: ArrayBuffer = null;\n\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\n                }\n\n                const dataView = new DataView(binaryMessage);\n                const headerLength = dataView.getInt16(0);\n\n                if (binaryMessage.byteLength < headerLength + 2) {\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\n                }\n\n                let headersString = \"\";\n                for (let i = 0; i < headerLength; i++) {\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\n                }\n\n                headers = this.parseHeaders(headersString);\n\n                if (binaryMessage.byteLength > headerLength + 2) {\n                    body = binaryMessage.slice(2 + headerLength);\n                }\n\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. Error: ${e}`);\n        }\n\n        return deferral.promise;\n    }\n\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\n\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n\n            } else if (message.messageType === MessageType.Binary) {\n                const headersString = this.makeHeaders(message);\n                const content = message.binaryBody;\n\n                const headerBuffer = this.stringToArrayBuffer(headersString);\n                const headerInt8Array = new Int8Array(headerBuffer);\n                const headerLength = headerInt8Array.byteLength;\n\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\n                payloadInt8Array[1] = headerLength & 0xff;\n                payloadInt8Array.set(headerInt8Array, 2);\n\n                if (content) {\n                    const bodyInt8Array = new Int8Array(content);\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\n                }\n\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\n\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. ${e}`);\n        }\n\n        return deferral.promise;\n    }\n\n    private makeHeaders = (message: ConnectionMessage): string => {\n        let headersString: string = \"\";\n\n        if (message.headers) {\n            for (const header in message.headers) {\n                if (header) {\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\n                }\n            }\n        }\n\n        return headersString;\n    }\n\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\n        const headers: IStringDictionary<string> = {};\n\n        if (headersString) {\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\n            if (headers) {\n                for (const header of headerMatches) {\n                    if (header) {\n                        const separatorIndex = header.indexOf(\":\");\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\n                        const headerValue =\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\n                                header.substr(separatorIndex + 1).trim() :\n                                \"\";\n\n                        headers[headerName] = headerValue;\n                    }\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\n        const buffer = new ArrayBuffer(str.length);\n        const view = new DataView(buffer);\n        for (let i = 0; i < str.length; i++) {\n            view.setUint8(i, str.charCodeAt(i));\n        }\n        return buffer;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    ForceDictationPropertyName,\n    OutputFormatPropertyName,\n} from \"../common.speech/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    OutputFormat,\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognitionMode,\n    RecognizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\n\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId) {\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n            }\n        } else if (language) {\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n                queryParams[QueryParameterNames.Language] = language;\n            }\n        }\n\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\n        }\n\n        if (config.autoDetectSourceLanguages !== undefined) {\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\n        }\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n\n        if (!endpoint) {\n            switch (config.recognitionMode) {\n                case RecognitionMode.Conversation:\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\n                        endpoint = host + this.dictationRelativeUri;\n                    } else {\n                        endpoint = host + this.conversationRelativeUri;\n                    }\n                    break;\n                case RecognitionMode.Dictation:\n                    endpoint = host + this.dictationRelativeUri;\n                    break;\n                default:\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\n                    break;\n            }\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    OutputFormatPropertyName,\n} from \"../common.speech/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport {\n    OutputFormat,\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    RecognizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\n\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\n        const hostSuffix: string =  (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\n\n        if (endpointId) {\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\n            }\n        } else if (language) {\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\n                queryParams[QueryParameterNames.Language] = language;\n            }\n        }\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n        if (!endpoint) {\n            endpoint = host;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary,\n} from \"../common/Exports\";\nimport {\n    PropertyId\n} from \"../sdk/Exports\";\nimport {\n    ConnectionFactoryBase\n} from \"./ConnectionFactoryBase\";\nimport {\n    AuthInfo,\n    IConnectionFactory,\n    RecognizerConfig,\n    WebsocketMessageFormatter,\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { QueryParameterNames } from \"./QueryParameterNames\";\n\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\n\n    public create = (\n        config: RecognizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\n        }\n\n        const queryParams: IStringDictionary<string> = {\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\n        };\n\n        this.setCommonUrlParams(config, queryParams, endpoint);\n        this.setUrlParameter(\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\n            QueryParameterNames.StableTranslation,\n            config,\n            queryParams,\n            endpoint\n        );\n\n        const voiceName: string = \"voice\";\n        const featureName: string = \"features\";\n\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\n            queryParams[featureName] = \"texttospeech\";\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ProxyInfo,\n    WebsocketConnection, WebsocketMessageAdapter,\n} from \"../common.browser/Exports\";\nimport {\n    IConnection,\n    IStringDictionary\n} from \"../common/Exports\";\nimport { PropertyId } from \"../sdk/Exports\";\nimport {\n    AuthInfo,\n    SynthesizerConfig,\n    WebsocketMessageFormatter\n} from \"./Exports\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\nimport {\n    QueryParameterNames\n} from \"./QueryParameterNames\";\n\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\n\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\n\n    public create = (\n        config: SynthesizerConfig,\n        authInfo: AuthInfo,\n        connectionId?: string): IConnection => {\n\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\n        const hostSuffix = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\n\n        const queryParams: IStringDictionary<string> = {};\n\n        if (!endpoint) {\n            endpoint = host + this.synthesisUri;\n        }\n\n        const headers: IStringDictionary<string> = {};\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\n            headers[authInfo.headerName] = authInfo.token;\n        }\n        headers[HeaderNames.ConnectionId] = connectionId;\n        if (endpointId !== undefined) {\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\n        }\n\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\n\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    ResultReason\n} from \"../sdk/Exports\";\nimport { RecognitionStatus } from \"./Exports\";\n\nexport class EnumTranslation {\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\n        let reason = ResultReason.Canceled;\n        switch (recognitionStatus) {\n            case RecognitionStatus.Success:\n                reason = ResultReason.RecognizedSpeech;\n                break;\n            case RecognitionStatus.NoMatch:\n            case RecognitionStatus.InitialSilenceTimeout:\n            case RecognitionStatus.BabbleTimeout:\n            case RecognitionStatus.EndOfDictation:\n                reason = ResultReason.NoMatch;\n                break;\n            case RecognitionStatus.Error:\n            default:\n                reason = ResultReason.Canceled;\n                break;\n        }\n        return reason;\n    }\n\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\n        let reason = CancellationReason.EndOfStream;\n        switch (recognitionStatus) {\n            case RecognitionStatus.Success:\n            case RecognitionStatus.EndOfDictation:\n            case RecognitionStatus.NoMatch:\n                reason = CancellationReason.EndOfStream;\n                break;\n            case RecognitionStatus.InitialSilenceTimeout:\n            case RecognitionStatus.BabbleTimeout:\n            case RecognitionStatus.Error:\n            default:\n                reason = CancellationReason.Error;\n                break;\n        }\n        return reason;\n    }\n\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\n        switch (recognitionStatus) {\n            case RecognitionStatus.Error:\n                reason = CancellationErrorCode.ServiceError;\n                break;\n            case RecognitionStatus.TooManyRequests:\n                reason = CancellationErrorCode.TooManyRequests;\n                break;\n            default:\n                reason = CancellationErrorCode.NoError;\n                break;\n        }\n\n        return reason;\n\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * @class SynthesisStatus\n * @private\n */\nexport enum SynthesisStatus {\n    /**\n     * The response contains valid audio data.\n     * @member SynthesisStatus.Success\n     */\n    Success,\n\n    /**\n     * Indicates the end of audio data. No valid audio data is included in the message.\n     * @member SynthesisStatus.SynthesisEnd\n     */\n    SynthesisEnd,\n\n    /**\n     * Indicates an error occurred during synthesis data processing.\n     * @member SynthesisStatus.Error\n     */\n    Error,\n}\n\nexport enum RecognitionStatus {\n    Success,\n    NoMatch,\n    InitialSilenceTimeout,\n    BabbleTimeout,\n    Error,\n    EndOfDictation,\n    TooManyRequests,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { SynthesisStatus } from \"../Exports\";\n\n// translation.synthesis.end\nexport interface ITranslationSynthesisEnd {\n    SynthesisStatus: SynthesisStatus;\n    FailureReason: string;\n}\n\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\n    private privSynthesisEnd: ITranslationSynthesisEnd;\n\n    private constructor(json: string) {\n        this.privSynthesisEnd = JSON.parse(json);\n        this.privSynthesisEnd.SynthesisStatus = (SynthesisStatus as any)[this.privSynthesisEnd.SynthesisStatus];\n    }\n\n    public static fromJSON(json: string): TranslationSynthesisEnd {\n        return new TranslationSynthesisEnd(json);\n    }\n\n    public get SynthesisStatus(): SynthesisStatus {\n        return this.privSynthesisEnd.SynthesisStatus;\n    }\n\n    public get FailureReason(): string {\n        return this.privSynthesisEnd.FailureReason;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ITranslations } from \"../Exports\";\nimport { TranslationStatus } from \"../TranslationStatus\";\n\n// translation.hypothesis\nexport interface ITranslationHypothesis {\n    Duration: number;\n    Offset: number;\n    Text: string;\n    Translation: ITranslations;\n}\n\nexport class TranslationHypothesis implements ITranslationHypothesis {\n    private privTranslationHypothesis: ITranslationHypothesis;\n\n    private constructor(json: string) {\n        this.privTranslationHypothesis = JSON.parse(json);\n        this.privTranslationHypothesis.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationHypothesis.Translation.TranslationStatus];\n    }\n\n    public static fromJSON(json: string): TranslationHypothesis {\n        return new TranslationHypothesis(json);\n    }\n\n    public get Duration(): number {\n        return this.privTranslationHypothesis.Duration;\n    }\n\n    public get Offset(): number {\n        return this.privTranslationHypothesis.Offset;\n    }\n\n    public get Text(): string {\n        return this.privTranslationHypothesis.Text;\n    }\n\n    public get Translation(): ITranslations {\n        return this.privTranslationHypothesis.Translation;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ITranslations, RecognitionStatus } from \"../Exports\";\nimport { TranslationStatus } from \"../TranslationStatus\";\n\n// translation.phrase\nexport interface ITranslationPhrase {\n    RecognitionStatus: RecognitionStatus;\n    Offset: number;\n    Duration: number;\n    Text: string;\n    Translation: ITranslations;\n}\n\nexport class TranslationPhrase implements ITranslationPhrase {\n    private privTranslationPhrase: ITranslationPhrase;\n\n    private constructor(json: string) {\n        this.privTranslationPhrase = JSON.parse(json);\n        this.privTranslationPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privTranslationPhrase.RecognitionStatus];\n        if (this.privTranslationPhrase.Translation !== undefined) {\n            this.privTranslationPhrase.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationPhrase.Translation.TranslationStatus];\n        }\n    }\n\n    public static fromJSON(json: string): TranslationPhrase {\n        return new TranslationPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privTranslationPhrase.RecognitionStatus;\n    }\n\n    public get Offset(): number {\n        return this.privTranslationPhrase.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privTranslationPhrase.Duration;\n    }\n\n    public get Text(): string {\n        return this.privTranslationPhrase.Text;\n    }\n\n    public get Translation(): ITranslations {\n        return this.privTranslationPhrase.Translation;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionEvent,\n    IAudioSource,\n    MessageType,\n    TranslationStatus,\n} from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionResult,\n    TranslationRecognitionCanceledEventArgs,\n    TranslationRecognitionEventArgs,\n    TranslationRecognitionResult,\n    TranslationRecognizer,\n    Translations,\n    TranslationSynthesisEventArgs,\n    TranslationSynthesisResult,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    RecognitionStatus,\n    ServiceRecognizerBase,\n    SynthesisStatus,\n    TranslationHypothesis,\n    TranslationPhrase,\n    TranslationSynthesisEnd,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\n    private privTranslationRecognizer: TranslationRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        translationRecognizer: TranslationRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\n        this.privTranslationRecognizer = translationRecognizer;\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\n                this.privTranslationRecognizer.onConnection();\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                await this.privTranslationRecognizer.onDisconnection();\n            }\n        });\n\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        let processed: boolean = false;\n\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"translation.hypothesis\":\n\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\n\n                if (!!this.privTranslationRecognizer.recognizing) {\n                    try {\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"translation.phrase\":\n                const translatedPhrase: TranslationPhrase = TranslationPhrase.fromJSON(connectionMessage.textBody);\n\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\n\n                if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\n\n                    // OK, the recognition was successful. How'd the translation do?\n                    const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\n                    if (!!this.privTranslationRecognizer.recognized) {\n                        try {\n                            this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!this.privSuccessCallback) {\n                        try {\n                            this.privSuccessCallback(result.result);\n                        } catch (e) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        this.privSuccessCallback = undefined;\n                        this.privErrorCallback = undefined;\n                    }\n\n                    break;\n                } else {\n                    const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\n\n                    const result = new TranslationRecognitionResult(\n                        undefined,\n                        this.privRequestSession.requestId,\n                        reason,\n                        translatedPhrase.Text,\n                        translatedPhrase.Duration,\n                        this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\n                        undefined,\n                        connectionMessage.textBody,\n                        resultProps);\n\n                    if (reason === ResultReason.Canceled) {\n                        const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\n\n                        await this.cancelRecognitionLocal(\n                            cancelReason,\n                            EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus),\n                            undefined);\n                    } else {\n                        if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                            const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n                            if (!!this.privTranslationRecognizer.recognized) {\n                                try {\n                                    this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\n                                    /* tslint:disable:no-empty */\n                                } catch (error) {\n                                    // Not going to let errors in the event handler\n                                    // trip things up.\n                                }\n                            }\n                        }\n\n                        // report result to promise.\n                        if (!!this.privSuccessCallback) {\n                            try {\n                                this.privSuccessCallback(result);\n                            } catch (e) {\n                                if (!!this.privErrorCallback) {\n                                    this.privErrorCallback(e);\n                                }\n                            }\n                            // Only invoke the call back once.\n                            // and if it's successful don't invoke the\n                            // error after that.\n                            this.privSuccessCallback = undefined;\n                            this.privErrorCallback = undefined;\n                        }\n                    }\n                }\n                processed = true;\n                break;\n\n            case \"translation.synthesis\":\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\n                processed = true;\n                break;\n\n            case \"translation.synthesis.end\":\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\n\n                switch (synthEnd.SynthesisStatus) {\n                    case SynthesisStatus.Error:\n                        if (!!this.privTranslationRecognizer.synthesizing) {\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\n\n                            try {\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n\n                        if (!!this.privTranslationRecognizer.canceled) {\n                            // And raise a canceled event to send the rich(er) error message back.\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                                this.privRequestSession.sessionId,\n                                CancellationReason.Error,\n                                synthEnd.FailureReason,\n                                CancellationErrorCode.ServiceError,\n                                null);\n\n                            try {\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        break;\n                    case SynthesisStatus.Success:\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\n                        break;\n                    default:\n                        break;\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privTranslationRecognizer.canceled) {\n\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\n                sessionId,\n                cancellationReason,\n                error,\n                errorCode,\n                undefined);\n\n            try {\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\n                undefined, // Translations\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Druation\n                undefined, // Offset\n                error,\n                undefined, // Json\n                properties);\n            try {\n                this.privSuccessCallback(result);\n                /* tslint:disable:no-empty */\n                this.privSuccessCallback = undefined;\n            } catch { }\n        }\n    }\n\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\n        let translations: Translations;\n\n        if (undefined !== serviceResult.Translation.Translations) {\n            translations = new Translations();\n            for (const translation of serviceResult.Translation.Translations) {\n                translations.set(translation.Language, translation.Text);\n            }\n        }\n\n        let resultReason: ResultReason;\n        if (serviceResult instanceof TranslationPhrase) {\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\n                resultReason = ResultReason.TranslatedSpeech;\n            } else {\n                resultReason = ResultReason.RecognizedSpeech;\n            }\n        } else {\n            resultReason = ResultReason.TranslatingSpeech;\n        }\n\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n        const result = new TranslationRecognitionResult(\n            translations,\n            this.privRequestSession.requestId,\n            resultReason,\n            serviceResult.Text,\n            serviceResult.Duration,\n            offset,\n            serviceResult.Translation.FailureReason,\n            JSON.stringify(serviceResult),\n            properties);\n\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n        return ev;\n    }\n\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\n        const result = new TranslationSynthesisResult(reason, audio);\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\n\n        if (!!this.privTranslationRecognizer.synthesizing) {\n            try {\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\n                /* tslint:disable:no-empty */\n            } catch (error) {\n                // Not going to let errors in the event handler\n                // trip things up.\n            }\n        }\n\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// speech.endDetected\nexport interface ISpeechDetected {\n    Offset: number;\n}\n\nexport class SpeechDetected implements ISpeechDetected {\n    private privSpeechStartDetected: ISpeechDetected;\n\n    private constructor(json: string) {\n        this.privSpeechStartDetected = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechDetected {\n        return new SpeechDetected(json);\n    }\n\n    public get Offset(): number {\n        return this.privSpeechStartDetected.Offset;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase\";\n\n// speech.hypothesis\nexport interface ISpeechHypothesis {\n    Text: string;\n    Offset: number;\n    Duration: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n    SpeakerId?: string;\n}\n\nexport class SpeechHypothesis implements ISpeechHypothesis {\n    private privSpeechHypothesis: ISpeechHypothesis;\n\n    private constructor(json: string) {\n        this.privSpeechHypothesis = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechHypothesis {\n        return new SpeechHypothesis(json);\n    }\n\n    public get Text(): string {\n        return this.privSpeechHypothesis.Text;\n    }\n\n    public get Offset(): number {\n        return this.privSpeechHypothesis.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privSpeechHypothesis.Duration;\n    }\n\n    public get Language(): string {\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\n    }\n\n    public get LanguageDetectionConfidence(): string {\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\n    }\n\n    public get SpeakerId(): string {\n        return this.privSpeechHypothesis.SpeakerId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// speech.keyword\nexport interface ISpeechKeyword {\n    Status: string;\n    Text: string;\n    Offset: number;\n    Duration: number;\n}\n\nexport class SpeechKeyword implements ISpeechKeyword {\n    private privSpeechKeyword: ISpeechKeyword;\n\n    private constructor(json: string) {\n        this.privSpeechKeyword = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechKeyword {\n        return new SpeechKeyword(json);\n    }\n\n    public get Status(): string {\n        return this.privSpeechKeyword.Status;\n    }\n\n    public get Text(): string {\n        return this.privSpeechKeyword.Text;\n    }\n\n    public get Offset(): number {\n        return this.privSpeechKeyword.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privSpeechKeyword.Duration;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IAudioSource } from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n    SpeechRecognizer,\n} from \"../sdk/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    DetailedSpeechPhrase,\n    EnumTranslation,\n    OutputFormatPropertyName,\n    RecognitionStatus,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\n\n    private privSpeechRecognizer: SpeechRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        speechRecognizer: SpeechRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\n        this.privSpeechRecognizer = speechRecognizer;\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\n            this.privSpeechContext.setSection(\"languageId\", {\n                languages: sourceLanguages,\n                onSuccess: { action: \"Recognize\" },\n                onUnknown: { action: \"None\" }\n            });\n            this.privSpeechContext.setSection(\"phraseOutput\", {\n                interimResults: {\n                    resultType: \"Auto\"\n                },\n                phraseResults: {\n                    resultType: \"Always\"\n                }\n            });\n        }\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        let result: SpeechRecognitionResult;\n        const resultProps: PropertyCollection = new PropertyCollection();\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        let processed: boolean = false;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n            case \"speech.fragment\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    offset,\n                    hypothesis.Language,\n                    hypothesis.LanguageDetectionConfidence,\n                    undefined, // Speaker Id\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                this.privRequestSession.onHypothesis(offset);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n                if (!!this.privSpeechRecognizer.recognizing) {\n                    try {\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.phrase\":\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n                if (ResultReason.Canceled === resultReason) {\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n\n                    await this.cancelRecognitionLocal(\n                        cancelReason,\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\n                        undefined);\n\n                } else {\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                            result = new SpeechRecognitionResult(\n                                this.privRequestSession.requestId,\n                                resultReason,\n                                simple.DisplayText,\n                                simple.Duration,\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\n                                simple.Language,\n                                simple.LanguageDetectionConfidence,\n                                undefined, // Speaker Id\n                                undefined,\n                                connectionMessage.textBody,\n                                resultProps);\n                        } else {\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                            result = new SpeechRecognitionResult(\n                                this.privRequestSession.requestId,\n                                resultReason,\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\n                                detailed.Duration,\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\n                                detailed.Language,\n                                detailed.LanguageDetectionConfidence,\n                                undefined, // Speaker Id\n                                undefined,\n                                connectionMessage.textBody,\n                                resultProps);\n                        }\n\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n                        if (!!this.privSpeechRecognizer.recognized) {\n                            try {\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    }\n\n                    if (!!this.privSuccessCallback) {\n                        try {\n                            this.privSuccessCallback(result);\n                        } catch (e) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        this.privSuccessCallback = undefined;\n                        this.privErrorCallback = undefined;\n                    }\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privSpeechRecognizer.canceled) {\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n            try {\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Duration\n                undefined, // Offset\n                undefined, // Language\n                undefined, // Language Detection Confidence\n                undefined, // Speaker Id\n                error,\n                undefined, // Json\n                properties);\n            try {\n                this.privSuccessCallback(result);\n                this.privSuccessCallback = undefined;\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAudioSource,\n    IConnection,\n    MessageType\n} from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    ConversationTranscriptionCanceledEventArgs,\n    OutputFormat,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\nimport {\n    CancellationErrorCodePropertyName,\n    DetailedSpeechPhrase,\n    EnumTranslation,\n    OutputFormatPropertyName,\n    RecognitionStatus,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n    TranscriberRecognizer\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\n\n    private privTranscriberRecognizer: TranscriberRecognizer;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        transcriber: TranscriberRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\n        this.privTranscriberRecognizer = transcriber;\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\n    }\n\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\n        if (!!this.privRequestSession.isRecognizing) {\n            const connection: IConnection = await this.fetchConnection();\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\n        }\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        let result: SpeechRecognitionResult;\n        const resultProps: PropertyCollection = new PropertyCollection();\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        let processed: boolean = false;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n            case \"speech.fragment\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    offset,\n                    hypothesis.Language,\n                    hypothesis.LanguageDetectionConfidence,\n                    hypothesis.SpeakerId,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                this.privRequestSession.onHypothesis(offset);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n                if (!!this.privTranscriberRecognizer.recognizing) {\n                    try {\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.phrase\":\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\n\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\n\n                if (ResultReason.Canceled === resultReason) {\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\n\n                    await this.cancelRecognitionLocal(\n                        cancelReason,\n                        EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus),\n                        undefined);\n\n                } else {\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\n                            result = new SpeechRecognitionResult(\n                                this.privRequestSession.requestId,\n                                resultReason,\n                                simple.DisplayText,\n                                simple.Duration,\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\n                                simple.Language,\n                                simple.LanguageDetectionConfidence,\n                                simple.SpeakerId,\n                                undefined,\n                                connectionMessage.textBody,\n                                resultProps);\n                        } else {\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                            result = new SpeechRecognitionResult(\n                                this.privRequestSession.requestId,\n                                resultReason,\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\n                                detailed.Duration,\n                                detailed.Offset + this.privRequestSession.currentTurnAudioOffset,\n                                detailed.Language,\n                                detailed.LanguageDetectionConfidence,\n                                undefined,\n                                undefined,\n                                connectionMessage.textBody,\n                                resultProps);\n                        }\n\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n                        if (!!this.privTranscriberRecognizer.recognized) {\n                            try {\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\n                                /* tslint:disable:no-empty */\n                            } catch (error) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                    }\n\n                    if (!!this.privSuccessCallback) {\n                        try {\n                            this.privSuccessCallback(result);\n                        } catch (e) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        this.privSuccessCallback = undefined;\n                        this.privErrorCallback = undefined;\n                    }\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privTranscriberRecognizer.canceled) {\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n            try {\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Duration\n                undefined, // Offset\n                undefined, // Language\n                undefined, // Language Detection Confidence\n                undefined, // Speaker Id\n                error,\n                undefined, // Json\n                properties);\n            try {\n                this.privSuccessCallback(result);\n                this.privSuccessCallback = undefined;\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n\n    // Encapsulated for derived service recognizers that need to send additional JSON\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\n        await this.sendSpeechContext(connection);\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\n        await this.sendSpeechEvent(connection, payload);\n        await this.sendWaveHeader(connection);\n        return;\n    }\n\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\n        const speechEventJson = JSON.stringify(payload);\n\n        if (speechEventJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.event\",\n                this.privRequestSession.requestId,\n                \"application/json\",\n                speechEventJson));\n        }\n        return;\n    }\n\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\n        const meeting: string = \"meeting\";\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\n        const idString: string = \"id\";\n        const attendees: string = \"attendees\";\n        const record: string = \"record\";\n        eventDict[meeting][idString] = info.id;\n        eventDict[meeting][attendees] = info.participants;\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\n        return eventDict;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\n\n// speech.phrase for detailed\nexport interface IDetailedSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    NBest: IPhrase[];\n    Duration?: number;\n    Offset?: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n}\n\nexport interface IPhrase {\n    Confidence?: number;\n    Lexical: string;\n    ITN: string;\n    MaskedITN: string;\n    Display: string;\n}\n\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privDetailedSpeechPhrase = JSON.parse(json);\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): DetailedSpeechPhrase {\n        return new DetailedSpeechPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\n    }\n    public get NBest(): IPhrase[] {\n        return this.privDetailedSpeechPhrase.NBest;\n    }\n    public get Duration(): number {\n        return this.privDetailedSpeechPhrase.Duration;\n    }\n    public get Offset(): number {\n        return this.privDetailedSpeechPhrase.Offset;\n    }\n    public get Language(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\n    }\n    public get LanguageDetectionConfidence(): string {\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognitionStatus } from \"../Exports\";\n\n// speech.phrase\nexport interface ISimpleSpeechPhrase {\n    RecognitionStatus: RecognitionStatus;\n    DisplayText: string;\n    Offset?: number;\n    Duration?: number;\n    PrimaryLanguage?: IPrimaryLanguage;\n    SpeakerId?: string;\n}\n\nexport interface IPrimaryLanguage {\n    Language: string;\n    Confidence: string;\n}\n\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\n\n    private constructor(json: string) {\n        this.privSimpleSpeechPhrase = JSON.parse(json);\n        this.privSimpleSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privSimpleSpeechPhrase.RecognitionStatus];\n    }\n\n    public static fromJSON(json: string): SimpleSpeechPhrase {\n        return new SimpleSpeechPhrase(json);\n    }\n\n    public get RecognitionStatus(): RecognitionStatus {\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\n    }\n\n    public get DisplayText(): string {\n        return this.privSimpleSpeechPhrase.DisplayText;\n    }\n\n    public get Offset(): number {\n        return this.privSimpleSpeechPhrase.Offset;\n    }\n\n    public get Duration(): number {\n        return this.privSimpleSpeechPhrase.Duration;\n    }\n\n    public get Language(): string {\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\n    }\n\n    public get LanguageDetectionConfidence(): string {\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\n    }\n\n    public get SpeakerId(): string {\n        return this.privSimpleSpeechPhrase.SpeakerId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\n\n/**\n * @class AddedLmIntent\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class AddedLmIntent {\n    public modelImpl: LanguageUnderstandingModelImpl;\n    public intentName: string;\n\n    /**\n     * Creates and initializes an instance of this class.\n     * @constructor\n     * @param modelImpl - The model.\n     * @param intentName - The intent name.\n     */\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\n        this.modelImpl = modelImpl;\n        this.intentName = intentName;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAudioSource,\n    MessageType,\n} from \"../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    IntentRecognitionCanceledEventArgs,\n    IntentRecognitionEventArgs,\n    IntentRecognitionResult,\n    IntentRecognizer,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechRecognitionResult,\n} from \"../sdk/Exports\";\nimport {\n    AddedLmIntent,\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    IntentResponse,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechHypothesis,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognizerConfig } from \"./RecognizerConfig\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\n// tslint:disable-next-line:max-classes-per-file\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\n    private privIntentRecognizer: IntentRecognizer;\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\n    private privIntentDataSent: boolean;\n    private privUmbrellaIntent: AddedLmIntent;\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        recognizer: IntentRecognizer) {\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\n        this.privIntentRecognizer = recognizer;\n        this.privIntentDataSent = false;\n    }\n\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\n        this.privAddedLmIntents = addedIntents;\n        this.privUmbrellaIntent = umbrellaIntent;\n        this.privIntentDataSent = true;\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        let result: IntentRecognitionResult;\n        let ev: IntentRecognitionEventArgs;\n        let processed: boolean = false;\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.hypothesis\":\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n\n                result = new IntentRecognitionResult(\n                    undefined,\n                    this.privRequestSession.requestId,\n                    ResultReason.RecognizingIntent,\n                    speechHypothesis.Text,\n                    speechHypothesis.Duration,\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\n                    speechHypothesis.Language,\n                    speechHypothesis.LanguageDetectionConfidence,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                this.privRequestSession.onHypothesis(result.offset);\n\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n                if (!!this.privIntentRecognizer.recognizing) {\n                    try {\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.phrase\":\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n                result = new IntentRecognitionResult(\n                    undefined,\n                    this.privRequestSession.requestId,\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\n                    simple.DisplayText,\n                    simple.Duration,\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\n                    simple.Language,\n                    simple.LanguageDetectionConfidence,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\n\n                const sendEvent: () => void = () => {\n                    if (!!this.privIntentRecognizer.recognized) {\n                        try {\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n\n                    // report result to promise.\n                    if (!!this.privSuccessCallback) {\n                        try {\n                            this.privSuccessCallback(result);\n                        } catch (e) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(e);\n                            }\n                        }\n                        // Only invoke the call back once.\n                        // and if it's successful don't invoke the\n                        // error after that.\n                        this.privSuccessCallback = undefined;\n                        this.privErrorCallback = undefined;\n                    }\n                };\n\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\n                // If no intent data was sent, the terminal event is speech recognition being successful.\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\n                    // Advance the buffers.\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n                    sendEvent();\n                } else {\n                    // Squirrel away the args, when the response event arrives it will build upon them\n                    // and then return\n                    this.privPendingIntentArgs = ev;\n                }\n                processed = true;\n                break;\n            case \"response\":\n                // Response from LUIS\n                ev = this.privPendingIntentArgs;\n                this.privPendingIntentArgs = undefined;\n\n                if (undefined === ev) {\n                    if (\"\" === connectionMessage.textBody) {\n                        // This condition happens if there is nothing but silence in the\n                        // audio sent to the service.\n                        return;\n                    }\n\n                    // Odd... Not sure this can happen\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, this.privRequestSession.sessionId);\n                }\n\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\n\n                // If LUIS didn't return anything, send the existing event, else\n                // modify it to show the match.\n                // See if the intent found is in the list of intents asked for.\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\n\n                if (this.privUmbrellaIntent !== undefined) {\n                    addedIntent = this.privUmbrellaIntent;\n                }\n\n                if (null !== intentResponse && addedIntent !== undefined) {\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\n                    let reason = ev.result.reason;\n\n                    if (undefined !== intentId) {\n                        reason = ResultReason.RecognizedIntent;\n                    }\n\n                    // make sure, properties is set.\n                    const properties = (undefined !== ev.result.properties) ?\n                        ev.result.properties : new PropertyCollection();\n\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\n\n                    ev = new IntentRecognitionEventArgs(\n                        new IntentRecognitionResult(\n                            intentId,\n                            ev.result.resultId,\n                            reason,\n                            ev.result.text,\n                            ev.result.duration,\n                            ev.result.offset,\n                            undefined,\n                            undefined,\n                            ev.result.errorDetails,\n                            ev.result.json,\n                            properties),\n                        ev.offset,\n                        ev.sessionId);\n                }\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\n\n                if (!!this.privIntentRecognizer.recognized) {\n                    try {\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n\n                // report result to promise.\n                if (!!this.privSuccessCallback) {\n                    try {\n                        this.privSuccessCallback(ev.result);\n                    } catch (e) {\n                        if (!!this.privErrorCallback) {\n                            this.privErrorCallback(e);\n                        }\n                    }\n                    // Only invoke the call back once.\n                    // and if it's successful don't invoke the\n                    // error after that.\n                    this.privSuccessCallback = undefined;\n                    this.privErrorCallback = undefined;\n                }\n                processed = true;\n                break;\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n        if (!!this.privIntentRecognizer.canceled) {\n\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                undefined,\n                sessionId);\n            try {\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\n                undefined, // Intent Id\n                requestId,\n                ResultReason.Canceled,\n                undefined, // Text\n                undefined, // Duration\n                undefined, // Offset\n                undefined, // Language\n                undefined, // LanguageDetectionConfidence\n                error,\n                undefined, // Json\n                properties);\n            try {\n                this.privSuccessCallback(result);\n                this.privSuccessCallback = undefined;\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// response\n\nexport interface IIntentResponse {\n    query: string;\n    topScoringIntent: ISingleIntent;\n    entities: IIntentEntity[];\n}\n\nexport interface IIntentEntity {\n    entity: string;\n    type: string;\n    startIndex: number;\n    endIndex: number;\n    score: number;\n}\n\nexport interface ISingleIntent {\n    intent: string;\n    score: number;\n}\n\nexport class IntentResponse implements IIntentResponse {\n    private privIntentResponse: IIntentResponse;\n\n    private constructor(json: string) {\n        this.privIntentResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): IntentResponse {\n        return new IntentResponse(json);\n    }\n\n    public get query(): string {\n        return this.privIntentResponse.query;\n    }\n\n    public get topScoringIntent(): ISingleIntent {\n        return this.privIntentResponse.topScoringIntent;\n    }\n\n    public get entities(): IIntentEntity[] {\n        return this.privIntentResponse.entities;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { Z_NO_COMPRESSION } from \"zlib\";\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\nimport {\n    createNoDashGuid,\n    Deferred,\n    Events,\n    IDetachable,\n    IEventSource,\n    PlatformEvent\n} from \"../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    ListeningStartedEvent,\n    RecognitionStartedEvent,\n    RecognitionTriggeredEvent,\n    SpeechRecognitionEvent,\n} from \"./RecognitionEvents\";\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\n\nexport class RequestSession {\n    private privIsDisposed: boolean = false;\n    private privServiceTelemetryListener: ServiceTelemetryListener;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n    private privAudioNode: ReplayableAudioNode;\n    private privAuthFetchEventId: string;\n    private privIsAudioNodeDetached: boolean = false;\n    private privIsRecognizing: boolean = false;\n    private privIsSpeechEnded: boolean = false;\n    private privTurnStartAudioOffset: number = 0;\n    private privLastRecoOffset: number = 0;\n    private privHypothesisReceived: boolean = false;\n    private privBytesSent: number = 0;\n    private privRecogNumber: number = 0;\n    private privSessionId: string;\n    private privTurnDeferral: Deferred<void>;\n    private privInTurn: boolean = false;\n    private privConnectionAttempts: number = 0;\n\n    constructor(audioSourceId: string) {\n        this.privAudioSourceId = audioSourceId;\n        this.privRequestId = createNoDashGuid();\n        this.privAudioNodeId = createNoDashGuid();\n        this.privTurnDeferral = new Deferred<void>();\n\n        // We're not in a turn, so resolve.\n        this.privTurnDeferral.resolve();\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get audioNodeId(): string {\n        return this.privAudioNodeId;\n    }\n\n    public get turnCompletionPromise(): Promise<void> {\n        return this.privTurnDeferral.promise;\n    }\n\n    public get isSpeechEnded(): boolean {\n        return this.privIsSpeechEnded;\n    }\n\n    public get isRecognizing(): boolean {\n        return this.privIsRecognizing;\n    }\n\n    public get currentTurnAudioOffset(): number {\n        return this.privTurnStartAudioOffset;\n    }\n\n    public get recogNumber(): number {\n        return this.privRecogNumber;\n    }\n\n    public get numConnectionAttempts(): number {\n        return this.privConnectionAttempts;\n    }\n\n    // The number of bytes sent for the current connection.\n    // Counter is reset to 0 each time a connection is established.\n    public get bytesSent(): number {\n        return this.privBytesSent;\n    }\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\n        if (!!this.privServiceTelemetryListener) {\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\n        }\n    }\n\n    public startNewRecognition(): void {\n        this.privIsSpeechEnded = false;\n        this.privIsRecognizing = true;\n        this.privTurnStartAudioOffset = 0;\n        this.privLastRecoOffset = 0;\n        this.privRequestId = createNoDashGuid();\n        this.privRecogNumber++;\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n    }\n\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean, error?: string): Promise<void> {\n        this.privAudioNode = audioNode;\n        this.privIsAudioNodeDetached = false;\n\n        if (isError) {\n            await this.onComplete();\n        } else {\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\n        }\n    }\n\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.privAuthFetchEventId = authFetchEventId;\n        this.privSessionId = connectionId;\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\n    }\n\n    public async onAuthCompleted(isError: boolean, error?: string): Promise<void> {\n        if (isError) {\n            await this.onComplete();\n        }\n    }\n\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\n        if (statusCode === 200) {\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\n            if (!!this.privAudioNode) {\n                this.privAudioNode.replay();\n            }\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privBytesSent = 0;\n            return;\n        } else if (statusCode === 403) {\n            await this.onComplete();\n        }\n    }\n\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\n        this.privTurnDeferral.resolve();\n\n        if (!continuousRecognition || this.isSpeechEnded) {\n            await this.onComplete();\n            this.privInTurn = false;\n        } else {\n            // Start a new request set.\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\n            this.privRequestId = createNoDashGuid();\n            this.privAudioNode.replay();\n        }\n    }\n\n    public onServiceTurnStartResponse = (): void => {\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\n            // What? How are we starting a turn with another not done?\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\n            /* tslint:disable:no-empty */\n            this.privTurnDeferral.promise.then().catch(() => { });\n        }\n        this.privInTurn = true;\n        this.privTurnDeferral = new Deferred<void>();\n    }\n\n    public onHypothesis(offset: number): void {\n        if (!this.privHypothesisReceived) {\n            this.privHypothesisReceived = true;\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\n        }\n    }\n\n    public onPhraseRecognized(offset: number): void {\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\n        this.onServiceRecognized(offset);\n    }\n\n    public onServiceRecognized(offset: number): void {\n        this.privLastRecoOffset = offset;\n        this.privHypothesisReceived = false;\n        this.privAudioNode.shrinkBuffers(offset);\n        this.privConnectionAttempts = 0;\n    }\n\n    public onAudioSent(bytesSent: number): void {\n        this.privBytesSent += bytesSent;\n    }\n\n    public onRetryConnection(): void {\n        this.privConnectionAttempts++;\n    }\n\n    public async dispose(error?: string): Promise<void> {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                await detachable.detach();\n            }\n\n            this.privServiceTelemetryListener?.dispose();\n            this.privIsRecognizing = false;\n        }\n    }\n\n    public getTelemetry = (): string => {\n        if (this.privServiceTelemetryListener.hasTelemetry) {\n            return this.privServiceTelemetryListener.getTelemetry();\n        } else {\n            return null;\n        }\n    }\n\n    public async onStopRecognizing(): Promise<void> {\n        await this.onComplete();\n    }\n\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\n    public onSpeechEnded(): void {\n        this.privIsSpeechEnded = true;\n    }\n\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\n        if (!!this.privServiceTelemetryListener) {\n            this.privServiceTelemetryListener.onEvent(event);\n        }\n        Events.instance.onEvent(event);\n    }\n\n    private async onComplete(): Promise<void> {\n        if (!!this.privIsRecognizing) {\n            this.privIsRecognizing = false;\n            await this.detachAudioNode();\n        }\n    }\n\n    private async detachAudioNode(): Promise<void> {\n        if (!this.privIsAudioNodeDetached) {\n            this.privIsAudioNodeDetached = true;\n            if (this.privAudioNode) {\n                await this.privAudioNode.detach();\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../common/Exports\";\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\n\nexport interface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\nexport interface IMetric {\n    End?: string;\n    Error?: string;\n    Id?: string;\n    Name?: string;\n    Start?: string;\n    PhraseLatencyMs?: number[];\n    FirstHypothesisLatencyMs?: number[];\n}\n\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private privIsDisposed: boolean = false;\n\n    private privRequestId: string;\n    private privAudioSourceId: string;\n    private privAudioNodeId: string;\n\n    private privListeningTriggerMetric: IMetric = null;\n    private privMicMetric: IMetric = null;\n    private privConnectionEstablishMetric: IMetric = null;\n\n    private privMicStartTime: string;\n\n    private privConnectionId: string;\n    private privConnectionStartTime: string;\n\n    private privReceivedMessages: IStringDictionary<string[]>;\n    private privPhraseLatencies: number[];\n    private privHypothesisLatencies: number[];\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.privRequestId = requestId;\n        this.privAudioSourceId = audioSourceId;\n        this.privAudioNodeId = audioNodeId;\n\n        this.privReceivedMessages = {};\n        this.privPhraseLatencies = [];\n        this.privHypothesisLatencies = [];\n    }\n\n    public phraseReceived(audioReceivedTime: number): void {\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\n        }\n    }\n\n    public hypothesisReceived(audioReceivedTime: number): void {\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\n        }\n    }\n\n    public onEvent = (e: PlatformEvent): void => {\n        if (this.privIsDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\n            this.privListeningTriggerMetric = {\n                End: e.eventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.eventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            this.privMicStartTime = e.eventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Error: e.error,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\n            if (!this.privMicMetric) {\n                this.privMicMetric = {\n                    End: e.eventTime,\n                    Name: \"Microphone\",\n                    Start: this.privMicStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\n            this.privConnectionId = e.sessionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\n            this.privConnectionStartTime = e.eventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\n            if (!this.privConnectionEstablishMetric) {\n                this.privConnectionEstablishMetric = {\n                    End: e.eventTime,\n                    Error: this.getConnectionError(e.statusCode),\n                    Id: this.privConnectionId,\n                    Name: \"Connection\",\n                    Start: this.privConnectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\n            if (e.message && e.message.headers && e.message.headers.path) {\n                if (!this.privReceivedMessages[e.message.headers.path]) {\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\n                }\n\n                this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\n            }\n        }\n    }\n\n    public getTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.privListeningTriggerMetric) {\n            metrics.push(this.privListeningTriggerMetric);\n        }\n\n        if (this.privMicMetric) {\n            metrics.push(this.privMicMetric);\n        }\n\n        if (this.privConnectionEstablishMetric) {\n            metrics.push(this.privConnectionEstablishMetric);\n        }\n\n        if (this.privPhraseLatencies.length > 0) {\n            metrics.push({\n                PhraseLatencyMs: this.privPhraseLatencies,\n            });\n        }\n\n        if (this.privHypothesisLatencies.length > 0) {\n            metrics.push({\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\n            });\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.privReceivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.privReceivedMessages = {};\n        this.privListeningTriggerMetric = null;\n        this.privMicMetric = null;\n        this.privConnectionEstablishMetric = null;\n        this.privPhraseLatencies = [];\n        this.privHypothesisLatencies = [];\n        return json;\n    }\n\n    // Determines if there are any telemetry events to send to the service.\n    public get hasTelemetry(): boolean {\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\n            this.privListeningTriggerMetric !== null ||\n            this.privMicMetric !== null ||\n            this.privConnectionEstablishMetric !== null ||\n            this.privPhraseLatencies.length !== 0 ||\n            this.privHypothesisLatencies.length !== 0);\n    }\n\n    public dispose = (): void => {\n        this.privIsDisposed = true;\n    }\n\n    private getConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    DynamicGrammarBuilder,\n    IDynamicGrammar,\n} from \"./Exports\";\n\n/**\n * Represents the JSON used in the speech.context message sent to the speech service.\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\n */\nexport class SpeechContext {\n    private privContext: { [section: string]: any } = {};\n    private privDynamicGrammar: DynamicGrammarBuilder;\n\n    constructor(dynamicGrammar: DynamicGrammarBuilder) {\n        this.privDynamicGrammar = dynamicGrammar;\n    }\n\n    /**\n     * Adds a section to the speech.context object.\n     * @param sectionName Name of the section to add.\n     * @param value JSON serializable object that represents the value.\n     */\n    public setSection(sectionName: string, value: any): void {\n        this.privContext[sectionName] = value;\n    }\n\n    /**\n     * @Internal\n     * This is only used by pronunciation assessment config.\n     * Do not use externally, object returned will change without warning or notice.\n     */\n    public setPronunciationAssessmentParams(params: string): void {\n        if (this.privContext.phraseDetection === undefined) {\n            this.privContext.phraseDetection = {\n                enrichment: {\n                    pronunciationAssessment: {}\n                }\n            };\n        }\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params);\n        if (this.privContext.phraseOutput === undefined) {\n            this.privContext.phraseOutput = {\n                detailed: {\n                    options: []\n                },\n                format: {}\n            };\n        }\n        this.privContext.phraseOutput.format = \"Detailed\";\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\n        }\n    }\n\n    public toJSON(): string {\n\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\n        this.setSection(\"dgi\", dgi);\n\n        const ret: string = JSON.stringify(this.privContext);\n        return ret;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IDynamicGrammar,\n    IDynamicGrammarGeneric,\n} from \"./Exports\";\n\n/**\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\n * @class DynamicGrammarBuilder\n */\nexport class DynamicGrammarBuilder {\n\n    private privPhrases: string[];\n    private privGrammars: string[];\n\n    // Adds one more reference phrases to the dynamic grammar to send.\n    // All added phrases are generic phrases.\n    public addPhrase(phrase: string | string[]): void {\n        if (!this.privPhrases) {\n            this.privPhrases = [];\n        }\n\n        if (phrase instanceof Array) {\n            this.privPhrases = this.privPhrases.concat(phrase as string[]);\n        } else {\n            this.privPhrases.push(phrase as string);\n        }\n    }\n\n    // Clears all phrases stored in the current object.\n    public clearPhrases(): void {\n        this.privPhrases = undefined;\n    }\n\n    // Adds one or more reference grammars to the current grammar.\n    public addReferenceGrammar(grammar: string | string[]): void {\n        if (!this.privGrammars) {\n            this.privGrammars = [];\n        }\n\n        if (grammar instanceof Array) {\n            this.privGrammars = this.privGrammars.concat(grammar as string[]);\n        } else {\n            this.privGrammars.push(grammar as string);\n        }\n    }\n\n    // clears all grammars stored on the recognizer.\n    public clearGrammars(): void {\n        this.privGrammars = undefined;\n    }\n\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\n    // of a DynamicGrammarBuilder\n    public generateGrammarObject(): IDynamicGrammar {\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\n            return undefined;\n        }\n\n        const retObj: IDynamicGrammar = {};\n        retObj.ReferenceGrammars = this.privGrammars;\n\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\n            const retPhrases: IDynamicGrammarGeneric[] = [];\n\n            this.privPhrases.forEach((value: string, index: number, array: string[]): void => {\n                retPhrases.push({\n                    Text: value,\n                });\n            });\n\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\n        }\n\n        return retObj;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// Interfaces in this file represent the various nodes in the JSON that the speech service accepts\n// for dynamic grammars.\n\n/**\n *  Top level grammar node\n */\nexport interface IDynamicGrammar {\n    ReferenceGrammars?: string[];\n    Groups?: IDynamicGrammarGroup[];\n}\n\n/**\n * Group of Dynamic Grammar items of a common type.\n */\nexport interface IDynamicGrammarGroup {\n    Type: string;\n    Name?: string;\n    SubstringMatch?: string; // None, LeftRooted, PartialName\n    Items: IDynamicGrammarPeople[] | IDynamicGrammarGeneric[];\n}\n\nexport interface IDynamicGrammarPeople {\n    Name: string;\n    First?: string;\n    Middle?: string;\n    Last?: string;\n    Synonyms?: string[];\n    Weight?: number;\n}\n\n/**\n * Generic phrase based dynamic grammars\n */\nexport interface IDynamicGrammarGeneric {\n    Text: string;\n    Synonyms?: string[];\n    Weight?: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ReplayableAudioNode\n} from \"../common.browser/Exports\";\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\nimport {\n    BackgroundEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    createGuid,\n    createNoDashGuid,\n    Deferred,\n    DialogEvent,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IConnection,\n    MessageType,\n    ServiceEvent,\n} from \"../common/Exports\";\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\nimport {\n    ActivityReceivedEventArgs,\n    CancellationErrorCode,\n    CancellationReason,\n    DialogServiceConfig,\n    DialogServiceConnector,\n    PropertyCollection,\n    PropertyId,\n    RecognitionEventArgs,\n    ResultReason,\n    SessionEventArgs,\n    SpeechRecognitionCanceledEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechRecognitionResult,\n    TurnStatusReceivedEventArgs,\n} from \"../sdk/Exports\";\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\nimport {\n    CancellationErrorCodePropertyName,\n    EnumTranslation,\n    ISpeechConfigAudioDevice,\n    RecognitionStatus,\n    ServiceRecognizerBase,\n    SimpleSpeechPhrase,\n    SpeechDetected,\n    SpeechHypothesis,\n    SpeechKeyword,\n} from \"./Exports\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { IConnectionFactory } from \"./IConnectionFactory\";\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\n    private privDialogServiceConnector: DialogServiceConnector;\n\n    private privDialogAudioSource: IAudioSource;\n\n    private privConnectionLoop: Promise<void>;\n    private terminateMessageLoop: boolean;\n    private agentConfigSent: boolean;\n    private privLastResult: SpeechRecognitionResult;\n    private privEvents: EventSource<DialogEvent>;\n\n    // Turns are of two kinds:\n    // 1: SR turns, end when the SR result is returned and then turn end.\n    // 2: Service turns where an activity is sent by the service along with the audio.\n    private privTurnStateManager: DialogServiceTurnStateManager;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        dialogServiceConnector: DialogServiceConnector) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\n\n        this.privEvents = new EventSource<DialogEvent>();\n        this.privDialogServiceConnector = dialogServiceConnector;\n        this.receiveMessageOverride = this.receiveDialogMessageOverride;\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\n        this.recognizeOverride = this.listenOnce;\n        this.postConnectImplOverride = this.dialogConnectImpl;\n        this.configConnectionOverride = this.configConnection;\n        this.disconnectOverride = this.privDisconnect;\n        this.privDialogAudioSource = audioSource;\n\n        this.agentConfigSent = false;\n        this.privLastResult = null;\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                this.terminateMessageLoop = true;\n            }\n        });\n    }\n\n    public async sendMessage(message: string): Promise<void> {\n        const interactionGuid: string = createGuid();\n        const requestId: string = createNoDashGuid();\n\n        const agentMessage: any = {\n            context: {\n                interactionId: interactionGuid\n            },\n            messagePayload: JSON.parse(message),\n            version: 0.5\n        };\n\n        const agentMessageJson = JSON.stringify(agentMessage);\n        const connection: IConnection = await this.fetchConnection();\n        await connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"agent\",\n            requestId,\n            \"application/json\",\n            agentMessageJson));\n\n    }\n\n    protected async privDisconnect(): Promise<void> {\n        await this.cancelRecognition(this.privRequestSession.sessionId,\n            this.privRequestSession.requestId,\n            CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        this.terminateMessageLoop = true;\n        this.agentConfigSent = false;\n        return;\n    }\n\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\n\n        const resultProps: PropertyCollection = new PropertyCollection();\n        if (connectionMessage.messageType === MessageType.Text) {\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\n        }\n\n        let result: SpeechRecognitionResult;\n        let processed: boolean;\n\n        switch (connectionMessage.path.toLowerCase()) {\n            case \"speech.phrase\":\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\n\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\n\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\n                    this.privLastResult = args.result;\n\n                    if (!!this.privDialogServiceConnector.recognized) {\n                        try {\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\n                            /* tslint:disable:no-empty */\n                        } catch (error) {\n                            // Not going to let errors in the event handler\n                            // trip things up.\n                        }\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.hypothesis\":\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    ResultReason.RecognizingSpeech,\n                    hypothesis.Text,\n                    hypothesis.Duration,\n                    offset,\n                    hypothesis.Language,\n                    hypothesis.LanguageDetectionConfidence,\n                    undefined,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                this.privRequestSession.onHypothesis(offset);\n\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\n\n                if (!!this.privDialogServiceConnector.recognizing) {\n                    try {\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"speech.keyword\":\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\n\n                result = new SpeechRecognitionResult(\n                    this.privRequestSession.requestId,\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\n                    keyword.Text,\n                    keyword.Duration,\n                    keyword.Offset,\n                    undefined,\n                    undefined,\n                    undefined,\n                    undefined,\n                    connectionMessage.textBody,\n                    resultProps);\n\n                if (keyword.Status !== \"Accepted\") {\n                    this.privLastResult = result;\n                }\n\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\n\n                if (!!this.privDialogServiceConnector.recognized) {\n                    try {\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n            case \"audio\":\n                {\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\n                    try {\n                        // Empty binary message signals end of stream.\n                        if (!connectionMessage.binaryBody) {\n                            turn.endAudioStream();\n                        } else {\n                            turn.audioStream.write(connectionMessage.binaryBody);\n                        }\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                processed = true;\n                break;\n\n            case \"response\":\n                {\n                    this.handleResponseMessage(connectionMessage);\n\n                }\n                processed = true;\n                break;\n\n            default:\n                break;\n        }\n        return processed;\n    }\n\n    // Cancels recognition.\n    protected async cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): Promise<void> {\n\n        this.terminateMessageLoop = true;\n\n        if (!!this.privRequestSession.isRecognizing) {\n            await this.privRequestSession.onStopRecognizing();\n        }\n\n        if (!!this.privDialogServiceConnector.canceled) {\n            const properties: PropertyCollection = new PropertyCollection();\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\n                cancellationReason,\n                error,\n                errorCode,\n                undefined,\n                sessionId);\n\n            try {\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n\n            if (!!this.privSuccessCallback) {\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\n                    undefined, // ResultId\n                    ResultReason.Canceled,\n                    undefined, // Text\n                    undefined, // Duration\n                    undefined, // Offset\n                    undefined, // Language\n                    undefined, // Language Detection Confidence\n                    undefined, // Speaker Id\n                    error,\n                    undefined, // Json\n                    properties);\n                try {\n                    this.privSuccessCallback(result);\n                    this.privSuccessCallback = undefined;\n                    /* tslint:disable:no-empty */\n                } catch { }\n            }\n        }\n    }\n\n    protected async listenOnce(\n        recoMode: RecognitionMode,\n        successCallback: (e: SpeechRecognitionResult) => void,\n        errorCallback: (e: string) => void\n    ): Promise<void> {\n        this.privRecognizerConfig.recognitionMode = recoMode;\n\n        this.privSuccessCallback = successCallback;\n        this.privErrorCallback = errorCallback;\n\n        this.privRequestSession.startNewRecognition();\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\n\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\n\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\n        const conPromise: Promise<IConnection> = this.connectImpl();\n\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\n\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\n\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\n\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\n\n        try {\n            await conPromise;\n            await preAudioPromise;\n        } catch (error) {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\n            return Promise.resolve();\n        }\n\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n\n        if (!!this.privRecognizer.sessionStarted) {\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\n        }\n\n        const audioSendPromise = this.sendAudio(audioNode);\n\n        // /* tslint:disable:no-empty */\n        audioSendPromise.then(() => { /*add? return true;*/ }, async (error: string) => {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        });\n    }\n\n    // Establishes a websocket connection to the end point.\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\n        this.privConnectionLoop = this.startMessageLoop();\n        return connection;\n    }\n\n    private receiveDialogMessageOverride(): Promise<void> {\n\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\n\n        const loop = async (): Promise<void> => {\n            try {\n                const isDisposed: boolean = this.isDisposed();\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\n                if (isDisposed || terminateMessageLoop) {\n                    // We're done.\n                    communicationCustodian.resolve(undefined);\n                    return;\n                }\n\n                const connection: IConnection = await this.fetchConnection();\n                const message: ConnectionMessage = await connection.read();\n\n                if (!message) {\n                    return loop();\n                }\n\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n                switch (connectionMessage.path.toLowerCase()) {\n                    case \"turn.start\":\n                        {\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\n\n                            // turn started by the service\n                            if (turnRequestId !== audioSessionReqId) {\n                                this.privTurnStateManager.StartTurn(turnRequestId);\n                            } else {\n                                this.privRequestSession.onServiceTurnStartResponse();\n                            }\n                        }\n                        break;\n\n                    case \"speech.startdetected\":\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\n\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\n\n                        if (!!this.privRecognizer.speechStartDetected) {\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\n                        }\n\n                        break;\n\n                    case \"speech.enddetected\":\n\n                        let json: string;\n\n                        if (connectionMessage.textBody.length > 0) {\n                            json = connectionMessage.textBody;\n                        } else {\n                            // If the request was empty, the JSON returned is empty.\n                            json = \"{ Offset: 0 }\";\n                        }\n\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\n\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\n\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\n\n                        if (!!this.privRecognizer.speechEndDetected) {\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\n                        }\n                        break;\n\n                    case \"turn.end\":\n                        {\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\n\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\n\n                            // turn started by the service\n                            if (turnEndRequestId !== audioSessionReqId) {\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\n                            } else {\n                                // Audio session turn\n\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\n\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\n                                    if (!!this.privRecognizer.sessionStopped) {\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\n                                    }\n                                }\n\n                                // report result to promise.\n                                if (!!this.privSuccessCallback && this.privLastResult) {\n                                    try {\n                                        this.privSuccessCallback(this.privLastResult);\n                                        this.privLastResult = null;\n                                    } catch (e) {\n                                        if (!!this.privErrorCallback) {\n                                            this.privErrorCallback(e);\n                                        }\n                                    }\n                                    // Only invoke the call back once.\n                                    // and if it's successful don't invoke the\n                                    // error after that.\n                                    this.privSuccessCallback = undefined;\n                                    this.privErrorCallback = undefined;\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\n                            if (!!this.serviceEvents) {\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                            }\n                        }\n                }\n                const ret: Promise<void> = loop();\n\n                return ret;\n            } catch (error) {\n                this.terminateMessageLoop = true;\n                communicationCustodian.resolve();\n            }\n        };\n\n        loop().catch((reason: string): void => {\n            Events.instance.onEvent(new BackgroundEvent(reason));\n        });\n\n        return communicationCustodian.promise;\n    }\n\n    private async startMessageLoop(): Promise<void> {\n\n        this.terminateMessageLoop = false;\n\n        try {\n            await this.receiveDialogMessageOverride();\n        } catch (error) {\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n        }\n\n        return Promise.resolve();\n    }\n\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    private async configConnection(connection: IConnection): Promise<IConnection> {\n        if (this.terminateMessageLoop) {\n            this.terminateMessageLoop = false;\n            return Promise.reject(`Connection to service terminated.`);\n        }\n\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\n        await this.sendAgentConfig(connection);\n        return connection;\n    }\n\n    private async sendPreAudioMessages(): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        this.addKeywordContextData();\n        await this.sendSpeechContext(connection);\n        await this.sendAgentContext(connection);\n        await this.sendWaveHeader(connection);\n    }\n\n    private sendAgentConfig = (connection: IConnection): Promise<void> => {\n        if (this.agentConfig && !this.agentConfigSent) {\n\n            if (this.privRecognizerConfig\n                .parameters\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\n                const config = this.agentConfig.get();\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\n                this.agentConfig.set(config);\n            }\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\n\n            const agentConfigJson = this.agentConfig.toJsonString();\n\n            // guard against sending this multiple times on one connection\n            this.agentConfigSent = true;\n\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"agent.config\",\n                this.privRequestSession.requestId,\n                \"application/json\",\n                agentConfigJson));\n        }\n\n        return;\n    }\n\n    private sendAgentContext = (connection: IConnection): Promise<void> => {\n        const guid: string = createGuid();\n\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\n\n        const agentContext: any = {\n            channelData: \"\",\n            context: {\n                interactionId: guid\n            },\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\n            version: 0.5\n        };\n\n        const agentContextJson = JSON.stringify(agentContext);\n\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"speech.agent.context\",\n            this.privRequestSession.requestId,\n            \"application/json\",\n            agentContextJson));\n    }\n\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\n\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\n\n        const result = new SpeechRecognitionResult(\n            this.privRequestSession.requestId,\n            resultReason,\n            serviceResult.DisplayText,\n            serviceResult.Duration,\n            offset,\n            serviceResult.Language,\n            serviceResult.LanguageDetectionConfidence,\n            undefined,\n            undefined,\n            JSON.stringify(serviceResult),\n            properties);\n\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\n        return ev;\n    }\n\n    private handleResponseMessage = (responseMessage: SpeechConnectionMessage): void => {\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\n        // event according to the message type that's specified.\n        const responsePayload = JSON.parse(responseMessage.textBody);\n        switch (responsePayload.messageType.toLowerCase()) {\n            case \"message\":\n                const responseRequestId = responseMessage.requestId.toUpperCase();\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\n\n                // update the conversation Id\n                if (activityPayload.conversationId) {\n                    const updateAgentConfig = this.agentConfig.get();\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\n                    this.agentConfig.set(updateAgentConfig);\n                }\n\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\n                    activityPayload,\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\n                if (!!this.privDialogServiceConnector.activityReceived) {\n                    try {\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n\n            case \"messagestatus\":\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\n                    try {\n                        this.privDialogServiceConnector.turnStatusReceived(\n                            this.privDialogServiceConnector,\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\n                        /* tslint:disable:no-empty */\n                    } catch (error) {\n                        // Not going to let errors in the event handler\n                        // trip things up.\n                    }\n                }\n                break;\n\n            default:\n                Events.instance.onEvent(\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\n                break;\n        }\n    }\n\n    private onEvent(event: DialogEvent): void {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private addKeywordContextData(): void {\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\n        if (keywordPropertyValue === undefined) {\n            return;\n        }\n\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\n\n        const keywords = keywordPropertyValue.split(\";\");\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\n\n        const keywordDefinitionArray = [];\n        for (let i = 0; i < keywords.length; i++) {\n            const definition: { [section: string]: any } = {};\n            definition.text = keywords[i];\n            if (i < keywordOffsets.length) {\n                definition.offset = Number(keywordOffsets[i]);\n            }\n            if (i < keywordDurations.length) {\n                definition.duration = Number(keywordDurations[i]);\n            }\n            keywordDefinitionArray.push(definition);\n        }\n\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\n        this.speechContext.setSection(\"keywordDetection\", [{\n            clientDetectedKeywords: keywordDefinitionArray,\n            onReject: { action: \"EndOfTurn\" },\n            type: \"startTrigger\"\n        }]);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { InvalidOperationError } from \"../common/Error\";\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState\";\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\n\nexport class DialogServiceTurnStateManager {\n    private privTurnMap: Map<string, DialogServiceTurnState>;\n\n    constructor() {\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\n        return;\n    }\n\n    public StartTurn(id: string): DialogServiceTurnState {\n        if (this.privTurnMap.has(id)) {\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\n        }\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\n        this.privTurnMap.set(id, turnState);\n        return this.privTurnMap.get(id);\n    }\n\n    public GetTurn(id: string): DialogServiceTurnState {\n        return this.privTurnMap.get(id);\n    }\n\n    public CompleteTurn(id: string): DialogServiceTurnState {\n        if (!this.privTurnMap.has(id)) {\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\n        }\n        const turnState = this.privTurnMap.get(id);\n        turnState.complete();\n        this.privTurnMap.delete(id);\n        return turnState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\n\nexport class DialogServiceTurnState {\n    private privRequestId: string;\n    private privIsCompleted: boolean;\n    private privAudioStream: PullAudioOutputStreamImpl;\n    private privTimeoutToken: any;\n    private privTurnManager: DialogServiceTurnStateManager;\n\n    constructor(manager: DialogServiceTurnStateManager, requestId: string) {\n        this.privRequestId = requestId;\n        this.privIsCompleted = false;\n        this.privAudioStream = null;\n        this.privTurnManager = manager;\n        this.resetTurnEndTimeout();\n        // tslint:disable-next-line:no-console\n        // console.info(\"DialogServiceTurnState debugturn start:\" + this.privRequestId);\n    }\n\n    public get audioStream(): PullAudioOutputStreamImpl {\n        // Called when is needed to stream.\n        this.resetTurnEndTimeout();\n        return this.privAudioStream;\n    }\n\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\n            // tslint:disable-next-line:no-console\n            // console.info(\"Audio start debugturn:\" + this.privRequestId);\n        }\n        return this.privAudioStream;\n    }\n\n    public endAudioStream(): void {\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\n            this.privAudioStream.close();\n        }\n    }\n\n    public complete(): void {\n        if (this.privTimeoutToken !== undefined) {\n            clearTimeout(this.privTimeoutToken);\n        }\n        this.endAudioStream();\n    }\n\n    private resetTurnEndTimeout(): void {\n        if (this.privTimeoutToken !== undefined) {\n            clearTimeout(this.privTimeoutToken);\n        }\n        // tslint:disable-next-line:no-console\n        // console.info(\"Timeout reset debugturn:\" + this.privRequestId);\n\n        this.privTimeoutToken = setTimeout((): void => {\n            // tslint:disable-next-line:no-console\n            // console.info(\"Timeout complete debugturn:\" + this.privRequestId);\n\n            this.privTurnManager.CompleteTurn(this.privRequestId);\n            return;\n        }, 2000);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n// response\n\nexport interface IActivityPayloadResponse {\n    conversationId: string;\n    messageDataStreamType: number;\n    messagePayload: any;\n    version: number;\n}\n\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\n    private privActivityResponse: IActivityPayloadResponse;\n\n    private constructor(json: string) {\n        this.privActivityResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): ActivityPayloadResponse {\n        return new ActivityPayloadResponse(json);\n    }\n\n    public get conversationId(): string {\n        return this.privActivityResponse.conversationId;\n    }\n\n    public get messageDataStreamType(): number {\n        return this.privActivityResponse.messageDataStreamType;\n    }\n\n    public get messagePayload(): any {\n        return this.privActivityResponse.messagePayload;\n    }\n\n    public get version(): number {\n        return this.privActivityResponse.version;\n    }\n}\n\nexport enum MessageDataStreamType {\n    None = 0,\n    TextToSpeechAudio = 1,\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Represents the JSON used in the agent.config message sent to the speech service.\n */\nexport class AgentConfig {\n    private iPrivConfig: IAgentConfig;\n\n    public toJsonString(): string {\n        return JSON.stringify(this.iPrivConfig);\n    }\n\n    public get(): IAgentConfig {\n        return this.iPrivConfig;\n    }\n\n    /**\n     * Setter for the agent.config object.\n     * @param value a JSON serializable object.\n     */\n    public set(value: IAgentConfig): void {\n        this.iPrivConfig = value;\n    }\n}\n\nexport interface IAgentConfig {\n    botInfo: {\n        commType: string,\n        connectionId: string,\n        conversationId: string,\n        fromId: string\n        commandsCulture: string,\n        ttsAudioFormat: string\n    };\n    version: number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport { ConversationManager } from \"./ConversationManager\";\nexport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nexport { ConversationRecognizerFactory } from \"./ConversationTranslatorRecognizer\";\nexport { TranscriberRecognizer } from \"./TranscriberRecognizer\";\nexport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\nexport {\n    ConversationRecognizer,\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalConversation,\n    IInternalParticipant,\n    InternalParticipants} from \"./ConversationTranslatorInterfaces\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IRequestOptions,\n    IRestParams,\n} from \"../../common.browser/RestConfigBase\";\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\nimport { extractHeaderValue, request } from \"./ConversationUtils\";\n\nexport class ConversationManager {\n\n    private privRequestParams: IRestParams;\n    private privErrors: IErrorMessages;\n    private privHost: string;\n    private privApiVersion: string;\n    private privRestPath: string;\n\n    public constructor() {\n        //\n        this.privRequestParams = ConversationConnectionConfig.configParams;\n        this.privErrors = ConversationConnectionConfig.restErrors;\n        this.privHost = ConversationConnectionConfig.host;\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\n        this.privRestPath = ConversationConnectionConfig.restPath;\n    }\n\n    /**\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\n     * @param args\n     * @param conversationCode\n     * @param callback\n     * @param errorCallback\n     */\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\n\n        try {\n\n            Contracts.throwIfNullOrUndefined(args, \"args\");\n\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name);\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\n\n            const queryParams: IStringDictionary<string> = {};\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n            queryParams[this.privRequestParams.languageCode] = languageCode;\n            queryParams[this.privRequestParams.nickname] = nickname;\n\n            const headers: IStringDictionary<string> = {};\n            if (correlationId) {\n                headers[this.privRequestParams.correlationId] = correlationId;\n            }\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\n\n            if (conversationCode !== undefined) {\n                queryParams[this.privRequestParams.roomId] = conversationCode;\n            } else {\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\n                if (subscriptionKey) {\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\n                } else if (authToken) {\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\n                } else {\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\n                }\n            }\n\n            const config: IRequestOptions = {};\n            config.headers = headers;\n\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\n\n            // TODO: support a proxy and certificate validation\n            request(\"post\", endpoint, queryParams, null, config, (response: IResponse) => {\n\n                const requestId: string = extractHeaderValue(this.privRequestParams.requestId, response.headers);\n\n                if (!response.ok) {\n                    if (!!err) {\n                        // get the error\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\n                        let errMessageRaw: IConversationResponseError;\n                        try {\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\n                        } catch (e) {\n                            errorMessage += ` [${response.data}]`;\n                        }\n                        if (requestId) {\n                            errorMessage += ` ${requestId}`;\n                        }\n\n                        err(errorMessage);\n                    }\n                    return;\n                }\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\n                if (conversation) {\n                    conversation.requestId = requestId;\n                }\n                if (!!cb) {\n                    try {\n                        cb(conversation);\n                    } catch (e) {\n                        if (!!err) {\n                            err(e);\n                        }\n                    }\n                    cb = undefined;\n                }\n\n            });\n\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\n     * @param args\n     * @param sessionToken\n     * @param callback\n     */\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\n            try {\n\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\n\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\n\n                const queryParams: IStringDictionary<string> = {};\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\n\n                const headers: IStringDictionary<string> = {};\n                if (correlationId) {\n                    headers[this.privRequestParams.correlationId] = correlationId;\n                }\n\n                const config: IRequestOptions = {};\n                config.headers = headers;\n\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\n\n                // TODO: support a proxy and certificate validation\n                request(\"delete\", endpoint, queryParams, null, config, (response: IResponse) => {\n\n                    if (!response.ok) {\n                        // ignore errors on delete\n                    }\n\n                    resolve();\n                });\n\n            } catch (error) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    reject(typedError.name + \": \" + typedError.message);\n\n                } else {\n                    reject(error);\n                }\n            }\n        });\n    }\n}\n","\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    RestConfigBase\n} from \"../../common.browser/RestConfigBase\";\n\nexport class ConversationConnectionConfig extends RestConfigBase {\n\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\n    private static readonly privRestPath: string = \"/capito/room\";\n    private static readonly privApiVersion: string = \"2.0\";\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\n    private static readonly privSpeechHost: string = \"{region}.s2s.speech.microsoft.com\";\n    private static readonly privSpeechPath: string = \"/speech/translation/cognitiveservices/v1\";\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferenciateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\n\n    public static get host(): string {\n        return ConversationConnectionConfig.privHost;\n    }\n\n    public static get apiVersion(): string {\n        return ConversationConnectionConfig.privApiVersion;\n    }\n\n    public static get clientAppId(): string {\n        return ConversationConnectionConfig.privClientAppId;\n    }\n\n    public static get defaultLanguageCode(): string {\n        return ConversationConnectionConfig.privDefaultLanguageCode;\n    }\n\n    public static get restPath(): string {\n        return ConversationConnectionConfig.privRestPath;\n    }\n\n    public static get webSocketPath(): string {\n        return ConversationConnectionConfig.privWebSocketPath;\n    }\n\n    public static get speechHost(): string {\n        return ConversationConnectionConfig.privSpeechHost;\n    }\n\n    public static get speechPath(): string {\n        return ConversationConnectionConfig.privSpeechPath;\n    }\n\n    public static get transcriptionEventKeys(): string[] {\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IErrorMessages } from \"../common/Exports\";\n/**\n * HTTP request helper\n */\nexport interface IRequestOptions {\n    headers?: {[key: string]: string};\n    ignoreCache?: boolean;\n    timeout?: number;\n}\n\nexport interface IRestParams {\n    apiVersion: string;\n    authorization: string;\n    clientAppId: string;\n    contentTypeKey: string;\n    correlationId: string;\n    languageCode: string;\n    nickname: string;\n    profanity: string;\n    requestId: string;\n    roomId: string;\n    sessionToken: string;\n    subscriptionKey: string;\n    subscriptionRegion: string;\n    token: string;\n}\n\nexport class RestConfigBase {\n\n    public static get requestOptions(): IRequestOptions {\n        return RestConfigBase.privDefaultRequestOptions;\n    }\n\n    public static get configParams(): IRestParams {\n        return RestConfigBase.privDefaultParams;\n    }\n\n    public static get restErrors(): IErrorMessages {\n        return RestConfigBase.privRestErrors;\n    }\n\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\n        headers: {\n            Accept: \"application/json\",\n        },\n        ignoreCache: false,\n        timeout: 10000,\n    };\n\n    private static readonly privRestErrors: IErrorMessages = {\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\n        invalidArgs: \"Required input not found: {arg}.\",\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\n        invalidParticipantRequest: \"The requested participant was not found.\",\n        permissionDeniedConnect: \"Required credentials not found.\",\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\n    };\n\n    private static readonly privDefaultParams: IRestParams = {\n        apiVersion: \"api-version\",\n        authorization: \"Authorization\",\n        clientAppId: \"X-ClientAppId\",\n        contentTypeKey: \"Content-Type\",\n        correlationId: \"X-CorrelationId\",\n        languageCode: \"language\",\n        nickname: \"nickname\",\n        profanity: \"profanity\",\n        requestId: \"X-RequestId\",\n        roomId: \"roomid\",\n        sessionToken: \"token\",\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\n        token: \"X-CapitoToken\",\n    };\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { IResponse } from \"./ConversationTranslatorInterfaces\";\n\nimport { IRequestOptions, RestConfigBase } from \"../../common.browser/RestConfigBase\";\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\n\n// Node.JS specific xmlhttprequest / browser support.\nimport * as XHR from \"xmlhttprequest-ts\";\n\n/**\n * Config settings for Conversation Translator\n */\n/**\n * Helpers for sending / receiving HTTPS requests / responses.\n * @param params\n */\nfunction queryParams(params: any = {}): any {\n    return Object.keys(params)\n        .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n        .join(\"&\");\n}\n\nfunction withQuery(url: string, params: any = {}): any {\n    const queryString = queryParams(params);\n    return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n}\n\nfunction parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IResponse {\n    return {\n        data: xhr.responseText,\n        headers: xhr.getAllResponseHeaders(),\n        json: <T>() => JSON.parse(xhr.responseText) as T,\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n    };\n}\n\nfunction errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IResponse {\n    return {\n        data: message || xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\n        ok: false,\n        status: xhr.status,\n        statusText: xhr.statusText,\n    };\n}\n\nexport function extractHeaderValue(headerKey: string, headers: string): string {\n\n    let headerValue: string = \"\";\n\n    try {\n        const arr = headers.trim().split(/[\\r\\n]+/);\n        const headerMap: any = {};\n        arr.forEach((line: any) => {\n            const parts = line.split(\": \");\n            const header = parts.shift().toLowerCase();\n            const value = parts.join(\": \");\n            headerMap[header] = value;\n        });\n\n        headerValue = headerMap[headerKey.toLowerCase()];\n    } catch (e) {\n        // ignore the error\n    }\n\n    return headerValue;\n}\n\nexport function request(\n    method: \"get\" | \"post\" | \"delete\",\n    url: string,\n    queryParams: any = {},\n    body: any = null,\n    options: IRequestOptions = {},\n    callback: any): any {\n\n    const defaultRequestOptions = RestConfigBase.requestOptions;\n\n    const ignoreCache = options.ignoreCache || defaultRequestOptions.ignoreCache;\n    const headers = options.headers || defaultRequestOptions.headers;\n    const timeout = options.timeout || defaultRequestOptions.timeout;\n\n    let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\n    if (typeof window === \"undefined\") { // Node\n        xhr = new XHR.XMLHttpRequest();\n\n    } else {\n        xhr = new XMLHttpRequest();\n    }\n    xhr.open(method, withQuery(url, queryParams), true);\n\n    if (headers) {\n        Object.keys(headers).forEach((key: any) => xhr.setRequestHeader(key, headers[key]));\n    }\n\n    if (ignoreCache) {\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    }\n\n    xhr.timeout = timeout;\n\n    xhr.onload = (evt: any) => {\n        callback(parseXHRResult(xhr));\n    };\n\n    xhr.onerror = (evt: any) => {\n        callback(errorResponse(xhr, \"Failed to make request.\"));\n    };\n\n    xhr.ontimeout = (evt: any) => {\n        callback(errorResponse(xhr, \"Request took longer than expected.\"));\n    };\n\n    if (method === \"post\" && body) {\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(JSON.stringify(body));\n    } else {\n        xhr.send();\n    }\n}\n\nexport function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\n    if (!!promise) {\n        promise.then((result: T): void => {\n            try {\n                if (!!cb) {\n                    cb();\n                }\n            } catch (e) {\n                if (!!err) {\n                    err(`'Unhandled error on promise callback: ${e}'`);\n                }\n            }\n        }, (reason: any) => {\n            try {\n                if (!!err) {\n                    err(reason);\n                }\n                /* tslint:disable:no-empty */\n            } catch (error) {\n            }\n        });\n    } else {\n        if (!!err) {\n            err(\"Null promise\");\n        }\n    }\n}\n","/* (ignored) */","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig\n} from \"../../common.speech/Exports\";\nimport {\n    BackgroundEvent,\n    Events\n} from \"../../common/Exports\";\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport {\n    AudioConfig,\n    Connection,\n    ConnectionEventArgs,\n    ConversationExpirationEventArgs,\n    ConversationParticipantsChangedEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    PropertyCollection,\n    Recognizer,\n    SessionEventArgs,\n    SpeechTranslationConfig\n} from \"../../sdk/Exports\";\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\nimport { Callback } from \"../../sdk/Transcription/IConversation\";\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs\n} from \"./ConversationTranslatorEventArgs\";\nimport {\n    ConversationRecognizer,\n} from \"./ConversationTranslatorInterfaces\";\nimport { PromiseToEmptyCallback } from \"./ConversationUtils\";\n\nexport class ConversationRecognizerFactory {\n    public static fromConfig(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\n        return new ConversationTranslatorRecognizer(speechConfig, audioConfig);\n    }\n}\n\n/**\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\n * Based off the recognizers in the SDK folder.\n */\n// tslint:disable-next-line:max-classes-per-file\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\n\n    private privIsDisposed: boolean;\n    private privSpeechRecognitionLanguage: string;\n    private privConnection: Connection;\n\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\n\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\n\n        this.privIsDisposed = false;\n        this.privProperties = serviceConfigImpl.properties.clone();\n        this.privConnection = Connection.fromRecognizer(this);\n    }\n\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\n\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\n        this.privConnection.connected = cb;\n    }\n\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\n        this.privConnection.disconnected = cb;\n    }\n\n    /**\n     * Return the speech language used by the recognizer\n     */\n    public get speechRecognitionLanguage(): string {\n        return this.privSpeechRecognitionLanguage;\n    }\n\n    /**\n     * Return the properties for the recognizer\n     */\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    /**\n     * Connect to the recognizer\n     * @param token\n     */\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\n            this.privReco.conversationTranslatorToken = token;\n            this.privReco.connectAsync(cb, err);\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Disconnect from the recognizer\n     */\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            this.privReco.disconnect().then(() => {\n                if (!!cb) {\n                    cb();\n                }\n            }, (error: string) => {\n                if (!!err) {\n                    err(error);\n                }\n            });\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n            // Destroy the recognizer.\n            this.dispose(true).catch((reason: string): void => {\n                Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n\n        }\n    }\n\n    /**\n     * Send the mute all participants command to the websocket\n     * @param conversationId\n     * @param participantId\n     * @param isMuted\n     */\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\n        try {\n            Contracts.throwIfDisposed(this.privIsDisposed);\n            this.sendMessage(command, cb, err);\n        } catch (error) {\n            if (!!err) {\n                if (error instanceof Error) {\n                    const typedError: Error = error as Error;\n                    err(typedError.name + \": \" + typedError.message);\n                } else {\n                    err(error);\n                }\n            }\n\n            // Destroy the recognizer.\n            this.dispose(true).catch((reason: string): void => {\n                Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n\n        }\n    }\n\n    /**\n     * Close and dispose the recognizer\n     */\n    public async close(): Promise<void> {\n        Contracts.throwIfDisposed(this.privIsDisposed);\n        this.privConnection?.closeConnection();\n        this.privConnection?.close();\n        this.privConnection = undefined;\n        await this.dispose(true);\n    }\n\n    /**\n     * Dispose the recognizer\n     * @param disposing\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privIsDisposed) {\n            return;\n        }\n        if (disposing) {\n            this.privIsDisposed = true;\n            if (!!this.privConnection) {\n                this.privConnection.closeConnection();\n                this.privConnection.close();\n                this.privConnection = undefined;\n            }\n            await super.dispose(disposing);\n        }\n    }\n\n    /**\n     * Create the config for the recognizer\n     * @param speechConfig\n     */\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(speechConfig, this.privProperties);\n    }\n\n    /**\n     * Create the service recognizer.\n     * The audio source is redundnant here but is required by the implementation.\n     * @param authentication\n     * @param connectionFactory\n     * @param audioConfig\n     * @param recognizerConfig\n     */\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\n\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\n    }\n\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\n        const withAsync = this.privReco as ConversationServiceAdapter;\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport { PropertyId } from \"../../sdk/Exports\";\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\n\n/**\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\n * The conversation must already have been started or joined.\n */\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\n\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\n\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\n\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\n        Contracts.throwIfNullOrUndefined(token, \"token\");\n\n        const queryParams: IStringDictionary<string> = {};\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionMessage,\n    Deferred,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n    MessageType,\n    RawWebsocketMessage,\n} from \"../../common/Exports\";\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\n\n/**\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\n */\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\n\n    /**\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\n     */\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConversationConnectionMessage> => {\n        const deferral = new Deferred<ConversationConnectionMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\n                deferral.resolve(incomingMessage);\n            } else if (message.messageType === MessageType.Binary) {\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. Error: ${e}`);\n        }\n\n        return deferral.promise;\n    }\n\n    /**\n     * Format outgoing messages: text (commands or IM)\n     */\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\n\n        const deferral = new Deferred<RawWebsocketMessage>();\n\n        try {\n            if (message.messageType === MessageType.Text) {\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\n            }\n        } catch (e) {\n            deferral.reject(`Error formatting the message. ${e}`);\n        }\n\n        return deferral.promise;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\n\nexport class ConversationConnectionMessage extends ConnectionMessage {\n    private privConversationMessageType: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n            super(messageType, body, headers, id);\n            const json = JSON.parse(this.textBody);\n            if (json.type !== undefined) {\n                this.privConversationMessageType = json.type;\n            }\n    }\n\n    public get conversationMessageType(): string {\n        return this.privConversationMessageType;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionMessage,\n    ConnectionState,\n    createNoDashGuid,\n    Deferred,\n    IAudioSource,\n    IConnection,\n    MessageType,\n} from \"../../common/Exports\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    ConversationExpirationEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    ConversationTranslationResult,\n    Translations\n} from \"../../sdk/Exports\";\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognizerConfig,\n    ServiceRecognizerBase\n} from \"../Exports\";\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs\n} from \"./ConversationTranslatorEventArgs\";\nimport {\n    ConversationTranslatorCommandTypes,\n    ConversationTranslatorMessageTypes,\n    IInternalParticipant\n} from \"./ConversationTranslatorInterfaces\";\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\nimport {\n    CommandResponsePayload,\n    IParticipantPayloadResponse,\n    IParticipantsListPayloadResponse,\n    ITranslationResponsePayload,\n    ParticipantPayloadResponse,\n    ParticipantsListPayloadResponse,\n    SpeechResponsePayload,\n    TextResponsePayload\n} from \"./ServiceMessages/Exports\";\n\n/***\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\n */\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\n    private privConversationConnectionFactory: IConnectionFactory;\n    private privConversationAuthFetchEventId: string;\n    private privConversationAuthentication: IAuthentication;\n    private privConversationRequestSession: ConversationRequestSession;\n    private privConnectionConfigPromise: Promise<IConnection>;\n    private privConnectionLoop: Promise<void>;\n    private terminateMessageLoop: boolean;\n    private privLastPartialUtteranceId: string = \"\";\n    private privConversationIsDisposed: boolean;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioSource: IAudioSource,\n        recognizerConfig: RecognizerConfig,\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\n\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\n\n        this.privConversationServiceConnector = conversationServiceConnector;\n        this.privConversationAuthentication = authentication;\n        this.receiveMessageOverride = this.receiveConversationMessageOverride;\n        this.recognizeOverride = this.noOp;\n        this.postConnectImplOverride = this.conversationConnectImpl;\n        this.configConnectionOverride = this.configConnection;\n        this.disconnectOverride = this.privDisconnect;\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\n        this.privConversationConnectionFactory = connectionFactory;\n        this.privConversationIsDisposed = false;\n    }\n\n    public isDisposed(): boolean {\n        return super.isDisposed() || this.privConversationIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privConversationIsDisposed = true;\n        if (this.privConnectionConfigPromise) {\n            const connection: IConnection = await this.privConnectionConfigPromise;\n            await connection.dispose(reason);\n        }\n        await super.dispose(reason);\n    }\n\n    public async sendMessage(message: string): Promise<void> {\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new ConversationConnectionMessage(\n            MessageType.Text,\n            message));\n    }\n\n    public async sendMessageAsync(message: string): Promise<void> {\n        const sink: Deferred<void> = new Deferred<void>();\n\n        const connection: IConnection = await this.fetchConnection();\n\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\n    }\n\n    protected privDisconnect(): Promise<void> {\n        if (this.terminateMessageLoop) {\n            return;\n        }\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\n            this.privConversationRequestSession.requestId,\n            CancellationReason.Error,\n            CancellationErrorCode.NoError,\n            \"Disconnecting\");\n\n        this.terminateMessageLoop = true;\n        return Promise.resolve();\n    }\n\n    protected async processTypeSpecificMessages(\n        connectionMessage: ConnectionMessage,\n        successCallback?: (e: any) => void,\n        errorCallBack?: (e: string) => void): Promise<boolean> {\n        return true;\n    }\n\n    // Cancels recognition.\n    protected cancelRecognition(\n        sessionId: string,\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        this.terminateMessageLoop = true;\n\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\n            cancellationReason,\n            error,\n            errorCode,\n            undefined,\n            sessionId);\n\n        try {\n            if (!!this.privConversationServiceConnector.canceled) {\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\n            }\n        } catch {\n            // continue on error\n        }\n    }\n\n    protected noOp = (): any => {\n        // operation not supported\n    }\n\n    /**\n     * Establishes a websocket connection to the end point.\n     * @param isUnAuthorized\n     */\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\n        this.privConnectionLoop = this.startMessageLoop();\n        return connection;\n    }\n\n    /**\n     * Process incoming websocket messages\n     */\n    private async receiveConversationMessageOverride(): Promise<void> {\n        if (this.isDisposed() || this.terminateMessageLoop) {\n            return Promise.resolve();\n        }\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\n\n        try {\n            const connection: IConnection = await this.fetchConnection();\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\n            if (this.isDisposed() || this.terminateMessageLoop) {\n                // We're done.\n                communicationCustodian.resolve();\n                return Promise.resolve();\n            }\n\n            if (!message) {\n                return this.receiveConversationMessageOverride();\n            }\n\n            const sessionId: string = this.privConversationRequestSession.sessionId;\n            let sendFinal: boolean = false;\n\n            try {\n                switch (message.conversationMessageType.toLowerCase()) {\n                    case \"info\":\n                    case \"participant_command\":\n                    case \"command\":\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\n                        switch (commandPayload.command.toLowerCase()) {\n\n                            /**\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\n                             * The consuming client must wait for this message to arrive\n                             * before starting to send their own data.\n                             */\n                            case \"participantlist\":\n\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\n\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse) => {\n                                    const participant: IInternalParticipant = {\n                                        avatar: p.avatar,\n                                        displayName: p.nickname,\n                                        id: p.participantId,\n                                        isHost: p.ishost,\n                                        isMuted: p.ismuted,\n                                        isUsingTts: p.usetts,\n                                        preferredLanguage: p.locale\n                                    };\n                                    return participant;\n                                });\n\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\n                                            participantsPayload.muteAll, participantsResult, sessionId));\n                                }\n                                break;\n\n                            /**\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\n                             * This is sent at the start of the Conversation\n                             */\n                            case \"settranslatetolanguages\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\n                             * If sent by the participant the setting will effect only their own profanity level.\n                             * If sent by the host, the setting will effect all participants including the host.\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\n                             */\n                            case \"setprofanityfiltering\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMute' is sent if the participant has been muted by the host.\n                             * Check the 'participantId' to determine if the current user has been muted.\n                             */\n                            case \"setmute\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setMute,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\n                             */\n                            case \"setmuteall\":\n\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\n                             */\n                            case \"roomexpirationwarning\":\n\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\n                             */\n                            case \"setusetts\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.setUseTTS,\n                                            commandPayload.value, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\n                             */\n                            case \"setlockstate\":\n\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'ChangeNickname' is received if a user changes their display name.\n                             * Any cached particpiants list should be updated to reflect the display name.\n                             */\n                            case \"changenickname\":\n\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\n                                            ConversationTranslatorCommandTypes.changeNickname,\n                                            commandPayload.nickname, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'JoinSession' is sent when a user joins the Conversation.\n                             */\n                            case \"joinsession\":\n\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\n\n                                const joiningParticipant: IInternalParticipant = {\n                                    avatar: joinParticipantPayload.avatar,\n                                    displayName: joinParticipantPayload.nickname,\n                                    id: joinParticipantPayload.participantId,\n                                    isHost: joinParticipantPayload.ishost,\n                                    isMuted: joinParticipantPayload.ismuted,\n                                    isUsingTts: joinParticipantPayload.usetts,\n                                    preferredLanguage: joinParticipantPayload.locale,\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(\n                                            joiningParticipant,\n                                            sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\n                             */\n                            case \"leavesession\":\n\n                                const leavingParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\n                                }\n\n                                break;\n\n                            /**\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\n                             */\n                            case \"disconnectsession\":\n\n                                const disconnectParticipant: IInternalParticipant = {\n                                    id: commandPayload.participantId\n                                };\n\n                                break;\n\n                            /**\n                             * Message not recognized.\n                             */\n                            default:\n                                break;\n                        }\n                        break;\n\n                    /**\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\n                     */\n                    case \"partial\":\n\n                    /**\n                     * 'final' (or 'phrase') represents a finalized speech message.\n                     */\n                    case \"final\":\n\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\n\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\n                            this.getTranslations(speechPayload.translations),\n                            speechPayload.language,\n                            undefined,\n                            undefined,\n                            speechPayload.recognition,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (speechPayload.isFinal) {\n                            // check the length, sometimes empty finals are returned\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\n                                sendFinal = true;\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\n                                // send final as normal. We had a non-empty partial for this same utterance\n                                // so sending the empty final is important\n                                sendFinal = true;\n                            } else {\n                                // suppress unneeded final\n                            }\n\n                            if (sendFinal) {\n                                if (!!this.privConversationServiceConnector.translationReceived) {\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\n                                }\n                            }\n                        } else if (speechResult.text !== undefined) {\n                            this.privLastPartialUtteranceId = speechPayload.id;\n                            if (!!this.privConversationServiceConnector.translationReceived) {\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\n                            }\n                        }\n\n                        break;\n\n                    /**\n                     * \"translated_message\" is a text message or instant message (IM).\n                     */\n                    case \"translated_message\":\n\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\n\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\n                            this.getTranslations(textPayload.translations),\n                            textPayload.language,\n                            undefined,\n                            undefined,\n                            textPayload.originalText,\n                            undefined,\n                            undefined,\n                            undefined,\n                            message.textBody,\n                            undefined);\n\n                        if (!!this.privConversationServiceConnector.translationReceived) {\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\n                        }\n                        break;\n\n                    default:\n                        // ignore any unsupported message types\n                        break;\n                }\n            } catch (e) {\n                // continue\n            }\n            return this.receiveConversationMessageOverride();\n        } catch (e) {\n            this.terminateMessageLoop = true;\n        }\n\n        return communicationCustodian.promise;\n    }\n\n    private async startMessageLoop(): Promise<void> {\n        if (this.isDisposed()) {\n            return Promise.resolve();\n        }\n        this.terminateMessageLoop = false;\n\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\n\n        try {\n            const r = await messageRetrievalPromise;\n            return r;\n        } catch (error) {\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\n            return null;\n        }\n    }\n\n    // Takes an established websocket connection to the endpoint\n    private configConnection(): Promise<IConnection> {\n        if (this.isDisposed()) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n        if (this.privConnectionConfigPromise) {\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigPromise = null;\n                    return this.configConnection();\n                }\n                return this.privConnectionConfigPromise;\n            }, (error: string): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigPromise = null;\n                return this.configConnection();\n            });\n        }\n        if (this.terminateMessageLoop) {\n            return Promise.resolve<IConnection>(undefined);\n        }\n\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): any => {\n            return connection;\n        });\n\n        return this.privConnectionConfigPromise;\n    }\n\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\n        let translations: Translations;\n\n        if (undefined !== serviceResultTranslations) {\n            translations = new Translations();\n            for (const translation of serviceResultTranslations) {\n                translations.set(translation.lang, translation.translation);\n            }\n        }\n\n        return translations;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    createNoDashGuid,\n    Deferred,\n    IDetachable,\n} from \"../../common/Exports\";\n\n/**\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\n * TODO: define what telemetry is required.\n */\nexport class ConversationRequestSession {\n    private privIsDisposed: boolean = false;\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\n    private privRequestId: string;\n    private privRequestCompletionDeferral: Deferred<void>;\n    private privSessionId: string;\n\n    constructor(sessionId: string) {\n        this.privSessionId = sessionId;\n        this.privRequestId = createNoDashGuid();\n        this.privRequestCompletionDeferral = new Deferred<void>();\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get completionPromise(): Promise<void> {\n        return this.privRequestCompletionDeferral.promise;\n    }\n\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.privSessionId = connectionId;\n    }\n\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.onComplete();\n        }\n    }\n\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            return;\n        } else if (statusCode === 403) {\n            this.onComplete();\n        }\n    }\n\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\n        if (!continuousRecognition) {\n            this.onComplete();\n        } else {\n            this.privRequestId = createNoDashGuid();\n        }\n    }\n\n    public async dispose(error?: string): Promise<void> {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n            for (const detachable of this.privDetachables) {\n                await detachable.detach();\n            }\n        }\n    }\n\n    private onComplete = (): void => {\n        //\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\nimport { SessionEventArgs } from \"../../sdk/Exports\";\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces\";\n\nexport class MuteAllEventArgs extends SessionEventArgs {\n    private privIsMuted: boolean;\n\n    public constructor(isMuted: boolean, sessionId?: string) {\n        super(sessionId);\n\n        this.privIsMuted = isMuted;\n    }\n\n    public get isMuted(): boolean {\n        return this.privIsMuted;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class LockRoomEventArgs extends SessionEventArgs {\n    private privIsLocked: boolean;\n\n    public constructor(isLocked: boolean, sessionId?: string) {\n        super(sessionId);\n\n        this.privIsLocked = isLocked;\n    }\n\n    public get isMuted(): boolean {\n        return this.privIsLocked;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ParticipantEventArgs extends SessionEventArgs {\n    private privParticipant: IInternalParticipant;\n\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\n        super(sessionId);\n        this.privParticipant = participant;\n    }\n\n    public get participant(): IInternalParticipant {\n        return this.privParticipant;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\n    private privValue: boolean | number | string | string[];\n    private privKey: string;\n    private privParticipantId: string;\n\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\n        super(sessionId);\n\n        this.privKey = key;\n        this.privValue = value;\n        this.privParticipantId = participantId;\n    }\n\n    public get value(): boolean | number | string |  string[] {\n        return this.privValue;\n    }\n\n    public get key(): string {\n        return this.privKey;\n    }\n    public get id(): string {\n        return this.privParticipantId;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ParticipantsListEventArgs extends SessionEventArgs {\n\n    private privRoomId: string;\n    private privSessionToken: string;\n    private privTranslateTo: string[];\n    private privProfanityFilter: string;\n    private privRoomProfanityFilter: string;\n    private privIsRoomLocked: boolean;\n    private privIsMuteAll: boolean;\n    private privParticipants: IInternalParticipant[];\n\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\n        super(sessionId);\n        this.privRoomId = conversationId;\n        this.privSessionToken = token;\n        this.privTranslateTo = translateTo;\n        this.privProfanityFilter = profanityFilter;\n        this.privRoomProfanityFilter = roomProfanityFilter;\n        this.privIsRoomLocked = isRoomLocked;\n        this.privIsRoomLocked = isMuteAll;\n        this.privParticipants = participants;\n    }\n    public get sessionToken(): string {\n        return this.privSessionToken;\n    }\n\n    public get conversationId(): string {\n        return this.privRoomId;\n    }\n\n    public get translateTo(): string[] {\n        return this.privTranslateTo;\n    }\n\n    public get profanityFilter(): string {\n        return this.privProfanityFilter;\n    }\n\n    public get roomProfanityFilter(): string {\n        return this.privRoomProfanityFilter;\n    }\n\n    public get isRoomLocked(): boolean {\n        return this.privIsRoomLocked;\n    }\n\n    public get isMuteAll(): boolean {\n        return this.privIsMuteAll;\n    }\n\n    public get participants(): IInternalParticipant[] {\n        return this.privParticipants;\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ConversationReceivedTranslationEventArgs {\n    private privPayload: any;\n    private privCommand: string;\n    private privSessionId: string;\n\n    public constructor(command: string, payload: any,  sessionId?: string) {\n        this.privPayload = payload;\n        this.privCommand = command;\n        this.privSessionId = sessionId;\n    }\n\n    public get payload(): any {\n        return this.privPayload;\n    }\n\n    public get command(): string {\n        return this.privCommand;\n    }\n\n    public get sessionId(): string {\n        return this.privSessionId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ConnectionEventArgs,\n    ConversationExpirationEventArgs,\n    ConversationTranslationCanceledEventArgs,\n    SessionEventArgs,\n    VoiceSignature,\n    } from \"../../sdk/Exports\";\n// import { ConversationClient } from \"./ConversationConnection\";\nimport {\n    ConversationReceivedTranslationEventArgs,\n    LockRoomEventArgs,\n    MuteAllEventArgs,\n    ParticipantAttributeEventArgs,\n    ParticipantEventArgs,\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\n\n/**\n * Internal conversation data\n */\nexport interface IInternalConversation {\n    // the token to use for connecting to the Speech Service\n    cognitiveSpeechAuthToken: string;\n    // the region to use for connecting to the Speech Service\n    cognitiveSpeechRegion: string;\n    // the unique id of the user who started or joined the Conversation\n    participantId: string;\n    // a descriptive name for the Conversation\n    name: string;\n    // a descriptive name for the Conversation\n    description: string;\n    // the speech model ID for custom speech\n    speechModel: string;\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\n    modalities: number;\n    // ?\n    isApproved: boolean;\n    // the mute flag has been set at conversation level and only the host can speak\n    isMuted: boolean;\n    // the 5 character conversation Id\n    roomId: string;\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\n    avatar: string;\n    // the token to use when calling the websocket\n    token: string;\n    // used for tracking the session and help with troubleshooting problems in the logs\n    correlationId: string;\n    // extracted from the headers\n    requestId: string;\n}\n\n/**\n * The user who is participating in the conversation.\n */\nexport interface IInternalParticipant {\n    avatar?: string;\n    displayName?: string;\n    id?: string;\n    isHost?: boolean;\n    isMuted?: boolean;\n    isUsingTts?: boolean;\n    preferredLanguage?: string;\n    voice?: string;\n}\n\n/** Users participating in the conversation */\nexport class InternalParticipants {\n\n    constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\n\n    }\n\n    /**\n     * Add or update a participant\n     * @param value\n     */\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\n        if (value === undefined) {\n            return;\n        }\n\n        const exists: number = this.getParticipantIndex(value.id);\n        if (exists > -1) {\n            this.participants.splice(exists, 1, value);\n        } else {\n            this.participants.push(value);\n        }\n\n        // ensure it was added ok\n        return this.getParticipant(value.id);\n    }\n\n    /**\n     * Find the participant's position in the participants list.\n     * @param id\n     */\n    public getParticipantIndex(id: string): number {\n        return this.participants.findIndex((p: IInternalParticipant) => p.id === id);\n    }\n\n    /**\n     * Find the participant by id.\n     * @param id\n     */\n    public getParticipant(id: string): IInternalParticipant {\n        return this.participants.find((p: IInternalParticipant) => p.id === id);\n    }\n\n    /***\n     * Remove a participant from the participants list.\n     */\n    public deleteParticipant(id: string): void {\n        this.participants = this.participants.filter((p: IInternalParticipant) => p.id !== id);\n    }\n\n    /***\n     * Helper to return the conversation host.\n     */\n    public get host(): IInternalParticipant {\n        return this.participants.find((p: IInternalParticipant) => p.isHost === true );\n    }\n\n    /**\n     * Helper to return the current user.\n     */\n    public get me(): IInternalParticipant {\n        return this.getParticipant(this.meId);\n    }\n}\n\n/**\n * Recognizer for handling Conversation Translator websocket messages\n */\nexport interface ConversationRecognizer {\n    isDisposed(): boolean;\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\n    cancelSpeech?: () => Promise<void>;\n    close?: () => Promise<void>;\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\n    connected?: (e: ConnectionEventArgs) => void;\n    disconnected?: (e: ConnectionEventArgs) => void;\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\n}\n\n/**\n * Error message returned from the Conversation Translator websocket\n */\nexport interface IConversationResponseErrorMessage {\n    code: string;\n    message: string;\n}\n\n/**\n * Error returned from the Conversation Translator websocket\n */\nexport interface IConversationResponseError {\n    error: IConversationResponseErrorMessage;\n}\n\n/**\n * Base message command\n */\nexport interface IClientMessage {\n    type: any;\n}\n\n/**\n * Command message\n */\nexport interface ICommandMessage extends IClientMessage {\n    command?: string;\n}\n\n/**\n * Text message command\n */\nexport interface IInstantMessageCommand extends ICommandMessage {\n    roomId: string;\n    nickname?: string;\n    participantId: string;\n    text: string;\n}\n\n/**\n * Lock command\n */\nexport interface ILockConversationCommand extends ICommandMessage {\n    id?: string; // incoming ws\n    nickname?: string; // incoming ws\n    participantId: string; // host - incoming ws\n    roomid: string;\n    value: boolean;\n}\n\n/**\n * Mute all command\n */\nexport interface IMuteAllCommand extends ICommandMessage {\n    roomid: string;\n    nickname?: string;  // incoming ws\n    participantId: string; // host\n    value: boolean;\n    id?: string; // incoming ws\n}\n\n/**\n * Mute participant command\n */\nexport interface IMuteCommand extends ICommandMessage {\n    roomid: string;\n    nickname?: string;\n    participantId: string; // participant\n    value: boolean;\n    id?: string; // incoming ws\n}\n\n/**\n * Remove participant command\n */\nexport interface IEjectParticipantCommand extends ICommandMessage {\n    roomid: string;\n    participantId: string; // participant\n}\n\n/**\n * Change nickname command\n */\nexport interface IChangeNicknameCommand extends ICommandMessage {\n    roomid: string;\n    participantId: string;\n    nickname: string;\n    value: string;\n}\n\n/**\n * List of command message types\n */\nexport const ConversationTranslatorMessageTypes = {\n    command: \"command\",\n    final: \"final\",\n    info: \"info\",\n    instantMessage: \"instant_message\",\n    partial: \"partial\",\n    participantCommand: \"participant_command\",\n    translatedMessage: \"translated_message\"\n};\n\n/**\n * List of command types\n */\nexport const ConversationTranslatorCommandTypes = {\n    changeNickname: \"ChangeNickname\",\n    disconnectSession: \"DisconnectSession\",\n    ejectParticipant: \"EjectParticipant\",\n    instant_message: \"instant_message\",\n    joinSession: \"JoinSession\",\n    leaveSession: \"LeaveSession\",\n    participantList: \"ParticipantList\",\n    roomExpirationWarning: \"RoomExpirationWarning\",\n    setLockState: \"SetLockState\",\n    setMute: \"SetMute\",\n    setMuteAll: \"SetMuteAll\",\n    setProfanityFiltering: \"SetProfanityFiltering\",\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\n    setUseTTS: \"SetUseTTS\"\n};\n\n/**\n * HTTP response helper\n */\nexport interface IResponse {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    data: string;\n    json: <T>() => T;\n    headers: string;\n}\n","export { CommandResponsePayload } from \"./CommandResponsePayload\";\nexport { IParticipantsListPayloadResponse, IParticipantPayloadResponse, ParticipantsListPayloadResponse, ParticipantPayloadResponse } from \"./ParticipantResponsePayload\";\nexport { ITranslationResponsePayload, SpeechResponsePayload, TextResponsePayload } from \"./TranslationResponsePayload\";\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the payload for incoming websocket commands\n */\nexport interface ICommandResponsePayload {\n    type: string;\n    command?: string;\n    id?: string; // incoming ws\n    nickname?: string; // incoming ws\n    participantId?: string;\n    roomid?: string;\n    value: boolean | number | string;\n}\n\nexport class CommandResponsePayload implements ICommandResponsePayload {\n    private privCommandResponse: ICommandResponsePayload;\n\n    public constructor(json: string) {\n        this.privCommandResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): CommandResponsePayload {\n        return new CommandResponsePayload(json);\n    }\n\n    public get type(): string {\n        return this.privCommandResponse.type;\n    }\n    public get command(): string {\n        return this.privCommandResponse.command;\n    }\n    public get id(): string {\n        return this.privCommandResponse.id;\n    }\n    public get nickname(): string {\n        return this.privCommandResponse.nickname;\n    }\n    public get participantId(): string {\n        return this.privCommandResponse.participantId;\n    }\n    public get roomid(): string {\n        return this.privCommandResponse.roomid;\n    }\n    public get value(): boolean | number | string {\n        return this.privCommandResponse.value;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the payload for incoming list of participants\n */\nexport interface IParticipantsListPayloadResponse {\n    roomid: string;\n    id: string;\n    command: string;\n    participants: IParticipantPayloadResponse[];\n    token: string;\n    translateTo: string[];\n    profanityFilter: string;\n    roomProfanityFilter: string;\n    roomLocked: boolean;\n    muteAll: boolean;\n    type: string;\n}\n\n/**\n * Defines the payload for incoming participant\n */\nexport interface IParticipantPayloadResponse {\n    nickname: string;\n    locale: string;\n    usetts: boolean;\n    ismuted: boolean;\n    ishost: boolean;\n    participantId: string;\n    avatar?: string;\n}\n\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\n\n    private constructor(json: string) {\n        this.privParticipantsPayloadResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\n        return new ParticipantsListPayloadResponse(json);\n    }\n\n    public get roomid(): string {\n        return this.privParticipantsPayloadResponse.roomid;\n    }\n\n    public get id(): string {\n        return this.privParticipantsPayloadResponse.id;\n    }\n\n    public get command(): string {\n        return this.privParticipantsPayloadResponse.command;\n    }\n\n    public get participants(): IParticipantPayloadResponse[] {\n        return this.privParticipantsPayloadResponse.participants;\n    }\n\n    public get token(): string {\n        return this.privParticipantsPayloadResponse.token;\n    }\n\n    public get translateTo(): string[] {\n        return this.privParticipantsPayloadResponse.translateTo;\n    }\n\n    public get profanityFilter(): string {\n        return this.privParticipantsPayloadResponse.profanityFilter;\n    }\n\n    public get roomProfanityFilter(): string {\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\n    }\n\n    public get roomLocked(): boolean {\n        return this.privParticipantsPayloadResponse.roomLocked;\n    }\n\n    public get muteAll(): boolean {\n        return this.privParticipantsPayloadResponse.muteAll;\n    }\n\n    public get type(): string {\n        return this.privParticipantsPayloadResponse.type;\n    }\n\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\n\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\n\n    private constructor(json: string) {\n        this.privParticipantPayloadResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): ParticipantPayloadResponse {\n        return new ParticipantPayloadResponse(json);\n    }\n\n    public get nickname(): string {\n        return this.privParticipantPayloadResponse.nickname;\n    }\n\n    public get locale(): string {\n        return this.privParticipantPayloadResponse.locale;\n    }\n\n    public get usetts(): boolean {\n        return this.privParticipantPayloadResponse.usetts;\n    }\n\n    public get ismuted(): boolean {\n        return this.privParticipantPayloadResponse.ismuted;\n    }\n\n    public get ishost(): boolean {\n        return this.privParticipantPayloadResponse.ishost;\n    }\n\n    public get participantId(): string {\n        return this.privParticipantPayloadResponse.participantId;\n    }\n\n    public get avatar(): string {\n        return this.privParticipantPayloadResponse.avatar;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n/**\n * Defines the payload for incoming translation messages\n */\nexport interface ITranslationResponsePayload {\n    lang: string;\n    translation: string;\n}\n\nexport interface ITranslationCommandMessage {\n    translations: ITranslationResponsePayload[];\n    id: string;\n    language: string;\n    nickname: string;\n    participantId: string;\n    roomid: string;\n    timestamp: string;\n    type: string;\n}\n\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\n    recognition: string;\n    isFinal: boolean;\n}\n\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\n    originalText: string;\n}\n\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\n\n    private privSpeechResponse: ISpeechResponsePayload;\n\n    private constructor(json: string) {\n        this.privSpeechResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SpeechResponsePayload {\n        return new SpeechResponsePayload(json);\n    }\n\n    public get recognition(): string {\n        return this.privSpeechResponse.recognition;\n    }\n\n    public get translations(): ITranslationResponsePayload[] {\n        return this.privSpeechResponse.translations;\n    }\n\n    public get id(): string {\n        return this.privSpeechResponse.id;\n    }\n\n    public get language(): string {\n        return this.privSpeechResponse.language;\n    }\n\n    public get nickname(): string {\n        return this.privSpeechResponse.nickname;\n    }\n\n    public get participantId(): string {\n        return this.privSpeechResponse.participantId;\n    }\n\n    public get roomid(): string {\n        return this.privSpeechResponse.roomid;\n    }\n\n    public get timestamp(): string {\n        return this.privSpeechResponse.timestamp;\n    }\n\n    public get type(): string {\n        return this.privSpeechResponse.type;\n    }\n\n    public get isFinal(): boolean {\n        return this.privSpeechResponse.type === \"final\";\n    }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class TextResponsePayload implements ITextResponsePayload {\n\n    private privTextResponse: ITextResponsePayload;\n\n    private constructor(json: string) {\n        this.privTextResponse = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): TextResponsePayload {\n        return new TextResponsePayload(json);\n    }\n\n    public get originalText(): string {\n        return this.privTextResponse.originalText;\n    }\n\n    public get translations(): ITranslationResponsePayload[] {\n        return this.privTextResponse.translations;\n    }\n\n    public get id(): string {\n        return this.privTextResponse.id;\n    }\n\n    public get language(): string {\n        return this.privTextResponse.language;\n    }\n\n    public get nickname(): string {\n        return this.privTextResponse.nickname;\n    }\n\n    public get participantId(): string {\n        return this.privTextResponse.participantId;\n    }\n\n    public get roomid(): string {\n        return this.privTextResponse.roomid;\n    }\n\n    public get timestamp(): string {\n        return this.privTextResponse.timestamp;\n    }\n\n    public get type(): string {\n        return this.privTextResponse.type;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\nimport { Contracts } from \"../../sdk/Contracts\";\nimport {\n    AudioConfig,\n    CancellationEventArgs,\n    Conversation,\n    ConversationInfo,\n    ConversationTranscriber,\n    PropertyCollection,\n    PropertyId,\n    Recognizer,\n    SessionEventArgs,\n    SpeechRecognitionEventArgs,\n    SpeechTranslationConfig,\n    SpeechTranslationConfigImpl,\n} from \"../../sdk/Exports\";\nimport {\n    IAuthentication,\n    IConnectionFactory,\n    RecognitionMode,\n    RecognizerConfig,\n    ServiceRecognizerBase,\n    SpeechServiceConfig,\n    TranscriberConnectionFactory,\n    TranscriptionServiceRecognizer,\n} from \"../Exports\";\n\nexport class TranscriberRecognizer extends Recognizer {\n    private privDisposedRecognizer: boolean;\n    private privConversation: Conversation;\n\n    /**\n     * TranscriberRecognizer constructor.\n     * @constructor\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\n     */\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\n\n        Contracts.throwIfNullOrWhitespace(\n            speechTranslationConfigImpl.speechRecognitionLanguage,\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\n\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\n        this.privDisposedRecognizer = false;\n    }\n\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\n\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\n\n    public getConversationInfo(): ConversationInfo {\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\n        return this.privConversation.conversationInfo;\n    }\n\n    public get authorizationToken(): string {\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\n    }\n\n    public set authorizationToken(token: string) {\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\n    }\n\n    public set conversation(c: Conversation) {\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\n        this.privConversation = c;\n    }\n\n    public get speechRecognitionLanguage(): string {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\n    }\n\n    public get properties(): PropertyCollection {\n        return this.privProperties;\n    }\n\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\n    }\n\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\n    }\n\n    public async close(): Promise<void> {\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\n        await this.dispose(true);\n    }\n\n    // Push async join/leave conversation message via serviceRecognizer\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\n        await reco.sendSpeechEventAsync(conversationInfo, command);\n    }\n\n    public connectCallbacks(transcriber: ConversationTranscriber): void {\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\n            if (!!transcriber.canceled) {\n                transcriber.canceled(transcriber, e);\n            }\n        };\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\n            if (!!transcriber.transcribing) {\n                transcriber.transcribing(transcriber, e);\n            }\n        };\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\n            if (!!transcriber.transcribed) {\n                transcriber.transcribed(transcriber, e);\n            }\n        };\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\n            if (!!transcriber.sessionStarted) {\n                transcriber.sessionStarted(transcriber, e);\n            }\n        };\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\n            if (!!transcriber.sessionStopped) {\n                transcriber.sessionStopped(transcriber, e);\n            }\n        };\n    }\n\n    public disconnectCallbacks(): void {\n        this.canceled = undefined;\n        this.recognizing = undefined;\n        this.recognized = undefined;\n        this.sessionStarted = undefined;\n        this.sessionStopped = undefined;\n    }\n\n    /**\n     * Disposes any resources held by the object.\n     * @member ConversationTranscriber.prototype.dispose\n     * @function\n     * @public\n     * @param {boolean} disposing - true if disposing the object.\n     */\n    protected async dispose(disposing: boolean): Promise<void> {\n        if (this.privDisposedRecognizer) {\n            return;\n        }\n\n        if (disposing) {\n            this.privDisposedRecognizer = true;\n            await this.implRecognizerStop();\n        }\n\n        await super.dispose(disposing);\n    }\n\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\n        return new RecognizerConfig(\n            speechConfig,\n            this.properties);\n    }\n\n    protected createServiceRecognizer(\n        authentication: IAuthentication,\n        connectionFactory: IConnectionFactory,\n        audioConfig: AudioConfig,\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nexport enum MetadataType {\n    WordBoundary = \"WordBoundary\",\n    Bookmark = \"Bookmark\",\n    Viseme = \"Viseme\"\n}\n\nexport interface ISynthesisMetadata {\n    Type: MetadataType;\n    Data: {\n        Offset: number;\n        text: {\n            Text: string;\n            Length: number;\n        };\n        Bookmark: string;\n        VisemeId: number;\n        AnimationChunk: string;\n        IsLastAnimation: boolean;\n    };\n}\n\n// audio.metadata\nexport interface ISynthesisAudioMetadata {\n    Metadata: ISynthesisMetadata[];\n}\n\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\n\n    private constructor(json: string) {\n        this.privSynthesisAudioMetadata = JSON.parse(json);\n    }\n\n    public static fromJSON(json: string): SynthesisAudioMetadata {\n        return new SynthesisAudioMetadata(json);\n    }\n\n    public get Metadata(): ISynthesisMetadata[] {\n        return this.privSynthesisAudioMetadata.Metadata;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    createNoDashGuid,\n    Deferred,\n    Events, IAudioDestination\n} from \"../common/Exports\";\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\nimport { ISynthesisMetadata } from \"./ServiceMessages/SynthesisAudioMetadata\";\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\nimport {\n    ConnectingToSynthesisServiceEvent,\n    SpeechSynthesisEvent,\n    SynthesisStartedEvent,\n    SynthesisTriggeredEvent,\n} from \"./SynthesisEvents\";\n\nexport interface ISynthesisResponseContext {\n    serviceTag: string;\n}\n\nexport interface ISynthesisResponseAudio {\n    type: string;\n    streamId: string;\n}\n\nexport interface ISynthesisResponse {\n    context: ISynthesisResponseContext;\n    audio: ISynthesisResponseAudio;\n}\n\nexport class SynthesisTurn {\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n\n    public get streamId(): string {\n        return this.privStreamId;\n    }\n\n    public set streamId(value: string) {\n        this.privStreamId = value;\n    }\n\n    public get audioOutputFormat(): AudioOutputFormatImpl {\n        return this.privAudioOutputFormat;\n    }\n\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\n        this.privAudioOutputFormat = format;\n    }\n\n    public get turnCompletionPromise(): Promise<void> {\n        return this.privTurnDeferral.promise;\n    }\n\n    public get isSynthesisEnded(): boolean {\n        return this.privIsSynthesisEnded;\n    }\n\n    public get isSynthesizing(): boolean {\n        return this.privIsSynthesizing;\n    }\n\n    public get currentTextOffset(): number {\n        return this.privTextOffset;\n    }\n\n    // The number of bytes received for current turn\n    public get bytesReceived(): number {\n        return this.privBytesReceived;\n    }\n\n    private privIsDisposed: boolean = false;\n    private privAuthFetchEventId: string;\n    private privIsSynthesizing: boolean = false;\n    private privIsSynthesisEnded: boolean = false;\n    private privBytesReceived: number = 0;\n    private privRequestId: string;\n    private privStreamId: string;\n    private privTurnDeferral: Deferred<void>;\n    private privInTurn: boolean = false;\n    private privAudioOutputFormat: AudioOutputFormatImpl;\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\n    private privReceivedAudio: ArrayBuffer;\n    private privReceivedAudioWithHeader: ArrayBuffer;\n    private privTextOffset: number = 0;\n    private privNextSearchTextIndex: number = 0;\n    private privPartialVisemeAnimation: string;\n    private privRawText: string;\n    private privIsSSML: boolean;\n    private privTurnAudioDestination: IAudioDestination;\n\n    constructor() {\n        this.privRequestId = createNoDashGuid();\n        this.privTurnDeferral = new Deferred<void>();\n\n        // We're not in a turn, so resolve.\n        this.privTurnDeferral.resolve();\n    }\n\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\n        if (!!this.privReceivedAudio) {\n            return Promise.resolve(this.privReceivedAudio);\n        }\n        if (!this.privIsSynthesisEnded) {\n            return null;\n        }\n        await this.readAllAudioFromStream();\n        return Promise.resolve(this.privReceivedAudio);\n    }\n\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\n        if (!!this.privReceivedAudioWithHeader) {\n            return this.privReceivedAudioWithHeader;\n        }\n        if (!this.privIsSynthesisEnded) {\n            return null;\n        }\n        if (this.audioOutputFormat.hasHeader) {\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\n            return this.privReceivedAudioWithHeader;\n        } else {\n            return this.getAllReceivedAudio();\n        }\n    }\n\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\n        this.privIsSynthesisEnded = false;\n        this.privIsSynthesizing = true;\n        this.privRequestId = requestId;\n        this.privRawText = rawText;\n        this.privIsSSML = isSSML;\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\n        this.privReceivedAudio = null;\n        this.privReceivedAudioWithHeader = null;\n        this.privBytesReceived = 0;\n        this.privTextOffset = 0;\n        this.privNextSearchTextIndex = 0;\n        this.privPartialVisemeAnimation = \"\";\n        if (audioDestination !== undefined) {\n            this.privTurnAudioDestination = audioDestination;\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\n        }\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\n    }\n\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\n        this.privAuthFetchEventId = authFetchEventId;\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\n    }\n\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\n        if (isError) {\n            this.onComplete();\n        }\n    }\n\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\n        if (statusCode === 200) {\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\n            this.privBytesReceived = 0;\n            return;\n        } else if (statusCode === 403) {\n            this.onComplete();\n        }\n    }\n\n    public onServiceResponseMessage = (responseJson: string): void => {\n        const response: ISynthesisResponse = JSON.parse(responseJson);\n        this.streamId = response.audio.streamId;\n    }\n\n    public onServiceTurnEndResponse = (): void => {\n        this.privInTurn = false;\n        this.privTurnDeferral.resolve();\n        this.onComplete();\n    }\n\n    public onServiceTurnStartResponse = (): void => {\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\n            // What? How are we starting a turn with another not done?\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\n            /* tslint:disable:no-empty */\n            this.privTurnDeferral.promise.then().catch(() => { });\n        }\n        this.privInTurn = true;\n        this.privTurnDeferral = new Deferred<void>();\n    }\n\n    public onAudioChunkReceived(data: ArrayBuffer): void {\n        if (this.isSynthesizing) {\n            this.privAudioOutputStream.write(data);\n            this.privBytesReceived += data.byteLength;\n            if (this.privTurnAudioDestination !== undefined) {\n                this.privTurnAudioDestination.write(data);\n            }\n        }\n    }\n\n    public onWordBoundaryEvent(text: string): void {\n        this.updateTextOffset(text);\n    }\n\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\n        if (metadata.Data.AnimationChunk !== undefined) {\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\n        }\n    }\n\n    public dispose = (error?: string): void => {\n        if (!this.privIsDisposed) {\n            // we should have completed by now. If we did not its an unknown error.\n            this.privIsDisposed = true;\n        }\n    }\n\n    public onStopSynthesizing(): void {\n        this.onComplete();\n    }\n\n    /**\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\n     * partial animation.\n     */\n    public getAndClearVisemeAnimation(): string {\n        const animation: string = this.privPartialVisemeAnimation;\n        this.privPartialVisemeAnimation = \"\";\n        return animation;\n    }\n\n    protected onEvent = (event: SpeechSynthesisEvent): void => {\n        Events.instance.onEvent(event);\n    }\n\n    private updateTextOffset(text: string): void {\n        if (this.privTextOffset >= 0) {\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\n            if (this.privTextOffset >= 0) {\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\n            }\n            if (this.privIsSSML) {\n                if (this.privRawText.indexOf(\"<\", this.privTextOffset + 1) > this.privRawText.indexOf(\">\", this.privTextOffset + 1)) {\n                    this.updateTextOffset(text);\n                }\n            }\n        }\n    }\n\n    private onComplete = (): void => {\n        if (this.privIsSynthesizing) {\n            this.privIsSynthesizing = false;\n            this.privIsSynthesisEnded = true;\n            this.privAudioOutputStream.close();\n            this.privInTurn = false;\n            if (this.privTurnAudioDestination !== undefined) {\n                this.privTurnAudioDestination.close();\n                this.privTurnAudioDestination = undefined;\n            }\n        }\n    }\n\n    private async readAllAudioFromStream(): Promise<void> {\n        if (this.privIsSynthesisEnded) {\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\n            try {\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\n            } catch (e) {\n                this.privReceivedAudio = new ArrayBuffer(0);\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IAudioDestination,\n    IConnection,\n    IDisposable,\n    MessageType,\n    ServiceEvent,\n} from \"../common/Exports\";\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport {\n    CancellationErrorCode,\n    CancellationReason,\n    PropertyCollection,\n    PropertyId,\n    ResultReason,\n    SpeechSynthesisBookmarkEventArgs,\n    SpeechSynthesisEventArgs,\n    SpeechSynthesisResult,\n    SpeechSynthesisVisemeEventArgs,\n    SpeechSynthesisWordBoundaryEventArgs,\n    SpeechSynthesizer,\n} from \"../sdk/Exports\";\nimport {\n    AgentConfig,\n    CancellationErrorCodePropertyName,\n    ISynthesisConnectionFactory,\n    MetadataType,\n    SynthesisAudioMetadata,\n    SynthesisContext,\n    SynthesisTurn,\n    SynthesizerConfig\n} from \"./Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\n\nexport class SynthesisAdapterBase implements IDisposable {\n    protected privSynthesisTurn: SynthesisTurn;\n    protected privConnectionId: string;\n    protected privSynthesizerConfig: SynthesizerConfig;\n    protected privSpeechSynthesizer: SpeechSynthesizer;\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\n    protected privErrorCallback: (e: string) => void;\n\n    public get synthesisContext(): SynthesisContext {\n        return this.privSynthesisContext;\n    }\n\n    public get agentConfig(): AgentConfig {\n        return this.privAgentConfig;\n    }\n\n    public get connectionEvents(): EventSource<ConnectionEvent> {\n        return this.privConnectionEvents;\n    }\n\n    public get serviceEvents(): EventSource<ServiceEvent> {\n        return this.privServiceEvents;\n    }\n\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\n\n    // Called when telemetry data is sent to the service.\n    // Used for testing Telemetry capture.\n    public static telemetryData: (json: string) => void;\n    public static telemetryDataEnabled: boolean = true;\n\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\n    public get activityTemplate(): string { return this.privActivityTemplate; }\n\n    protected receiveMessageOverride: () => any = undefined;\n\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\n\n    protected configConnectionOverride: (connection: IConnection) => any = undefined;\n\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\n        this.privAudioOutputFormat = format;\n        this.privSynthesisTurn.audioOutputFormat = format;\n        if (this.privSessionAudioDestination !== undefined) {\n            this.privSessionAudioDestination.format = format;\n        }\n        if (this.synthesisContext !== undefined) {\n            this.synthesisContext.audioOutputFormat = format;\n        }\n    }\n    private privAuthentication: IAuthentication;\n    private privConnectionFactory: ISynthesisConnectionFactory;\n\n    // A promise for a configured connection.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionConfigurationPromise: Promise<IConnection>;\n\n    // A promise for a connection, but one that has not had the speech context sent yet.\n    // Do not consume directly, call fetchConnection instead.\n    private privConnectionPromise: Promise<IConnection>;\n    private privAuthFetchEventId: string;\n    private privIsDisposed: boolean;\n    private privConnectionEvents: EventSource<ConnectionEvent>;\n    private privServiceEvents: EventSource<ServiceEvent>;\n    private privSynthesisContext: SynthesisContext;\n    private privAgentConfig: AgentConfig;\n    private privServiceHasSentMessage: boolean;\n    private privActivityTemplate: string;\n    private privAudioOutputFormat: AudioOutputFormatImpl;\n    private privSessionAudioDestination: IAudioDestination;\n\n    public constructor(\n        authentication: IAuthentication,\n        connectionFactory: ISynthesisConnectionFactory,\n        synthesizerConfig: SynthesizerConfig,\n        speechSynthesizer: SpeechSynthesizer,\n        audioDestination: IAudioDestination) {\n\n        if (!authentication) {\n            throw new ArgumentNullError(\"authentication\");\n        }\n\n        if (!connectionFactory) {\n            throw new ArgumentNullError(\"connectionFactory\");\n        }\n\n        if (!synthesizerConfig) {\n            throw new ArgumentNullError(\"synthesizerConfig\");\n        }\n\n        this.privAuthentication = authentication;\n        this.privConnectionFactory = connectionFactory;\n        this.privSynthesizerConfig = synthesizerConfig;\n        this.privIsDisposed = false;\n        this.privSpeechSynthesizer = speechSynthesizer;\n        this.privSessionAudioDestination = audioDestination;\n        this.privSynthesisTurn = new SynthesisTurn();\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\n        this.privServiceEvents = new EventSource<ServiceEvent>();\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\n        this.privAgentConfig = new AgentConfig();\n\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\n                if (connectionClosedEvent.statusCode !== 1000) {\n                    this.cancelSynthesisLocal(CancellationReason.Error,\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\n                }\n            }\n        });\n    }\n\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\n        if (!format.hasHeader) {\n            return audio;\n        }\n        format.updateHeader(audio.byteLength);\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\n        tmp.set(new Uint8Array(format.header), 0);\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\n        return tmp.buffer;\n    }\n\n    public isDisposed(): boolean {\n        return this.privIsDisposed;\n    }\n\n    public async dispose(reason?: string): Promise<void> {\n        this.privIsDisposed = true;\n        if (this.privSessionAudioDestination !== undefined) {\n            this.privSessionAudioDestination.close();\n        }\n        if (this.privConnectionConfigurationPromise) {\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\n            await connection.dispose(reason);\n        }\n    }\n\n    public async connect(): Promise<void> {\n        await this.connectImpl();\n    }\n\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\n\n        const connection: IConnection = await this.fetchConnection();\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\n    }\n\n    public async Speak(\n        text: string,\n        isSSML: boolean,\n        requestId: string,\n        successCallback: (e: SpeechSynthesisResult) => void,\n        errorCallBack: (e: string) => void,\n        audioDestination: IAudioDestination,\n    ): Promise<void> {\n\n        let ssml: string;\n\n        if (isSSML) {\n            ssml = text;\n        } else {\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\n        }\n\n        if (this.speakOverride !== undefined) {\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\n        }\n\n        this.privSuccessCallback = successCallback;\n        this.privErrorCallback = errorCallBack;\n\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\n\n        try {\n            await this.connectImpl();\n            const connection: IConnection = await this.fetchConnection();\n            await this.sendSynthesisContext(connection);\n            await this.sendSsmlMessage(connection, ssml, requestId);\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\n                new SpeechSynthesisResult(\n                    requestId,\n                    ResultReason.SynthesizingAudioStarted,\n                )\n            );\n\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\n            }\n\n            const messageRetrievalPromise = this.receiveMessage();\n        } catch (e) {\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\n            return Promise.reject(e);\n        }\n    }\n\n    // Cancels synthesis.\n    protected cancelSynthesis(\n        requestId: string,\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n        const properties: PropertyCollection = new PropertyCollection();\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\n            requestId,\n            ResultReason.Canceled,\n            undefined,\n            error,\n            properties\n        );\n\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\n            try {\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n\n        if (!!this.privSuccessCallback) {\n            try {\n                this.privSuccessCallback(result);\n                /* tslint:disable:no-empty */\n            } catch { }\n        }\n    }\n\n    // Cancels synthesis.\n    protected cancelSynthesisLocal(\n        cancellationReason: CancellationReason,\n        errorCode: CancellationErrorCode,\n        error: string): void {\n\n        if (!!this.privSynthesisTurn.isSynthesizing) {\n            this.privSynthesisTurn.onStopSynthesizing();\n\n            this.cancelSynthesis(\n                this.privSynthesisTurn.requestId,\n                cancellationReason,\n                errorCode,\n                error);\n        }\n    }\n\n    protected processTypeSpecificMessages(\n        connectionMessage: SpeechConnectionMessage,\n        successCallback?: (e: SpeechSynthesisResult) => void,\n        errorCallBack?: (e: string) => void): boolean {\n        return true;\n    }\n\n    protected async receiveMessage(): Promise<void> {\n        try {\n            const connection: IConnection = await this.fetchConnection();\n            const message: ConnectionMessage = await connection.read();\n\n            if (this.receiveMessageOverride !== undefined) {\n                return this.receiveMessageOverride();\n            }\n            if (this.privIsDisposed) {\n                // We're done.\n                return;\n            }\n\n            // indicates we are draining the queue and it came with no message;\n            if (!message) {\n                if (!this.privSynthesisTurn.isSynthesizing) {\n                    return;\n                } else {\n                    return this.receiveMessage();\n                }\n            }\n\n            this.privServiceHasSentMessage = true;\n\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\n\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\n                switch (connectionMessage.path.toLowerCase()) {\n                    case \"turn.start\":\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\n                        break;\n                    case \"response\":\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\n                        break;\n                    case \"audio\":\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\n                            && !!connectionMessage.binaryBody) {\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\n                                try {\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\n                                        new SpeechSynthesisResult(\n                                            this.privSynthesisTurn.requestId,\n                                            ResultReason.SynthesizingAudio,\n                                            audioWithHeader));\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\n                                } catch (error) {\n                                    // Not going to let errors in the event handler\n                                    // trip things up.\n                                }\n                            }\n                            if (this.privSessionAudioDestination !== undefined) {\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\n                            }\n                        }\n                        break;\n                    case \"audio.metadata\":\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\n                        for (const metadata of metadataList) {\n                            switch (metadata.Type) {\n                                case MetadataType.WordBoundary:\n                                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\n\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\n                                        metadata.Data.Offset,\n                                        metadata.Data.text.Text,\n                                        metadata.Data.text.Length,\n                                        this.privSynthesisTurn.currentTextOffset);\n\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\n                                        try {\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\n                                        } catch (error) {\n                                            // Not going to let errors in the event handler\n                                            // trip things up.\n                                        }\n                                    }\n                                    break;\n                                case MetadataType.Bookmark:\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\n                                        metadata.Data.Offset,\n                                        metadata.Data.Bookmark);\n\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\n                                        try {\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\n                                        } catch (error) {\n                                            // Not going to let errors in the event handler\n                                            // trip things up.\n                                        }\n                                    }\n                                    break;\n                                case MetadataType.Viseme:\n\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\n\n                                    if (metadata.Data.IsLastAnimation) {\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\n                                            metadata.Data.Offset,\n                                            metadata.Data.VisemeId,\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\n\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\n                                            try {\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\n                                            } catch (error) {\n                                                // Not going to let errors in the event handler\n                                                // trip things up.\n                                            }\n                                        }\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                    case \"turn.end\":\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\n                        let result: SpeechSynthesisResult;\n                        try {\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\n                            result = new SpeechSynthesisResult(\n                                this.privSynthesisTurn.requestId,\n                                ResultReason.SynthesizingAudioCompleted,\n                                audioBuffer\n                            );\n                            if (!!this.privSuccessCallback) {\n                                this.privSuccessCallback(result);\n                            }\n                        } catch (error) {\n                            if (!!this.privErrorCallback) {\n                                this.privErrorCallback(error);\n                            }\n                        }\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\n                            try {\n                                this.privSpeechSynthesizer.synthesisCompleted(\n                                    this.privSpeechSynthesizer,\n                                    new SpeechSynthesisEventArgs(result)\n                                );\n                            } catch (e) {\n                                // Not going to let errors in the event handler\n                                // trip things up.\n                            }\n                        }\n                        break;\n\n                    default:\n\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\n                            if (!!this.privServiceEvents) {\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\n                            }\n                        }\n\n                }\n            }\n\n            return this.receiveMessage();\n\n        } catch (e) {\n            // TODO: What goes here?\n        }\n    }\n\n    protected sendSynthesisContext = (connection: IConnection): Promise<void> => {\n        const synthesisContextJson = this.synthesisContext.toJSON();\n\n        if (synthesisContextJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"synthesis.context\",\n                this.privSynthesisTurn.requestId,\n                \"application/json\",\n                synthesisContextJson));\n        }\n        return;\n    }\n\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\n        if (this.privConnectionPromise) {\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionPromise = null;\n                    this.privServiceHasSentMessage = false;\n                    return this.connectImpl();\n                }\n                return this.privConnectionPromise;\n            }, (error: string): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionPromise = null;\n                this.privServiceHasSentMessage = false;\n                return this.connectImpl();\n            });\n        }\n        this.privAuthFetchEventId = createNoDashGuid();\n        this.privConnectionId = createNoDashGuid();\n\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\n\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\n\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\n            await this.privSynthesisTurn.onAuthCompleted(false);\n\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\n\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\n            // it'll stop sending events.\n            connection.events.attach((event: ConnectionEvent) => {\n                this.connectionEvents.onEvent(event);\n            });\n            const response = await connection.open();\n            if (response.statusCode === 200) {\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\n                return Promise.resolve(connection);\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\n                return this.connectImpl(true);\n            } else {\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\n            }\n        }, async (error: string): Promise<IConnection> => {\n            await this.privSynthesisTurn.onAuthCompleted(true, error);\n            throw new Error(error);\n        });\n\n        // Attach an empty handler to allow the promise to run in the background while\n        // other startup events happen. It'll eventually be awaited on.\n        this.privConnectionPromise.catch(() => { });\n\n        return this.privConnectionPromise;\n    }\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<void> => {\n        if (SpeechServiceConfigJson) {\n            return connection.send(new SpeechConnectionMessage(\n                MessageType.Text,\n                \"speech.config\",\n                this.privSynthesisTurn.requestId,\n                \"application/json\",\n                SpeechServiceConfigJson));\n        }\n    }\n\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<void> => {\n        return connection.send(new SpeechConnectionMessage(\n            MessageType.Text,\n            \"ssml\",\n            requestId,\n            \"application/ssml+xml\",\n            ssml));\n    }\n\n    private async fetchConnection(): Promise<IConnection> {\n        if (this.privConnectionConfigurationPromise) {\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\n                if (connection.state() === ConnectionState.Disconnected) {\n                    this.privConnectionId = null;\n                    this.privConnectionConfigurationPromise = null;\n                    this.privServiceHasSentMessage = false;\n                    return this.fetchConnection();\n                }\n                return this.privConnectionConfigurationPromise;\n            }, (error: string): Promise<IConnection> => {\n                this.privConnectionId = null;\n                this.privConnectionConfigurationPromise = null;\n                this.privServiceHasSentMessage = false;\n                return this.fetchConnection();\n            });\n        }\n        this.privConnectionConfigurationPromise = this.configureConnection();\n        return await this.privConnectionConfigurationPromise;\n    }\n\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\n    private async configureConnection(): Promise<IConnection> {\n        const connection: IConnection = await this.connectImpl();\n        if (this.configConnectionOverride !== undefined) {\n            return this.configConnectionOverride(connection);\n        }\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\n        return connection;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\n// tslint:disable:max-classes-per-file\n\nimport { EventType, PlatformEvent } from \"../common/Exports\";\n\nexport class SpeechSynthesisEvent extends PlatformEvent {\n    private privRequestId: string;\n\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\n        super(eventName, eventType);\n\n        this.privRequestId = requestId;\n    }\n\n    public get requestId(): string {\n        return this.privRequestId;\n    }\n}\n\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\n    private privSessionAudioDestinationId: string;\n    private privTurnAudioDestinationId: string;\n\n    constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\n        super(\"SynthesisTriggeredEvent\", requestId);\n\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\n    }\n\n    public get audioSessionDestinationId(): string {\n        return this.privSessionAudioDestinationId;\n    }\n\n    public get audioTurnDestinationId(): string {\n        return this.privTurnAudioDestinationId;\n    }\n}\n\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\n    private privAuthFetchEventId: string;\n\n    constructor(requestId: string, authFetchEventId: string) {\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\n        this.privAuthFetchEventId = authFetchEventId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n}\n\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\n    private privAuthFetchEventId: string;\n\n    constructor(requestId: string, authFetchEventId: string) {\n        super(\"SynthesisStartedEvent\", requestId);\n\n        this.privAuthFetchEventId = authFetchEventId;\n    }\n\n    public get authFetchEventId(): string {\n        return this.privAuthFetchEventId;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"../sdk/Exports\";\nimport {Context, SpeechServiceConfig} from \"./Exports\";\n\nexport enum SynthesisServiceType {\n    Standard,\n    Custom,\n}\n\nexport class SynthesizerConfig {\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\n    private privSpeechServiceConfig: SpeechServiceConfig;\n    private privParameters: PropertyCollection;\n\n    constructor(\n        speechServiceConfig: SpeechServiceConfig,\n        parameters: PropertyCollection) {\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\n        this.privParameters = parameters;\n    }\n\n    public get parameters(): PropertyCollection {\n        return this.privParameters;\n    }\n\n    public get synthesisServiceType(): SynthesisServiceType {\n        return this.privSynthesisServiceType;\n    }\n\n    public set synthesisServiceType(value: SynthesisServiceType) {\n        this.privSynthesisServiceType = value;\n    }\n\n    public get SpeechServiceConfig(): SpeechServiceConfig {\n        return this.privSpeechServiceConfig;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\nimport { SpeechSynthesizer } from \"../sdk/Exports\";\n\n/**\n * Represents the JSON used in the synthesis.context message sent to the speech service.\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\n */\nexport class SynthesisContext {\n    private privContext: { [section: string]: any } = {};\n    private privSpeechSynthesizer: SpeechSynthesizer;\n    private privAudioOutputFormat: AudioOutputFormatImpl;\n\n    constructor(speechSynthesizer: SpeechSynthesizer) {\n        this.privSpeechSynthesizer = speechSynthesizer;\n    }\n\n    /**\n     * Adds a section to the synthesis.context object.\n     * @param sectionName Name of the section to add.\n     * @param value JSON serializable object that represents the value.\n     */\n    public setSection(sectionName: string, value: any): void {\n        this.privContext[sectionName] = value;\n    }\n\n    /**\n     * Sets the audio output format for synthesis context generation.\n     * @param format {AudioOutputFormatImpl} the output format\n     */\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\n        this.privAudioOutputFormat = format;\n    }\n\n    public toJSON(): string {\n\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext();\n        this.setSection(\"synthesis\", synthesisSection);\n\n        return JSON.stringify(this.privContext);\n    }\n\n    private buildSynthesisContext(): ISynthesisSection {\n        return {\n            audio: {\n                metadataOptions: {\n                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),\n                    sentenceBoundaryEnabled: false,\n                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),\n                    wordBoundaryEnabled: (!!this.privSpeechSynthesizer.wordBoundary),\n                },\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\n            },\n            language: {\n                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage\n            }\n        };\n    }\n}\n\ninterface ISynthesisSection {\n    audio: {\n        outputFormat: string,\n        metadataOptions: {\n            bookmarkEnabled: boolean,\n            wordBoundaryEnabled: boolean,\n            visemeEnabled: boolean,\n            sentenceBoundaryEnabled: boolean,\n        }\n    };\n    language: {\n        autoDetection: boolean\n    };\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { PropertyCollection } from \"../sdk/Exports\";\nimport { Context } from \"./Exports\";\n\nexport class SpeakerRecognitionConfig {\n    private privParameters: PropertyCollection;\n    private privContext: Context;\n\n    constructor(\n        context: Context,\n        parameters: PropertyCollection) {\n        this.privContext = context ? context : new Context(null);\n        this.privParameters = parameters;\n    }\n\n    public get parameters(): PropertyCollection {\n        return this.privParameters;\n    }\n\n    public get Context(): Context {\n        return this.privContext;\n    }\n}\n","import {\n    IRequestOptions,\n    IRestResponse,\n    RestConfigBase,\n    RestMessageAdapter,\n    RestRequestType,\n} from \"../common.browser/Exports\";\nimport {\n    createNoDashGuid,\n    Deferred,\n    IAudioSource,\n    PromiseResult,\n} from \"../common/Exports\";\nimport {\n    PropertyId,\n    SpeakerIdentificationModel,\n    SpeakerVerificationModel,\n    VoiceProfile,\n    VoiceProfileType,\n} from \"../sdk/Exports\";\nimport { SpeakerRecognitionConfig } from \"./Exports\";\n\n/**\n * Implements methods for speaker recognition classes, sending requests to endpoint\n * and parsing response into expected format\n * @class SpeakerIdMessageAdapter\n */\nexport class SpeakerIdMessageAdapter {\n    private privRestAdapter: RestMessageAdapter;\n    private privUri: string;\n\n    public constructor(config: SpeakerRecognitionConfig) {\n\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\n        if (!endpoint) {\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\n            const hostSuffix: string = (region && region.toLowerCase().startsWith(\"china\")) ? \".azure.cn\" : \".microsoft.com\";\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"https://\" + region + \".api.cognitive\" + hostSuffix + \"/speaker/{mode}/v2.0/{dependency}\");\n            endpoint = host + \"/profiles\";\n        }\n        this.privUri = endpoint;\n\n        const options: IRequestOptions = RestConfigBase.requestOptions;\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\n\n        this.privRestAdapter = new RestMessageAdapter(options);\n    }\n\n    /**\n     * Sends create profile request to endpoint.\n     * @function\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\n     * @param {string} lang - language/locale of voice profile\n     * @public\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\n     */\n    public createProfile(profileType: VoiceProfileType, lang: string):\n        Promise<IRestResponse> {\n\n        const uri = this.getOperationUri(profileType);\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"application/json\");\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {}, { locale: lang });\n    }\n\n    /**\n     * Sends create enrollment request to endpoint.\n     * @function\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\n        Promise<IRestResponse> {\n\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\n        });\n    }\n\n    /**\n     * Sends verification request to endpoint.\n     * @function\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\n        Promise<IRestResponse> {\n\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \"/verify\";\n        try {\n            const result: Blob | Buffer = await audioSource.blob;\n            return this.privRestAdapter.request(RestRequestType.File, uri, { ignoreMinLength: \"true\" }, null, result);\n        } catch (e) {\n            return Promise.resolve({ data: e } as IRestResponse);\n        }\n    }\n\n    /**\n     * Sends identification request to endpoint.\n     * @function\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\n     */\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\n        Promise<IRestResponse> {\n\n        this.privRestAdapter.setHeaders(RestConfigBase.configParams.contentTypeKey, \"multipart/form-data\");\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \"/identifySingleSpeaker\";\n        try {\n            const result: Blob | Buffer = await audioSource.blob;\n            return this.privRestAdapter.request(RestRequestType.File, uri, { profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }, null, result);\n        } catch (e) {\n            return Promise.resolve({ data: e } as IRestResponse);\n        }\n    }\n\n    /**\n     * Sends profile status request to endpoint.\n     * @function\n     * @param {VoiceProfile} profile - voice profile to check.\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to status request\n     */\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\n\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n    }\n\n    /**\n     * Sends get all profiles request to endpoint.\n     * @function\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\n     * @public\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\n     */\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\n        const uri = this.getOperationUri(profileType);\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n    }\n\n    /**\n     * Sends get authorization phrases request to endpoint.\n     * @function\n     * @param {string} lang - language/locale of voice profile\n     * @public\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\n     */\n    public getAuthorizationPhrases(lang: string): Promise<IRestResponse> {\n        const uri = `${this.getOperationUri(VoiceProfileType.TextDependentVerification)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\n        return this.privRestAdapter.request(RestRequestType.Get, uri, {});\n    }\n\n    /**\n     * Sends delete profile request to endpoint.\n     * @function\n     * @param {VoiceProfile} profile - voice profile to delete.\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to deletion request\n     */\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\n\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, {});\n    }\n\n    /**\n     * Sends reset profile request to endpoint.\n     * @function\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\n     * @public\n     * @returns {Promise<IRestResponse>} rest response to reset request\n     */\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\n\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/reset\";\n        return this.privRestAdapter.request(RestRequestType.Post, uri, {});\n    }\n\n    private getOperationUri(profileType: VoiceProfileType): string {\n\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\n    }\n\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    connectivity,\n    ISpeechConfigAudioDevice,\n    type,\n} from \"../common.speech/Exports\";\nimport {\n    AudioSourceErrorEvent,\n    AudioSourceEvent,\n    AudioSourceInitializingEvent,\n    AudioSourceOffEvent,\n    AudioSourceReadyEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ChunkedArrayBufferStream,\n    createNoDashGuid,\n    Deferred,\n    Events,\n    EventSource,\n    IAudioSource,\n    IAudioStreamNode,\n    IStreamChunk,\n    IStringDictionary,\n    Stream,\n} from \"../common/Exports\";\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\n\nexport class FileAudioSource implements IAudioSource {\n\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\n\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\n\n    private privId: string;\n\n    private privEvents: EventSource<AudioSourceEvent>;\n\n    private privSource: Blob | Buffer;\n\n    private privFilename: string;\n\n    private privHeaderEnd: number = 44;\n\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\n        this.privEvents = new EventSource<AudioSourceEvent>();\n        this.privSource = file;\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\n            this.privFilename = (file as File).name;\n        } else {\n            this.privFilename = filename || \"unknown.wav\";\n        }\n\n        // Read the header.\n        this.privAudioFormatPromise = this.readHeader();\n    }\n\n    public get format(): Promise<AudioStreamFormatImpl> {\n        return this.privAudioFormatPromise;\n    }\n\n    public get blob(): Promise<Blob | Buffer> {\n        return Promise.resolve(this.privSource);\n    }\n\n    public turnOn = (): Promise<void> => {\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\n            return Promise.reject(errorMsg);\n        }\n\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\n        return;\n    }\n\n    public id = (): string => {\n        return this.privId;\n    }\n\n    public attach = async (audioNodeId: string): Promise<IAudioStreamNode> => {\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\n\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\n\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\n        return Promise.resolve({\n            detach: async (): Promise<void> => {\n                stream.readEnded();\n                delete this.privStreams[audioNodeId];\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n                await this.turnOff();\n            },\n            id: () => {\n                return audioNodeId;\n            },\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\n                return stream.read();\n            },\n        });\n    }\n\n    public detach = (audioNodeId: string): void => {\n        if (audioNodeId && this.privStreams[audioNodeId]) {\n            this.privStreams[audioNodeId].close();\n            delete this.privStreams[audioNodeId];\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\n        }\n    }\n\n    public turnOff = (): Promise<void> => {\n        for (const streamId in this.privStreams) {\n            if (streamId) {\n                const stream = this.privStreams[streamId];\n                if (stream && !stream.isClosed) {\n                    stream.close();\n                }\n            }\n        }\n\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\n        return Promise.resolve();\n    }\n\n    public get events(): EventSource<AudioSourceEvent> {\n        return this.privEvents;\n    }\n\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl) => {\n            return Promise.resolve({\n                bitspersample: result.bitsPerSample,\n                channelcount: result.channels,\n                connectivity: connectivity.Unknown,\n                manufacturer: \"Speech SDK\",\n                model: \"File\",\n                samplerate: result.samplesPerSec,\n                type: type.File,\n            });\n        });\n    }\n\n    private readHeader(): Promise<AudioStreamFormatImpl> {\n        // Read the wave header.\n        const maxHeaderSize: number = 512;\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\n\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\n\n        const processHeader = (header: ArrayBuffer): void => {\n            const view: DataView = new DataView(header);\n\n            const getWord = (index: number): string => {\n                return String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\n            };\n\n            // RIFF 4 bytes.\n            if (\"RIFF\" !== getWord(0)) {\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\n                return;\n            }\n\n            // length, 4 bytes\n            // RIFF Type & fmt 8 bytes\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\n                return;\n            }\n\n            const formatSize: number = view.getInt32(16, true);\n            const channelCount: number = view.getUint16(22, true);\n            const sampleRate: number = view.getUint32(24, true);\n            const bitsPerSample: number = view.getUint16(34, true);\n            // Confirm if header is 44 bytes long.\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\n            for (; getWord(pos) !== \"data\"; pos += 2) {\n                if (pos > maxHeaderSize - 8) {\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\n                    return;\n                }\n            }\n            this.privHeaderEnd = pos + 8;\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\n        };\n\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\n            const reader: FileReader = new FileReader();\n\n            reader.onload = (event: Event) => {\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\n                processHeader(header);\n            };\n\n            reader.readAsArrayBuffer(header);\n        } else {\n            const h: Buffer = header as Buffer;\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\n        }\n        return headerResult.promise;\n    }\n\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\n        const onerror = (error: string) => {\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\n            throw new Error(errorMsg);\n        };\n\n        try {\n            await this.turnOn();\n\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\n\n            this.privStreams[audioNodeId] = stream;\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\n\n            const processFile = (buff: ArrayBuffer): void => {\n                if (stream.isClosed) {\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\n                }\n\n                stream.writeStreamChunk({\n                    buffer: buff,\n                    isEnd: false,\n                    timeReceived: Date.now(),\n                });\n                stream.close();\n            };\n\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\n                const reader: FileReader = new FileReader();\n                reader.onerror = (ev: ProgressEvent<FileReader>) => { onerror(ev.toString()); };\n\n                reader.onload = (event: Event) => {\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\n                    processFile(fileBuffer);\n                };\n\n                reader.readAsArrayBuffer(chunk);\n            } else {\n                const c: Buffer = chunk as Buffer;\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\n            }\n\n            return stream;\n        } catch (e) {\n            onerror(e);\n        }\n    }\n\n    private onEvent = (event: AudioSourceEvent): void => {\n        this.privEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\nimport { IRecorder } from \"./IRecorder\";\n\nexport class PcmRecorder implements IRecorder {\n    private privMediaResources: IMediaResources;\n    private privSpeechProcessorScript: string; // speech-processor.js Url\n\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\n        const desiredSampleRate = 16000;\n\n        const scriptNode = (() => {\n            let bufferSize = 0;\n            try {\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            } catch (error) {\n                // Webkit (<= version 31) requires a valid bufferSize.\n                bufferSize = 2048;\n                let audioSampleRate = context.sampleRate;\n                while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\n                    bufferSize <<= 1;\n                    audioSampleRate >>= 1;\n                }\n                return context.createScriptProcessor(bufferSize, 1, 1);\n            }\n        })();\n\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\n        let needHeader: boolean = true;\n        const that = this;\n        scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\n            const inputFrame = event.inputBuffer.getChannelData(0);\n\n            if (outputStream && !outputStream.isClosed) {\n                const waveFrame = waveStreamEncoder.encode(inputFrame);\n                if (!!waveFrame) {\n                    outputStream.writeStreamChunk({\n                        buffer: waveFrame,\n                        isEnd: false,\n                        timeReceived: Date.now(),\n                    });\n                    needHeader = false;\n                }\n            }\n        };\n\n        const micInput = context.createMediaStreamSource(mediaStream);\n\n        // https://webaudio.github.io/web-audio-api/#audioworklet\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\n\n        if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\n            context.audioWorklet\n                .addModule(this.privSpeechProcessorScript)\n                .then(() => {\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\n                    workletNode.port.onmessage = (ev: MessageEvent) => {\n                        const inputFrame: Float32Array = ev.data as Float32Array;\n\n                        if (outputStream && !outputStream.isClosed) {\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\n                            if (!!waveFrame) {\n                                outputStream.writeStreamChunk({\n                                    buffer: waveFrame,\n                                    isEnd: false,\n                                    timeReceived: Date.now(),\n                                });\n                                needHeader = false;\n                            }\n                        }\n                    };\n                    micInput.connect(workletNode);\n                    workletNode.connect(context.destination);\n                    this.privMediaResources = {\n                        scriptProcessorNode: workletNode,\n                        source: micInput,\n                        stream: mediaStream,\n                    };\n                })\n                .catch(() => {\n                    micInput.connect(scriptNode);\n                    scriptNode.connect(context.destination);\n                    this.privMediaResources = {\n                        scriptProcessorNode: scriptNode,\n                        source: micInput,\n                        stream: mediaStream,\n                    };\n                });\n        } else {\n            micInput.connect(scriptNode);\n            scriptNode.connect(context.destination);\n            this.privMediaResources = {\n                scriptProcessorNode: scriptNode,\n                source: micInput,\n                stream: mediaStream,\n            };\n        }\n    }\n\n    public releaseMediaResources = (context: AudioContext): void => {\n        if (this.privMediaResources) {\n            if (this.privMediaResources.scriptProcessorNode) {\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\n                this.privMediaResources.scriptProcessorNode = null;\n            }\n            if (this.privMediaResources.source) {\n                this.privMediaResources.source.disconnect();\n                this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\n                this.privMediaResources.source = null;\n            }\n        }\n    }\n\n    public setWorkletUrl(url: string): void {\n        this.privSpeechProcessorScript = url;\n    }\n}\n\ninterface IMediaResources {\n    source: MediaStreamAudioSourceNode;\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\n    stream: MediaStream;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionOpenResponse,\n    ConnectionState,\n    createNoDashGuid,\n    EventSource,\n    IConnection,\n    IStringDictionary,\n    IWebsocketMessageFormatter,\n} from \"../common/Exports\";\nimport { ProxyInfo } from \"./ProxyInfo\";\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\n\nexport class WebsocketConnection implements IConnection {\n\n    private privUri: string;\n    private privMessageFormatter: IWebsocketMessageFormatter;\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\n    private privId: string;\n    private privIsDisposed: boolean = false;\n\n    public constructor(\n        uri: string,\n        queryParameters: IStringDictionary<string>,\n        headers: IStringDictionary<string>,\n        messageFormatter: IWebsocketMessageFormatter,\n        proxyInfo: ProxyInfo,\n        enableCompression: boolean = false,\n        connectionId?: string) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.privMessageFormatter = messageFormatter;\n\n        let queryParams = \"\";\n        let i = 0;\n\n        if (queryParameters) {\n            for (const paramName in queryParameters) {\n                if (paramName) {\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\n                    const val = encodeURIComponent(queryParameters[paramName]);\n                    queryParams += `${paramName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        if (headers) {\n            for (const headerName in headers) {\n                if (headerName) {\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\n                    const val = encodeURIComponent(headers[headerName]);\n                    queryParams += `${headerName}=${val}`;\n                    i++;\n                }\n            }\n        }\n\n        this.privUri = uri + queryParams;\n        this.privId = connectionId ? connectionId : createNoDashGuid();\n\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\n            this.privUri,\n            this.id,\n            this.privMessageFormatter,\n            proxyInfo,\n            headers,\n            enableCompression);\n    }\n\n    public async dispose(): Promise<void> {\n        this.privIsDisposed = true;\n\n        if (this.privConnectionMessageAdapter) {\n            await this.privConnectionMessageAdapter.close();\n        }\n    }\n\n    public isDisposed = (): boolean => {\n        return this.privIsDisposed;\n    }\n\n    public get id(): string {\n        return this.privId;\n    }\n\n    public state = (): ConnectionState => {\n        return this.privConnectionMessageAdapter.state;\n    }\n\n    public open = (): Promise<ConnectionOpenResponse> => {\n        return this.privConnectionMessageAdapter.open();\n    }\n\n    public send = (message: ConnectionMessage): Promise<void> => {\n        return this.privConnectionMessageAdapter.send(message);\n    }\n\n    public read = (): Promise<ConnectionMessage> => {\n        return this.privConnectionMessageAdapter.read();\n    }\n\n    public get events(): EventSource<ConnectionEvent> {\n        return this.privConnectionMessageAdapter.events;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\nimport {\n    ArgumentNullError,\n    BackgroundEvent,\n    ConnectionClosedEvent,\n    ConnectionErrorEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    ConnectionOpenResponse,\n    ConnectionStartEvent,\n    ConnectionState,\n    Deferred,\n    Events,\n    EventSource,\n    IWebsocketMessageFormatter,\n    MessageType,\n    Queue,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\nimport { ProxyInfo } from \"./ProxyInfo\";\n\n// Node.JS specific web socket / browser support.\nimport ws from \"ws\";\nimport { CertCheckAgent } from \"./CertChecks\";\n\ninterface ISendItem {\n    Message: ConnectionMessage;\n    RawWebsocketMessage: RawWebsocketMessage;\n    sendStatusDeferral: Deferred<void>;\n}\n\nexport class WebsocketMessageAdapter {\n    private privConnectionState: ConnectionState;\n    private privMessageFormatter: IWebsocketMessageFormatter;\n    private privWebsocketClient: WebSocket | ws;\n\n    private privSendMessageQueue: Queue<ISendItem>;\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\n    private privCertificateValidatedDeferral: Deferred<void>;\n    private privDisconnectDeferral: Deferred<void>;\n    private privConnectionEvents: EventSource<ConnectionEvent>;\n    private privConnectionId: string;\n    private privUri: string;\n    private proxyInfo: ProxyInfo;\n    private privHeaders: { [key: string]: string; };\n    private privLastErrorReceived: string;\n    private privEnableCompression: boolean;\n\n    public static forceNpmWebSocket: boolean = false;\n\n    public constructor(\n        uri: string,\n        connectionId: string,\n        messageFormatter: IWebsocketMessageFormatter,\n        proxyInfo: ProxyInfo,\n        headers: { [key: string]: string; },\n        enableCompression: boolean) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.proxyInfo = proxyInfo;\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\n        this.privConnectionId = connectionId;\n        this.privMessageFormatter = messageFormatter;\n        this.privConnectionState = ConnectionState.None;\n        this.privUri = uri;\n        this.privHeaders = headers;\n        this.privEnableCompression = enableCompression;\n\n        // Add the connection ID to the headers\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\n\n        this.privLastErrorReceived = \"\";\n    }\n\n    public get state(): ConnectionState {\n        return this.privConnectionState;\n    }\n\n    public open = (): Promise<ConnectionOpenResponse> => {\n        if (this.privConnectionState === ConnectionState.Disconnected) {\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\n        }\n\n        if (this.privConnectionEstablishDeferral) {\n            return this.privConnectionEstablishDeferral.promise;\n        }\n\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\n        this.privCertificateValidatedDeferral = new Deferred<void>();\n\n        this.privConnectionState = ConnectionState.Connecting;\n\n        try {\n\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\n                // Browser handles cert checks.\n                this.privCertificateValidatedDeferral.resolve();\n\n                this.privWebsocketClient = new WebSocket(this.privUri);\n            } else {\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\n                // The ocsp library will handle validation for us and fail the connection if needed.\n                this.privCertificateValidatedDeferral.resolve();\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\n\n                options.agent = checkAgent.GetAgent();\n                this.privWebsocketClient = new ws(this.privUri, options);\n            }\n\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\n            this.privDisconnectDeferral = new Deferred<void>();\n            this.privSendMessageQueue = new Queue<ISendItem>();\n            this.processSendQueue().catch((reason: string): void => {\n                Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n        } catch (error) {\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\n            return this.privConnectionEstablishDeferral.promise;\n        }\n\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\n\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\n            this.privCertificateValidatedDeferral.promise.then((): void => {\n                this.privConnectionState = ConnectionState.Connected;\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\n            }, (error: string): void => {\n                this.privConnectionEstablishDeferral.reject(error);\n            });\n        };\n\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\n            this.privLastErrorReceived = e.message;\n        };\n\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\n            if (this.privConnectionState === ConnectionState.Connecting) {\n                this.privConnectionState = ConnectionState.Disconnected;\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\n            } else {\n                this.privConnectionState = ConnectionState.Disconnected;\n                this.privWebsocketClient = null;\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\n            }\n\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\n                Events.instance.onEvent(new BackgroundEvent(reason));\n            });\n        };\n\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\n            const networkReceivedTime = new Date().toISOString();\n            if (this.privConnectionState === ConnectionState.Connected) {\n                const deferred = new Deferred<ConnectionMessage>();\n                // let id = ++this.idCounter;\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\n                if (e.data instanceof ArrayBuffer) {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\n                    this.privMessageFormatter\n                        .toConnectionMessage(rawMessage)\n                        .then((connectionMessage: ConnectionMessage) => {\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n                            deferred.resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\n                        });\n                } else {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n                    this.privMessageFormatter\n                        .toConnectionMessage(rawMessage)\n                        .then((connectionMessage: ConnectionMessage) => {\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\n                            deferred.resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\n                        });\n                }\n            }\n        };\n\n        return this.privConnectionEstablishDeferral.promise;\n    }\n\n    public send = (message: ConnectionMessage): Promise<void> => {\n        if (this.privConnectionState !== ConnectionState.Connected) {\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\n        }\n\n        const messageSendStatusDeferral = new Deferred<void>();\n        const messageSendDeferral = new Deferred<ISendItem>();\n\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\n\n        this.privMessageFormatter\n            .fromConnectionMessage(message)\n            .then((rawMessage: RawWebsocketMessage) => {\n                messageSendDeferral.resolve({\n                    Message: message,\n                    RawWebsocketMessage: rawMessage,\n                    sendStatusDeferral: messageSendStatusDeferral,\n                });\n            }, (error: string) => {\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\n            });\n\n        return messageSendStatusDeferral.promise;\n    }\n\n    public read = (): Promise<ConnectionMessage> => {\n        if (this.privConnectionState !== ConnectionState.Connected) {\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\n        }\n\n        return this.privReceivingMessageQueue.dequeue();\n    }\n\n    public close = (reason?: string): Promise<void> => {\n        if (this.privWebsocketClient) {\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n            }\n        } else {\n            return Promise.resolve();\n        }\n\n        return this.privDisconnectDeferral.promise;\n    }\n\n    public get events(): EventSource<ConnectionEvent> {\n        return this.privConnectionEvents;\n    }\n\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\n        try {\n            // indicates we are draining the queue and it came with no message;\n            if (!sendItem) {\n                return Promise.resolve();\n            }\n\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\n\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\n            if (this.isWebsocketOpen) {\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\n            } else {\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\n            }\n            return Promise.resolve();\n\n        } catch (e) {\n            return Promise.reject(`websocket send error: ${e}`);\n        }\n    }\n\n    private async onClose(code: number, reason: string): Promise<void> {\n        const closeReason = `Connection closed. ${code}: ${reason}`;\n        this.privConnectionState = ConnectionState.Disconnected;\n        this.privDisconnectDeferral.resolve();\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\n            // TODO: Events for these ?\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n        }, closeReason);\n\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\n        }, closeReason);\n    }\n\n    private async processSendQueue(): Promise<void> {\n        while (true) {\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\n            const sendItem: ISendItem = await itemToSend;\n            // indicates we are draining the queue and it came with no message;\n            if (!sendItem) {\n                return;\n            }\n\n            try {\n                await this.sendRawMessage(sendItem);\n                sendItem.sendStatusDeferral.resolve();\n            } catch (sendError) {\n                sendItem.sendStatusDeferral.reject(sendError);\n            }\n        }\n    }\n\n    private onEvent = (event: ConnectionEvent): void => {\n        this.privConnectionEvents.onEvent(event);\n        Events.instance.onEvent(event);\n    }\n\n    private get isWebsocketOpen(): boolean {\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\n    }\n\n}\n","/* (ignored) */","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport * as http from \"http\";\nimport * as tls from \"tls\";\nimport * as parse from \"url-parse\";\nimport * as ocsp from \"../../external/ocsp/ocsp\";\nimport {\n    Events,\n    OCSPCacheEntryExpiredEvent,\n    OCSPCacheEntryNeedsRefreshEvent,\n    OCSPCacheFetchErrorEvent,\n    OCSPCacheHitEvent,\n    OCSPCacheMissEvent,\n    OCSPCacheUpdatehCompleteEvent,\n    OCSPCacheUpdateNeededEvent,\n    OCSPDiskCacheHitEvent,\n    OCSPDiskCacheStoreEvent,\n    OCSPEvent,\n    OCSPMemoryCacheHitEvent,\n    OCSPMemoryCacheStoreEvent,\n    OCSPResponseRetrievedEvent,\n    OCSPStapleReceivedEvent,\n    OCSPVerificationFailedEvent,\n} from \"../common/Exports\";\nimport { IStringDictionary } from \"../common/IDictionary\";\nimport { ProxyInfo } from \"./ProxyInfo\";\n\nimport Agent from \"agent-base\";\n\n// @ts-ignore\nimport Cache from \"async-disk-cache\";\nimport HttpsProxyAgent from \"https-proxy-agent\";\nimport * as net from \"net\";\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\n\nexport class CertCheckAgent {\n\n    // Test hook to enable forcing expiration / refresh to happen.\n    public static testTimeOffset: number = 0;\n\n    // Test hook to disable stapling for cache testing.\n    public static forceDisableOCSPStapling: boolean = false;\n\n    // An in memory cache for recived responses.\n    private static privMemCache: IStringDictionary<Buffer> = {};\n\n    // The on disk cache.\n    private static privDiskCache: Cache;\n\n    private privProxyInfo: ProxyInfo;\n\n    constructor(proxyInfo?: ProxyInfo) {\n        if (!!proxyInfo) {\n            this.privProxyInfo = proxyInfo;\n        }\n\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\n        if (!CertCheckAgent.privDiskCache) {\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\n        }\n    }\n\n    // Test hook to force the disk cache to be recreated.\n    public static forceReinitDiskCache(): void {\n        CertCheckAgent.privDiskCache = undefined;\n        CertCheckAgent.privMemCache = {};\n    }\n\n    public GetAgent(disableStapling?: boolean): http.Agent {\n        const agent: any = new Agent.Agent(this.CreateConnection);\n\n        if (this.privProxyInfo !== undefined &&\n            this.privProxyInfo.HostName !== undefined &&\n            this.privProxyInfo.Port > 0) {\n            const proxyName: string = \"privProxyInfo\";\n            agent[proxyName] = this.privProxyInfo;\n        }\n\n        return agent;\n    }\n\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\n            host: proxyInfo.HostName,\n            port: proxyInfo.Port,\n        };\n\n        if (!!proxyInfo.UserName) {\n            httpProxyOptions.headers = {\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\n            };\n        } else {\n            httpProxyOptions.headers = {};\n        }\n\n        httpProxyOptions.headers.requestOCSP = \"true\";\n\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\n        return httpProxyAgent;\n    }\n\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\n        let ocspRequest: ocsp.Request;\n        let stapling: Buffer;\n        let resolved: boolean = false;\n\n        const socket: net.Socket = await socketPromise;\n        socket.cork();\n\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\n\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\n                if (!!data) {\n                    this.onEvent(new OCSPStapleReceivedEvent());\n                    stapling = data;\n                }\n            });\n\n            socket.on(\"error\", (error: Error) => {\n                if (!resolved) {\n                    resolved = true;\n                    socket.destroy();\n                    reject(error);\n                }\n            });\n\n            tlsSocket.on(\"secure\", async () => {\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\n                try {\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\n\n                    // We always need a request to verify the response.\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\n\n                    // Do we have a result for this certificate in our memory cache?\n                    const sig: string = ocspRequest.id.toString(\"hex\");\n\n                    // Stapled response trumps cached response.\n                    if (!stapling) {\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\n                        stapling = cacheEntry;\n                    }\n\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\n\n                    socket.uncork();\n                    resolved = true;\n                    resolve(socket);\n                } catch (e) {\n                    socket.destroy();\n                    resolved = true;\n                    reject(e);\n                }\n            });\n        });\n    }\n\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\n        if (peer.issuerCertificate) {\n            return Promise.resolve(peer.issuerCertificate);\n        }\n\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\n                if (!!error) {\n                    reject(error);\n                    return;\n                }\n\n                resolve(value);\n            });\n        });\n    }\n\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\n\n        if (!!cachedResponse) {\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\n        }\n\n        // Do we have a result for this certificate on disk in %TMP%?\n        if (!cachedResponse) {\n            try {\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\n                if (!!diskCacheResponse.isCached) {\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\n                    cachedResponse = diskCacheResponse.value;\n                }\n            } catch (error) {\n                cachedResponse = null;\n            }\n        }\n\n        if (!cachedResponse) {\n            return cachedResponse;\n        }\n\n        try {\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\n            if (tbsData.responses.length < 1) {\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\n                return;\n            }\n\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\n\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\n                // Cached entry has expired.\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\n                cachedResponse = null;\n            } else {\n                // If we're within one day of the next update, or 50% of the way through the validity period,\n                // background an update to the cache.\n\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\n\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\n                        // Well, not much we can do here.\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\n                    });\n                } else {\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\n                }\n            }\n        } catch (error) {\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\n            cachedResponse = null;\n        }\n        if (!cachedResponse) {\n            this.onEvent(new OCSPCacheMissEvent(signature));\n        }\n        return cachedResponse;\n    }\n\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\n        let ocspResponse: Buffer = cacheValue;\n        const sig: string = ocspRequest.certID.toString(\"hex\");\n\n        // Do we have a valid response?\n        if (!ocspResponse) {\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\n        }\n\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\n                if (!!error) {\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\n\n                    // Bad Cached Value? One more try without the cache.\n                    if (!!cacheValue) {\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\n                            resolve();\n                        }, (error: Error) => {\n                            reject(error);\n                        });\n                    } else {\n                        reject(error);\n                    }\n                } else {\n                    if (!cacheValue) {\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\n        const signature: string = req.id.toString(\"hex\");\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\n\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\n        this.StoreCacheEntry(signature, rawResponse);\n        this.onEvent(new OCSPCacheUpdatehCompleteEvent(req.id.toString(\"hex\")));\n\n    }\n\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\n        this.StoreMemoryCacheEntry(sig, rawResponse);\n        this.StoreDiskCacheEntry(sig, rawResponse);\n    }\n\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\n        this.privMemCache[sig] = rawResponse;\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\n    }\n\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\n        this.privDiskCache.set(sig, rawResponse).then(() => {\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\n        });\n    }\n\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\n\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\n        let options: http.RequestOptions = {};\n\n        if (!!proxyInfo) {\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\n            options.agent = agent;\n        }\n\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n\n                const parsedUri: {[k: string]: any} = parse.default(uri);\n                parsedUri.path = parsedUri.pathname;\n                options = { ...options, ...parsedUri };\n\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\n                    if (error) {\n                        reject(error);\n                        return;\n                    }\n\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\n                    resolve(raw);\n                });\n            });\n        });\n    }\n\n    private static onEvent = (event: OCSPEvent): void => {\n        Events.instance.onEvent(event);\n    }\n\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\n        let socketPromise: Promise<net.Socket>;\n\n        options = {\n            ...options,\n            ...{\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\n                servername: options.host\n            }\n        };\n\n        if (!!this.privProxyInfo) {\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\n\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\n                    if (!!error) {\n                        reject(error);\n                    } else {\n                        resolve(socket);\n                    }\n                });\n            });\n        } else {\n            if (!!options.secureEndpoint) {\n                socketPromise = Promise.resolve(tls.connect(options));\n            } else {\n                socketPromise = Promise.resolve(net.connect(options));\n            }\n        }\n\n        if (!!enableOCSP) {\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\n        } else {\n            return socketPromise;\n        }\n    }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* (ignored) */","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\\\/]+/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?([\\\\/]{1,})?([\\S\\s]*)/i\n  , whitespace = '[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]'\n  , left = new RegExp('^'+ whitespace +'+');\n\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address) {          // Sanitize what is left of the address\n    return address.replace('\\\\', '/');\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d+)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n\n  var match = protocolre.exec(address)\n    , protocol = match[1] ? match[1].toLowerCase() : ''\n    , slashes = !!(match[2] && match[2].length >= 2);\n\n  return {\n    protocol: protocol,\n    slashes: slashes,\n    rest: match[3]\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && url.hostname) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:'\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\nimport {\n    IAudioStreamNode,\n    IStreamChunk,\n} from \"../common/Exports\";\n\nexport class ReplayableAudioNode implements IAudioStreamNode {\n    private privAudioNode: IAudioStreamNode;\n    private privBytesPerSecond: number;\n    private privBuffers: BufferEntry[] = [];\n    private privReplayOffset: number = 0;\n    private privLastShrinkOffset: number = 0;\n    private privBufferStartOffset: number = 0;\n    private privBufferSerial: number = 0;\n    private privBufferedBytes: number = 0;\n    private privReplay: boolean = false;\n    private privLastChunkAcquiredTime: number = 0;\n\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\n        this.privAudioNode = audioSource;\n        this.privBytesPerSecond = bytesPerSecond;\n    }\n\n    public id = (): string => {\n        return this.privAudioNode.id();\n    }\n\n    // Reads and returns the next chunk of audio buffer.\n    // If replay of existing buffers are needed, read() will first seek and replay\n    // existing content, and upoin completion it will read new content from the underlying\n    // audio node, saving that content into the replayable buffers.\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\n        // if there is a replay request to honor.\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\n            // Find the start point in the buffers.\n            // Offsets are in 100ns increments.\n            // So how many bytes do we need to seek to get the right offset?\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\n\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\n            if (0 !== (bytesToSeek % 2)) {\n                bytesToSeek++;\n            }\n\n            let i: number = 0;\n\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\n            }\n\n            if (i < this.privBuffers.length) {\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\n\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\n\n                // If we've reached the end of the buffers, stop replaying.\n                if (i === this.privBuffers.length - 1) {\n                    this.privReplay = false;\n                }\n\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\n                    buffer: retVal,\n                    isEnd: false,\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\n                });\n            }\n        }\n\n        return this.privAudioNode.read()\n            .then((result: IStreamChunk<ArrayBuffer>) => {\n                if (result && result.buffer) {\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\n                    this.privBufferedBytes += result.buffer.byteLength;\n                }\n                return result;\n            });\n    }\n\n    public detach(): Promise<void> {\n        this.privBuffers = undefined;\n        return this.privAudioNode.detach();\n    }\n\n    public replay(): void {\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\n            this.privReplay = true;\n            this.privReplayOffset = this.privLastShrinkOffset;\n        }\n    }\n\n    // Shrinks the existing audio buffers to start at the new offset, or at the\n    // beginning of the buffer closest to the requested offset.\n    // A replay request will start from the last shrink point.\n    public shrinkBuffers(offset: number): void {\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\n            return;\n        }\n\n        this.privLastShrinkOffset = offset;\n\n        // Find the start point in the buffers.\n        // Offsets are in 100ns increments.\n        // So how many bytes do we need to seek to get the right offset?\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\n\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\n\n        let i: number = 0;\n\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\n        }\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\n        this.privBuffers = this.privBuffers.slice(i);\n    }\n\n    // Finds the time a buffer of audio was first seen by offset.\n    public findTimeAtOffset(offset: number): number {\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\n            return 0;\n        }\n\n        for (const value of this.privBuffers) {\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\n\n            if (offset >= startOffset && offset <= endOffset) {\n                return value.chunk.timeReceived;\n            }\n        }\n\n        return 0;\n    }\n}\n\n// Primary use of this class is to help debugging problems with the replay\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\n// the ArrayBuffer directly.\n// tslint:disable-next-line:max-classes-per-file\nclass BufferEntry {\n    public chunk: IStreamChunk<ArrayBuffer>;\n    public serial: number;\n    public byteOffset: number;\n\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\n        this.chunk = chunk;\n        this.serial = serial;\n        this.byteOffset = byteOffset;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport { RecognizerConfig } from \"../common.speech/Exports\";\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\n\nexport class ProxyInfo {\n    private privProxyHostName: string;\n    private privProxyPort: number;\n    private privProxyUserName: string;\n    private privProxyPassword: string;\n\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\n        this.privProxyHostName = proxyHostName;\n        this.privProxyPort = proxyPort;\n        this.privProxyUserName = proxyUserName;\n        this.privProxyPassword = proxyPassword;\n    }\n\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\n    }\n\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\n        return this.fromParameters(config.parameters);\n    }\n\n    public get HostName(): string {\n        return this.privProxyHostName;\n    }\n\n    public get Port(): number {\n        return this.privProxyPort;\n    }\n\n    public get UserName(): string {\n        return this.privProxyUserName;\n    }\n\n    public get Password(): string {\n        return this.privProxyPassword;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT license.\n\nimport {\n    ArgumentNullError,\n    Deferred\n} from \"../common/Exports\";\nimport { IRequestOptions } from \"./Exports\";\n\n// Node.JS specific xmlhttprequest / browser support.\nimport * as XHR from \"xmlhttprequest-ts\";\n\nexport enum RestRequestType {\n    Get = \"get\",\n    Post = \"post\",\n    Delete = \"delete\",\n    File = \"file\",\n}\n\nexport interface IRestResponse {\n    ok: boolean;\n    status: number;\n    statusText: string;\n    data: string;\n    json: <T>() => T;\n    headers: string;\n}\n\n// accept rest operations via request method and return abstracted objects from server response\nexport class RestMessageAdapter {\n\n    private privTimeout: number;\n    private privIgnoreCache: boolean;\n    private privHeaders: { [key: string]: string; };\n\n    public constructor(\n        configParams: IRequestOptions,\n        connectionId?: string\n        ) {\n\n        if (!configParams) {\n            throw new ArgumentNullError(\"configParams\");\n        }\n\n        this.privHeaders = configParams.headers;\n        this.privTimeout = configParams.timeout;\n        this.privIgnoreCache = configParams.ignoreCache;\n    }\n\n    public setHeaders(key: string, value: string ): void {\n        this.privHeaders[key] = value;\n    }\n\n    public request(\n        method: RestRequestType,\n        uri: string,\n        queryParams: any = {},\n        body: any = null,\n        binaryBody: Blob | Buffer = null,\n        ): Promise<IRestResponse> {\n\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\n\n        let xhr: XMLHttpRequest | XHR.XMLHttpRequest;\n        if (typeof (XMLHttpRequest) === \"undefined\") {\n            xhr = new XHR.XMLHttpRequest();\n        } else {\n            xhr = new XMLHttpRequest();\n        }\n        const requestCommand = method === RestRequestType.File ? \"post\" : method;\n        xhr.open(requestCommand, this.withQuery(uri, queryParams), true);\n\n        if (this.privHeaders) {\n            Object.keys(this.privHeaders).forEach((key: any) => xhr.setRequestHeader(key, this.privHeaders[key]));\n        }\n\n        if (this.privIgnoreCache) {\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        }\n\n        xhr.timeout = this.privTimeout;\n\n        xhr.onload = () => {\n            responseReceivedDeferral.resolve(this.parseXHRResult(xhr));\n        };\n\n        xhr.onerror = () => {\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Failed to make request.\"));\n        };\n\n        xhr.ontimeout = () => {\n            responseReceivedDeferral.resolve(this.errorResponse(xhr, \"Request took longer than expected.\"));\n        };\n\n        if (method === RestRequestType.File && binaryBody) {\n            xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n            xhr.send(binaryBody);\n        } else if (method === RestRequestType.Post && body) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.send(JSON.stringify(body));\n        } else {\n            xhr.send();\n        }\n\n        return responseReceivedDeferral.promise;\n    }\n\n    private parseXHRResult(xhr: XMLHttpRequest | XHR.XMLHttpRequest): IRestResponse {\n        return {\n            data: xhr.responseText,\n            headers: xhr.getAllResponseHeaders(),\n            json: <T>() => JSON.parse(xhr.responseText) as T,\n            ok: xhr.status >= 200 && xhr.status < 300,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private errorResponse(xhr: XMLHttpRequest | XHR.XMLHttpRequest, message: string | null = null): IRestResponse {\n        return {\n            data: message || xhr.statusText,\n            headers: xhr.getAllResponseHeaders(),\n            json: <T>() => JSON.parse(message || (\"\\\"\" + xhr.statusText + \"\\\"\")) as T,\n            ok: false,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private withQuery(url: string, params: any = {}): any {\n        const queryString = this.queryParams(params);\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\n    }\n\n    private queryParams(params: any = {}): any {\n        return Object.keys(params)\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\n            .join(\"&\");\n    }\n}\n","/* (ignored) */"],"sourceRoot":""}